<?php

/**
 * @file
 * Contains HELfi platform configuration alterations.
 */

declare(strict_types = 1);

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\helfi_api_base\Environment\Project;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\user\Entity\Role;

/**
 * Implements hook_modules_installed().
 */
function helfi_platform_config_modules_installed(array $modules) : void {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('locale')) {
    locale_system_set_config_langcodes();
  }

  $paragraphTypes = $moduleHandler->invokeAll('helfi_paragraph_types');

  foreach ($paragraphTypes as $type) {
    if (!$type instanceof ParagraphTypeCollection) {
      throw new \LogicException(
        sprintf('$type must be an instance of %s, %s given.', ParagraphTypeCollection::class, gettype($type))
      );
    }
    helfi_platform_config_configure_paragraph_field_handler($type);
  }
}

/**
 * Enable paragraph type for given entity/bundle/field combination.
 *
 * @param \Drupal\helfi_platform_config\DTO\ParagraphTypeCollection $type
 *   The paragraph type DTO.
 */
function helfi_platform_config_configure_paragraph_field_handler(ParagraphTypeCollection $type) : void {
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');

  // Nothing to do if the entity type/bundle does not exist.
  if (!$definitions = $entityFieldManager->getFieldDefinitions($type->entityType, $type->bundle)) {
    return;
  }

  if (!isset($definitions[$type->field])) {
    return;
  }
  $field = $definitions[$type->field];

  if (!str_contains($field->getSetting('handler'), 'paragraph')) {
    throw new InvalidArgumentException(
      sprintf('"%s" field is not a valid paragraph reference', $field->getName()),
    );
  }
  $handlerSettings = $field->getSetting('handler_settings');

  if (!isset($handlerSettings['target_bundles'][$type->paragraph])) {
    $handlerSettings['target_bundles'][$type->paragraph] = $type->paragraph;
    $handlerSettings['target_bundles_drag_drop'][$type->paragraph] = [
      'weight' => 30,
      'enabled' => TRUE,
    ];
    $field->setSetting('handler_settings', $handlerSettings);
    $field->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function helfi_platform_config_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) : void {
  // Replace node title on nodes with the visible title field.
  // @todo Needs work on caches, wrong title is displayed if user visits content listing.
  if ($entity->hasField('field_unit_visible_title')) {
    $entity->set('title', Drupal::token()->replace((string) $entity->get('field_unit_visible_title')->value));
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function helfi_platform_config_module_implements_alter(&$implementations, $hook) : void {
  if ($hook == 'modules_installed') {
    $moduleHandler = Drupal::service('module_handler');
    if ($moduleHandler->moduleExists('locale')) {
      unset($implementations['locale']);
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function helfi_platform_config_page_attachments(array &$attachments) : void {
  $attachments['#attached']['library'][] = 'helfi_platform_config/clear_localstorage';
}

/**
 * Implements hook_theme().
 */
function helfi_platform_config_theme() : array {
  return [
    'cookie_consent_intro' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'hero_block' => [
      'variables' => [
        'title' => NULL,
        'paragraphs' => NULL,
        'is_revision' => NULL,
        'first_paragraph_grey' => NULL,
      ],
    ],
    'lower_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
        'computed' => NULL,
      ],
    ],
    'sidebar_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
        'computed' => NULL,
      ],
    ],
    'react_and_share' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_block_access().
 */
function helfi_platform_config_block_access(Block $block, $operation, AccountInterface $account): AccessResult {
  // Handle page title block access based on field_has_hero value.
  if ($operation === 'view' && $block->getPluginId() === 'page_title_block') {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = Drupal::service('helfi_platform_config.entity_version_matcher')
      ->getType()['entity'];

    if (
      !$entity instanceof ContentEntityInterface ||
      !$entity->hasField('field_has_hero')
    ) {
      return AccessResult::neutral();
    }

    return AccessResult::allowedIf(!$entity->field_has_hero->value)
      ->addCacheableDependency($block);
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_token_info().
 */
function helfi_platform_config_token_info() : array {
  $info['tokens']['site']['page-title-suffix'] = [
    'name' => t('Page title suffix'),
    'description' => t('Official suffix for page title.'),
  ];
  return $info;
}

/**
 * Grants permissions for given role.
 *
 * @param array $permissions
 *   The permissions.
 */
function helfi_platform_config_grant_permissions(array $permissions): void {
  foreach ($permissions as $rid => $perms) {
    if (!$rid = Role::load($rid)) {
      throw new \InvalidArgumentException("Role ($rid) not found.");
    }
    array_map(fn (string $permission) => $rid->grantPermission($permission), $perms);
  }
}

/**
 * Implements hook_tokens().
 */
function helfi_platform_config_tokens(
  $type,
  $tokens,
  array $data,
  array $options,
  BubbleableMetadata $bubbleable_metadata
) {
  $replacements = [];

  foreach ($tokens as $name => $original) {
    if ($name === 'page-title-suffix') {
      $language = Drupal::languageManager()->getCurrentLanguage();

      $replacements[$original] = match ($language->getId()) {
        'fi' => 'Helsingin kaupunki',
        'sv' => 'Helsingfors stad',
        'ru' => 'Гopoд Xeльcинки',
        default => 'City of Helsinki',
      };
    }
  }

  return $replacements;
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function helfi_platform_config_system_breadcrumb_alter(
  Breadcrumb &$breadcrumb,
  RouteMatchInterface $route_match,
  array $context
) : void {
  // Skip admin routes.
  if ($route_match->getRouteObject()?->getOption('_admin_route')) {
    return;
  }

  /** @var \Drupal\helfi_api_base\Environment\EnvironmentResolver $resolver */
  $resolver = \Drupal::service('helfi_api_base.environment_resolver');

  // Do nothing if the current project is not in environments list.
  try {
    $activeEnvironment = $resolver->getActiveEnvironment()->getEnvironmentName();
    $environment = $resolver->getEnvironment(Project::ETUSIVU, $activeEnvironment);
  }
  catch (\Exception $e) {
    return;
  }

  $currentLanguage = Drupal::languageManager()
    ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
    ->getId();

  // Revert to English path, if current language path is not found.
  try {
    $url = $environment->getUrl($currentLanguage);
  }
  catch (\Exception $e) {
    $url = $environment->getUrl('en');
  }

  $links = $breadcrumb->getLinks();
  array_unshift($links, Link::fromTextAndUrl(t('Front page'), Url::fromUri($url)));

  // Include front page in breadcrumb if it's the only item.
  if (count($links) === 1 && Drupal::service('path.matcher')->isFrontPage()) {
    $entities = array_filter($route_match->getParameters()->all(), function ($value) {
      return $value instanceof EntityInterface;
    });

    if ($entity = reset($entities)) {
      $links[] = Link::createFromRoute($entity->label(), '<none>');
    }
  }

  // We have to recreate entire breadcrumb trail here, because breadcrumb
  // class forbids setting links after they've been set once.
  // @see \Drupal\Core\Breadcrumb\Breadcrumb::setLinks().
  $newBreadcrumb = new Breadcrumb();
  $newBreadcrumb->setLinks($links);
  // Merge cacheable metadata.
  $newBreadcrumb->addCacheTags($breadcrumb->getCacheTags())
    ->addCacheContexts($breadcrumb->getCacheContexts());

  $breadcrumb = $newBreadcrumb;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_platform_config_preprocess_react_and_share(&$variables) : void {
  if (Drupal::moduleHandler()->moduleExists('helfi_eu_cookie_compliance')) {
    $variables['privacy_policy_url'] = helfi_eu_cookie_compliance_get_privacy_policy_url();
  }
}
