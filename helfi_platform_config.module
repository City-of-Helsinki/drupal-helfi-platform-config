<?php

/**
 * @file
 * Contains HELfi platform configuration alterations.
 */

declare(strict_types = 1);

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldConfigBase;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\helfi_api_base\Environment\Project;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\paragraphs\Entity\ParagraphsType;
use Drupal\user\Entity\Role;

/**
 * Implements hook_modules_installed().
 */
function helfi_platform_config_modules_installed(array $modules, bool $is_syncing) : void {
  if ($is_syncing) {
    return;
  }
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('locale')) {
    locale_system_set_config_langcodes();
  }
  helfi_platform_config_update_paragraph_target_types();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function helfi_platform_config_base_field_override_presave(
 FieldConfigBase $field
) : void {
  if ($field->get('entity_type') !== 'paragraphs_library_item') {
    return;
  }
  helfi_platform_config_rebuild_handler_settings($field);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function helfi_platform_config_field_config_presave(
  FieldConfigBase $field
) : void {
  helfi_platform_config_rebuild_handler_settings($field);
}

/**
 * Rebuild field handler settings target bundles after saving fields.
 *
 * @param \Drupal\Core\Field\FieldConfigBase $field
 *   Base field override or field config.
 */
function helfi_platform_config_rebuild_handler_settings(
  FieldConfigBase $field
): void {
  if ($field->isSyncing() || $field->getType() !== 'entity_reference_revisions') {
    return;
  }
  $collection = [];
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = Drupal::service('module_handler');
  $paragraphTypes = $moduleHandler->invokeAll('helfi_paragraph_types');

  foreach ($paragraphTypes as $type) {
    if (!$type instanceof ParagraphTypeCollection) {
      throw new LogicException(
        sprintf('$type must be an instance of %s, %s given.', ParagraphTypeCollection::class, gettype($type))
      );
    }

    if (!ParagraphsType::load($type->paragraph)) {
      continue;
    }
    $collection[$type->entityType][$type->bundle][$type->field][] = $type;
  }
  if (!isset($collection[$field->getTargetEntityTypeId()][$field->getTargetBundle()][$field->getName()])) {
    return;
  }
  $paragraphTypes = $collection[$field->getTargetEntityTypeId()][$field->getTargetBundle()][$field->getName()];
  $handlerSettings = $field->getSetting('handler_settings');

  foreach ($paragraphTypes as $type) {
    $handlerSettings['target_bundles'][$type->paragraph] = $type->paragraph;
    $handlerSettings['target_bundles_drag_drop'][$type->paragraph] = [
      'weight' => $type->weight,
      'enabled' => TRUE,
    ];
  }
  $field->setSetting('handler_settings', $handlerSettings);
}

/**
 * Invokes all helfi_paragraph_types hooks and updates the field configuration.
 */
function helfi_platform_config_update_paragraph_target_types() : void {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = Drupal::service('module_handler');
  $paragraphTypes = $moduleHandler->invokeAll('helfi_paragraph_types');

  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');

  foreach ($paragraphTypes as $type) {
    if (!$type instanceof ParagraphTypeCollection) {
      throw new LogicException(
        sprintf('$type must be an instance of %s, %s given.', ParagraphTypeCollection::class, gettype($type))
      );
    }
    if (!$definitions = $entityFieldManager->getFieldDefinitions($type->entityType, $type->bundle)) {
      continue;
    }
    if (!isset($definitions[$type->field])) {
      continue;
    }
    $field = $definitions[$type->field];
    // Save the field to trigger re-build of target_bundles.
    // @see helfi_platform_config_field_config_presave().
    $field->save();
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function helfi_platform_config_module_implements_alter(&$implementations, $hook) : void {
  if ($hook == 'modules_installed') {
    $moduleHandler = Drupal::service('module_handler');
    if ($moduleHandler->moduleExists('locale')) {
      unset($implementations['locale']);
    }
  }

  // Move our field_config_presave hook to the top of the list, so it's run
  // before field module.
  if ($hook === 'field_config_presave') {
    $group = $implementations['helfi_platform_config'];
    $implementations = ['helfi_platform_config' => $group] + $implementations;
  }
}

/**
 * Implements hook_page_attachments().
 */
function helfi_platform_config_page_attachments(array &$attachments) : void {
  $attachments['#attached']['library'][] = 'helfi_platform_config/clear_localstorage';
}

/**
 * Implements hook_page_attachments_alter().
 */
function helfi_platform_config_page_attachments_alter(array &$attachments): void {
  foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
    if (in_array('system_meta_generator', $attachment)) {
      unset($attachments['#attached']['html_head'][$key]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function helfi_platform_config_theme() : array {
  return [
    'cookie_consent_intro' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'hero_block' => [
      'variables' => [
        'title' => NULL,
        'paragraphs' => NULL,
        'is_revision' => NULL,
        'first_paragraph_grey' => NULL,
      ],
    ],
    'lower_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
        'computed' => NULL,
      ],
    ],
    'profile_block' => [
      'variables' => [
        'logged_in' => FALSE,
        'display_name' => NULL,
        'full_name' => NULL,
        'email' => NULL,
        'url' => NULL,
      ],
    ],
    'sidebar_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
        'computed' => NULL,
      ],
    ],
    'react_and_share' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_block_access().
 */
function helfi_platform_config_block_access(Block $block, $operation, AccountInterface $account): AccessResult {
  // Handle page title block access based on field_has_hero value.
  if ($operation === 'view' && $block->getPluginId() === 'page_title_block') {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = Drupal::service('helfi_platform_config.entity_version_matcher')
      ->getType()['entity'];

    if (
      !$entity instanceof ContentEntityInterface ||
      !$entity->hasField('field_has_hero')
    ) {
      return AccessResult::neutral();
    }

    // Show title block if the "has hero" checkbox is not checked (=false).
    if (!$entity->get('field_has_hero')->value) {
      return AccessResult::allowed()->addCacheableDependency($block);
    }

    // Show title block if the "has hero" checkbox is checked (=true) and
    // the Hero paragraph is not found.
    return AccessResult::allowedIf(!$entity->get('field_hero')->entity)
      ->addCacheableDependency($block);
  }

  // Handle hero block access based on field_has_hero value.
  if ($operation === 'view' && $block->getPluginId() === 'hero_block') {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = Drupal::service('helfi_platform_config.entity_version_matcher')
      ->getType()['entity'];

    if (
      !$entity instanceof ContentEntityInterface ||
      !$entity->hasField('field_has_hero')
    ) {
      return AccessResult::neutral();
    }

    // Hide the hero block if the "has hero" checkbox is checked (=true).
    return AccessResult::forbiddenIf(!$entity->get('field_has_hero')->value);
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_token_info().
 */
function helfi_platform_config_token_info() : array {
  $info['tokens']['site']['page-title-suffix'] = [
    'name' => t('Page title suffix'),
    'description' => t('Official suffix for page title.'),
  ];
  return $info;
}

/**
 * Grants permissions for given role.
 *
 * @param array $map
 *   The role => permissions map.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \InvalidArgumentException
 */
function helfi_platform_config_grant_permissions(array $map): void {
  foreach ($map as $rid => $permissions) {
    if (!$role = Role::load($rid)) {
      throw new InvalidArgumentException("Role ($rid) not found.");
    }
    array_map(fn (string $permission) => $role->grantPermission($permission), $permissions);
    $role->save();
  }
}

/**
 * Removes permissions from all roles.
 *
 * This function can be used in update hooks to ensure that deprecated
 * permissions are removed.
 *
 * @param string[] $permissions
 *   The list of permissions to remove.
 */
function helfi_platform_config_remove_permissions_from_all_roles(array $permissions): void {
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll('user.role.') as $config_name) {
    $role = $config_factory->getEditable($config_name);
    $role->set('permissions', array_values(array_diff($role->get('permissions'), $permissions)));
    $role->save(TRUE);
  }
}

/**
 * Implements hook_tokens().
 */
function helfi_platform_config_tokens(
  $type,
  $tokens,
  array $data,
  array $options,
  BubbleableMetadata $bubbleable_metadata
): array {
  $replacements = [];

  foreach ($tokens as $name => $original) {
    if ($name === 'page-title-suffix') {
      $language = Drupal::languageManager()
        ->getCurrentLanguage(LanguageInterface::TYPE_INTERFACE);

      $replacements[$original] = match ($language->getId()) {
        'fi' => 'Helsingin kaupunki',
        'sv' => 'Helsingfors stad',
        'ru' => 'Гopoд Xeльcинки',
        default => 'City of Helsinki',
      };
    }
  }

  return $replacements;
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function helfi_platform_config_system_breadcrumb_alter(
  Breadcrumb &$breadcrumb,
  RouteMatchInterface $route_match,
  array $context
) : void {
  // Skip admin routes.
  if ($route_match->getRouteObject()?->getOption('_admin_route')) {
    return;
  }

  /** @var \Drupal\helfi_api_base\Environment\EnvironmentResolver $resolver */
  $resolver = Drupal::service('helfi_api_base.environment_resolver');

  // Do nothing if the current project is not in environments list.
  try {
    $activeEnvironment = $resolver->getActiveEnvironment()->getEnvironmentName();
    $environment = $resolver->getEnvironment(Project::ETUSIVU, $activeEnvironment);
  }
  catch (Exception $e) {
    return;
  }

  $currentLanguage = Drupal::languageManager()
    ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
    ->getId();

  // Revert to English path, if current language path is not found.
  try {
    $url = $environment->getUrl($currentLanguage);
  }
  catch (Exception $e) {
    $url = $environment->getUrl('en');
  }

  $links = $breadcrumb->getLinks();
  array_unshift($links, Link::fromTextAndUrl(t('Front page'), Url::fromUri($url)));

  // Include front page in breadcrumb if it's the only item.
  if (count($links) === 1 && Drupal::service('path.matcher')->isFrontPage()) {
    $entities = array_filter($route_match->getParameters()->all(), function ($value) {
      return $value instanceof EntityInterface;
    });

    if ($entity = reset($entities)) {
      $links[] = Link::createFromRoute($entity->label(), '<none>');
    }
  }

  // We have to recreate entire breadcrumb trail here, because breadcrumb
  // class forbids setting links after they've been set once.
  // @see \Drupal\Core\Breadcrumb\Breadcrumb::setLinks().
  $newBreadcrumb = new Breadcrumb();
  $newBreadcrumb->setLinks($links);
  // Merge cacheable metadata.
  $newBreadcrumb->addCacheTags($breadcrumb->getCacheTags())
    ->addCacheContexts($breadcrumb->getCacheContexts());

  $breadcrumb = $newBreadcrumb;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_platform_config_preprocess_react_and_share(&$variables) : void {
  if (Drupal::moduleHandler()->moduleExists('helfi_eu_cookie_compliance')) {
    $variables['privacy_policy_url'] = helfi_eu_cookie_compliance_get_privacy_policy_url();
  }
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * #UHF-9158 main languages must be always visible on language switcher.
 */
function helfi_platform_config_language_switch_links_alter(array &$links): void {
  $params = \Drupal::routeMatch()->getParameters()->all();

  $entity = NULL;
  foreach ($params as $param) {
    if ($param instanceof ContentEntityInterface) {
      $entity = $param;
      break;
    }
  }
  if (!$entity || !$entity->isTranslatable()) {
    return;
  }

  foreach ($links as $langcode => $link) {
    if (
      !$entity->hasTranslation($langcode) ||
      $entity->getTranslation($langcode)->isPublished()
    ) {
      continue;
    }

    // Unpublished link won't pass url access check
    // Replace unpublished translation with another one and set it disabled.
    unset($links[$langcode]['url']);
    $links[$langcode]['#untranslated'] = TRUE;
    $links[$langcode]['url'] = new Url('<nolink>');
    $links[$langcode]['attributes']['class'][] = 'language-link--untranslated';
  }
}
