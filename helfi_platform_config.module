<?php

/**
 * @file
 * Contains HELfi platform configuration alterations.
 */

declare(strict_types=1);

use Drupal\config_ignore\ConfigIgnoreConfig;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityPublishedInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldConfigBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\helfi_api_base\Environment\ActiveProjectRoles;
use Drupal\helfi_api_base\Environment\Project;
use Drupal\helfi_api_base\Environment\ProjectRoleEnum;
use Drupal\helfi_platform_config\ConfigUpdate\ConfigUpdater;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\helfi_platform_config\EntityVersionMatcher;
use Drupal\helfi_platform_config\Entity\PublishableRedirect;
use Drupal\helfi_platform_config\RedirectCleaner;
use Drupal\paragraphs\Entity\ParagraphsType;

/**
 * Implements hook_entity_type_build().
 */
function helfi_platform_config_entity_type_build(array &$entity_types): void {
  if (isset($entity_types['redirect'])) {
    $entity_types['redirect']->setClass(PublishableRedirect::class);
    $entity_types['redirect']->set('entity_keys', $entity_types['redirect']->getKeys() + [
      'custom' => 'is_custom',
    ]);
  }
}

/**
 * Implements hook_modules_installed().
 */
function helfi_platform_config_modules_installed(array $modules, bool $is_syncing) : void {
  if ($is_syncing) {
    return;
  }
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('locale')) {
    locale_system_set_config_langcodes();
  }

  foreach ($modules as $module) {
    $permissions = $moduleHandler->invoke($module, 'platform_config_grant_permissions');

    \Drupal::service(ConfigUpdater::class)
      ->updatePermissions($permissions ?? []);
  }

  helfi_platform_config_update_paragraph_target_types();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function helfi_platform_config_base_field_override_presave(
  FieldConfigBase $field,
) : void {
  if ($field->get('entity_type') !== 'paragraphs_library_item') {
    return;
  }
  helfi_platform_config_rebuild_handler_settings($field);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function helfi_platform_config_field_config_presave(
  FieldConfigBase $field,
) : void {
  helfi_platform_config_rebuild_handler_settings($field);
}

/**
 * Rebuild field handler settings target bundles after saving fields.
 *
 * @param \Drupal\Core\Field\FieldConfigBase $field
 *   Base field override or field config.
 */
function helfi_platform_config_rebuild_handler_settings(
  FieldConfigBase $field,
): void {
  if (
    \Drupal::isConfigSyncing() ||
    $field->isSyncing() ||
    $field->getType() !== 'entity_reference_revisions'
  ) {
    return;
  }

  $collection = [];
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = Drupal::service('module_handler');
  $paragraphTypes = $moduleHandler->invokeAll('helfi_paragraph_types');

  foreach ($paragraphTypes as $type) {
    if (!$type instanceof ParagraphTypeCollection) {
      throw new LogicException(
        sprintf('$type must be an instance of %s, %s given.', ParagraphTypeCollection::class, gettype($type))
      );
    }

    if (!ParagraphsType::load($type->paragraph)) {
      continue;
    }
    $collection[$type->entityType][$type->bundle][$type->field][] = $type;
  }
  if (!isset($collection[$field->getTargetEntityTypeId()][$field->getTargetBundle()][$field->getName()])) {
    return;
  }
  $paragraphTypes = $collection[$field->getTargetEntityTypeId()][$field->getTargetBundle()][$field->getName()];
  $handlerSettings = $field->getSetting('handler_settings');

  foreach ($paragraphTypes as $type) {
    $handlerSettings['target_bundles'][$type->paragraph] = $type->paragraph;
    $handlerSettings['target_bundles_drag_drop'][$type->paragraph] = [
      'weight' => $type->weight,
      'enabled' => TRUE,
    ];
  }
  $field->setSetting('handler_settings', $handlerSettings);
}

/**
 * Invokes all helfi_paragraph_types hooks and updates the field configuration.
 */
function helfi_platform_config_update_paragraph_target_types() : void {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = Drupal::service('module_handler');
  $paragraphTypes = $moduleHandler->invokeAll('helfi_paragraph_types');

  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');

  foreach ($paragraphTypes as $type) {
    if (!$type instanceof ParagraphTypeCollection) {
      throw new LogicException(
        sprintf('$type must be an instance of %s, %s given.', ParagraphTypeCollection::class, gettype($type))
      );
    }
    if (!$definitions = $entityFieldManager->getFieldDefinitions($type->entityType, $type->bundle)) {
      continue;
    }
    if (!isset($definitions[$type->field])) {
      continue;
    }
    $field = $definitions[$type->field];

    // Base fields use BaseFieldDefinition instances while configurable fields
    // use FieldConfig instances. Save the BaseFieldOverride to trigger
    // re-build of target_bundles.
    if ($field instanceof BaseFieldDefinition) {
      $field = $field->getConfig($type->bundle);
    }

    // Save the field to trigger re-build of target_bundles.
    // @see helfi_platform_config_field_config_presave().
    // @see helfi_platform_config_base_field_override_presave().
    $field->save();
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function helfi_platform_config_module_implements_alter(&$implementations, $hook) : void {
  if ($hook == 'modules_installed') {
    if (isset($implementations['locale'])) {
      unset($implementations['locale']);
    }
  }

  // Move our field_config_presave hook to the top of the list, so it's run
  // before field module.
  if ($hook === 'field_config_presave') {
    $group = $implementations['helfi_platform_config'];
    $implementations = ['helfi_platform_config' => $group] + $implementations;
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function helfi_platform_config_page_attachments_alter(array &$attachments): void {
  foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
    if (in_array('system_meta_generator', $attachment)) {
      unset($attachments['#attached']['html_head'][$key]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function helfi_platform_config_theme() : array {
  return [
    'hero_block' => [
      'variables' => [
        'title' => NULL,
        'paragraphs' => NULL,
        'is_revision' => NULL,
        'first_paragraph_grey' => NULL,
      ],
    ],
    'lower_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
        'computed' => NULL,
      ],
    ],
    'profile_block' => [
      'variables' => [
        'logged_in' => FALSE,
        'display_name' => NULL,
        'full_name' => NULL,
        'email' => NULL,
        'url' => NULL,
      ],
    ],
    'sidebar_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
        'computed' => NULL,
      ],
    ],
    'react_and_share' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'helfi_location_autocomplete' => [
      'variables' => [
        'attributes' => [],
        'children' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_block_access().
 */
function helfi_platform_config_block_access(Block $block, $operation, AccountInterface $account): AccessResult {
  // Handle page title block access based on field_has_hero value.
  if ($operation === 'view' && $block->getPluginId() === 'page_title_block') {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = Drupal::service(EntityVersionMatcher::class)->getType()['entity'];

    if (
      !$entity instanceof ContentEntityInterface ||
      !$entity->hasField('field_has_hero')
    ) {
      return AccessResult::neutral();
    }

    // Hide title block if the "has hero" checkbox is checked and
    // the Hero paragraph is found.
    if (
      $entity->get('field_has_hero')->value &&
      $entity->get('field_hero')->entity
    ) {
      return AccessResult::forbidden()
        ->addCacheableDependency($block);
    }

    return AccessResult::neutral()
      ->addCacheableDependency($block);
  }

  // Handle hero block access based on field_has_hero value.
  if ($operation === 'view' && $block->getPluginId() === 'hero_block') {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = Drupal::service(EntityVersionMatcher::class)->getType()['entity'];

    if (
      !$entity instanceof ContentEntityInterface ||
      !$entity->hasField('field_has_hero')
    ) {
      return AccessResult::forbidden();
    }

    // Hide the hero block if the "has hero" checkbox is checked (=true)
    // or the field_hero field is missing.
    if (
      !$entity->get('field_has_hero')->value ||
      !$entity->get('field_hero')->entity
    ) {
      return AccessResult::forbidden();
    }

    return AccessResult::neutral();
  }

  return AccessResult::neutral();
}

/**
 * Removes permissions from all roles.
 *
 * This function can be used in update hooks to ensure that deprecated
 * permissions are removed.
 *
 * @param string[] $permissions
 *   The list of permissions to remove.
 */
function helfi_platform_config_remove_permissions_from_all_roles(array $permissions): void {
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll('user.role.') as $config_name) {
    $role = $config_factory->getEditable($config_name);
    $role->set('permissions', array_values(array_diff($role->get('permissions'), $permissions)));
    $role->save(TRUE);
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function helfi_platform_config_system_breadcrumb_alter(
  Breadcrumb &$breadcrumb,
  RouteMatchInterface $route_match,
  array $context,
) : void {
  // Skip admin routes.
  if ($route_match->getRouteObject()?->getOption('_admin_route')) {
    return;
  }

  /** @var \Drupal\helfi_api_base\Environment\EnvironmentResolver $resolver */
  $resolver = Drupal::service('helfi_api_base.environment_resolver');

  if (!Drupal::service(ActiveProjectRoles::class)->hasRole(ProjectRoleEnum::Core)) {
    return;
  }

  // Do nothing if the current project is not in environments list.
  try {
    $activeEnvironment = $resolver->getActiveEnvironment()->getEnvironmentName();
    $environment = $resolver->getEnvironment(Project::ETUSIVU, $activeEnvironment);
  }
  catch (Exception $e) {
    return;
  }

  $currentLanguage = Drupal::languageManager()
    ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
    ->getId();

  $active_project = $resolver->getActiveProject()->getName();
  $etusivu_project = $resolver->getProject(Project::ETUSIVU)->getName();

  if ($active_project === $etusivu_project) {
    $url = Url::fromRoute('<front>');
  }
  else {
    // Revert to Finnish path, if current language path is not found.
    try {
      $url = Url::fromUri($environment->getUrl($currentLanguage));
    }
    catch (Exception $e) {
      $url = Url::fromUri($environment->getUrl('fi'));
    }
  }

  $links = $breadcrumb->getLinks();
  array_unshift($links, Link::fromTextAndUrl(t('Front page'), $url));

  // Include front page in breadcrumb if it's the only item.
  if (count($links) === 1 && Drupal::service('path.matcher')->isFrontPage()) {
    $entities = array_filter($route_match->getParameters()->all(), function ($value) {
      return $value instanceof EntityInterface;
    });

    if ($entity = reset($entities)) {
      $links[] = Link::createFromRoute($entity->label(), '<none>');
    }
  }

  // We have to recreate entire breadcrumb trail here, because breadcrumb
  // class forbids setting links after they've been set once.
  // @see \Drupal\Core\Breadcrumb\Breadcrumb::setLinks().
  $newBreadcrumb = new Breadcrumb();
  $newBreadcrumb->setLinks($links);
  // Merge cacheable metadata.
  $newBreadcrumb->addCacheTags($breadcrumb->getCacheTags())
    ->addCacheContexts($breadcrumb->getCacheContexts());

  $breadcrumb = $newBreadcrumb;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_platform_config_preprocess_react_and_share(&$variables) : void {
  if (Drupal::moduleHandler()->moduleExists('hdbt_cookie_banner')) {
    /** @var \Drupal\hdbt_cookie_banner\Services\CookieSettings $cookie_settings */
    $cookie_settings = \Drupal::service('hdbt_cookie_banner.cookie_settings');
    $variables['privacy_policy_url'] = $cookie_settings->getCookieSettingsPageUrl();
  }
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * #UHF-9158 main languages must be always visible on language switcher.
 */
function helfi_platform_config_language_switch_links_alter(array &$links): void {
  $route_match = \Drupal::routeMatch();
  $params = $route_match->getParameters()->all();

  $entity = NULL;
  foreach ($params as $param) {
    if ($param instanceof ContentEntityInterface) {
      $entity = $param;
      break;
    }
  }

  if (!$entity || !$entity->isTranslatable()) {
    // UHF-10060: Disable the language links on 404-pages so that /system/404
    // route is not accessible for crawlers etc.
    if (in_array($route_match->getRouteName(), ['system.401', 'system.403', 'system.404'])) {
      $language = Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);

      foreach ($links as $langcode => &$link) {
        helfi_platform_config_set_language_link_disabled($link);
        if ($language->getId() === $langcode) {
          $link['#nolink'] = TRUE;
        }
      }
    }

    return;
  }

  foreach ($links as $langcode => &$link) {
    if (!$entity->hasTranslation($langcode)) {
      continue;
    }

    $entity = $entity->getTranslation($langcode);
    if (!$entity instanceof EntityPublishedInterface || $entity->isPublished()) {
      continue;
    }

    helfi_platform_config_set_language_link_disabled($link);
  }
}

/**
 * Set language link disabled.
 *
 * @param array $link
 *   Language link for language switcher.
 */
function helfi_platform_config_set_language_link_disabled(array &$link): void {
  // Unpublished link won't pass url access check
  // Replace unpublished translation with another one and set it disabled.
  unset($link['url']);
  $link['#untranslated'] = TRUE;
  $link['url'] = new Url('<nolink>');
  $link['attributes']['class'][] = 'language-link--untranslated';
}

/**
 * Implements hook_config_ignore_ignored_alter().
 */
function helfi_platform_config_config_ignore_ignored_alter(ConfigIgnoreConfig $ignored): void {
  $settings_to_ignore = [
    'block.block.ibmchatapp',
    'block.block.ibmchatapp_*',
    'block.block.teliaacewidget*',
    'block.block.hdbt_subtheme_teliaacewidget*',
  ];

  // Add the configuration objects to the ignore list.
  foreach (['create', 'update', 'delete'] as $operation) {
    foreach (['import', 'export'] as $direction) {
      // Create the new configurations during import.
      if ($operation === 'create' && $direction === 'import') {
        continue;
      }
      $list = array_merge(
        $ignored->getList($direction, $operation),
        $settings_to_ignore,
      );
      $ignored->setList($direction, $operation, $list);
    }
  }

  // Ignore the external menu block dependencies for menu configurations.
  // Without this, configuration import will fail with an error when trying
  // to delete the menu that the block depends on. The dependency is obsolete,
  // but Drupal still adds it because of the block's plugin.
  foreach (['create', 'update', 'delete'] as $operation) {
    $list = array_merge(
      $ignored->getList('import', $operation),
      ['block.block.external_*:dependencies.config'],
    );
    $ignored->setList('import', $operation, $list);
  }
}

/**
 * Implements hook_config_schema_info_alter().
 */
function helfi_platform_config_config_schema_info_alter(array &$definitions) : void {
  // Add translation contexts to contrib modules.
  if (isset($definitions['social_media.item.email'])) {
    $definitions['social_media.item.email']['mapping']['text']['translation context'] = 'Social media: email';
  }
}

/**
 * Implements hook_form_alter().
 */
function helfi_platform_config_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  if (in_array($form_id, ['redirect_redirect_edit_form', 'redirect_redirect_form'])) {
    // Set is_custom field to true whenever redirect entity is saved from
    // entity form. The field defaults to FALSE if it is saved from Drupal API.
    $form['is_custom'] = [
      '#type' => 'hidden',
      '#access' => FALSE,
      '#default_value' => [TRUE],
    ];

    $formObject = $form_state->getFormObject();
    assert($formObject instanceof EntityFormInterface);
    $redirect = $formObject->getEntity();
    if ($redirect instanceof EntityPublishedInterface) {
      $form['status'] = [
        '#type' => 'checkbox',
        '#title' => new TranslatableMarkup('Published'),
        '#default_value' => $redirect->isPublished(),
      ];
    }
  }
}

/**
 * Implements hook_cron().
 */
function helfi_platform_config_cron(): void {
  /** @var \Drupal\helfi_platform_config\RedirectCleaner $cleaner */
  $cleaner = \Drupal::service(RedirectCleaner::class);
  $cleaner->unpublishExpiredRedirects();
}

/**
 * Implements hook_preprocess_html().
 */
function helfi_platform_config_preprocess_html(&$variables): void {
  $matomo_site_id = Settings::get('matomo_site_id');
  if ($matomo_site_id) {
    $variables['#attached']['drupalSettings']['matomo_site_id'] = $matomo_site_id;
  }
}
