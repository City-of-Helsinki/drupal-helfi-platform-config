<?php

/**
 * @file
 * Contains HELfi platform configuration alterations.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Helper function to enable paragraph type for given entity/bundle/field combination.
 *
 * @param string $entityType
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 * @param string $fields
 *   The field name.
 * @param string $paragraphType
 *   The paragraph type to enable.
 *
 * @throws \InvalidArgumentException
 */
function helfi_platform_config_enable_paragraph_fields(string $entityType, string $bundle, array $fields, string $paragraphType) : void {
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
  $entityFieldManager = \Drupal::service('entity_field.manager');

  if (!$definitions = $entityFieldManager->getFieldDefinitions($entityType, $bundle)) {
    throw new \InvalidArgumentException(
      sprintf('Failed to load field definition for %s, %s', $entityType, $bundle)
    );
  }
  $definitions = array_filter($definitions, function (FieldDefinitionInterface $definition) use ($fields) : bool {
    return in_array($definition->getName(), $fields);
  });

  foreach ($definitions as $field) {
    if (!str_contains($field->getSetting('handler'), 'paragraph')) {
      throw new \InvalidArgumentException(
        sprintf('"%s" field is not a valid paragraph reference', $field->getName()),
      );
    }
    $handlerSettings = $field->getSetting('handler_settings');

    if (isset($handlerSettings['target_bundles'])) {
      $handlerSettings['target_bundles'][$paragraphType] = $paragraphType;
      $handlerSettings['target_bundles_drag_drop'][$paragraphType] = [
        'weight' => 30,
        'enabled' => TRUE,
      ];
    }
    $field->setSetting('handler_settings', $handlerSettings);
    $field->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function helfi_platform_config_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Replace node title on nodes with the visible title field.
  // @todo Needs work on caches, wrong title is displayed if user visits content listing.
  if ($entity->hasField('field_unit_visible_title')) {
    $entity->set('title', \Drupal::token()->replace((string) $entity->get('field_unit_visible_title')->value));
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function helfi_platform_config_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'modules_installed') {
    $moduleHandler = \Drupal::service('module_handler');
    if ($moduleHandler->moduleExists('locale')) {
      unset($implementations['locale']);
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function helfi_platform_config_modules_installed() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('locale')) {
    locale_system_set_config_langcodes();
  }
}

/**
 * Implements hook_page_attachments().
 */
function helfi_platform_config_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'helfi_platform_config/clear_localstorage';
}

/**
 * Implements hook_theme().
 */
function helfi_platform_config_theme() {
  return [
    'react_and_share' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_token_info().
 */
function helfi_platform_config_token_info() {
  $info['tokens']['site']['page-title-suffix'] = [
    'name' => t('Page title suffix'),
    'description' => t('Official suffix for page title.'),
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function helfi_platform_config_tokens(
  $type,
  $tokens,
  array $data,
  array $options,
  BubbleableMetadata $bubbleable_metadata
) {
  $replacements = [];

  foreach ($tokens as $name => $original) {
    if ($name === 'page-title-suffix') {
      $language = Drupal::languageManager()->getCurrentLanguage();

      switch ($language->getId()) {
        case 'fi':
          $replacements[$original] = 'Helsingin kaupunki';
          break;

        case 'sv':
          $replacements[$original] = 'Helsingfors stad';
          break;

        case 'ru':
          $replacements[$original] = 'Гopoд Xeльcинки';
          break;

        default:
          $replacements[$original] = 'City of Helsinki';
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook__preprocess_HOOK().
 */
function helfi_platform_config_preprocess_breadcrumb(&$variables) {
  $config = \Drupal::config('helfi_base_config.breadcrumb');
  if ($config && !$config->get('breadcrumb_base_links')) {
    return;
  }

  foreach (array_reverse($config->get('breadcrumb_base_links')) as $crumb) {
    if (empty($crumb['text']) || !filter_var($crumb['url'], FILTER_VALIDATE_URL)) {
      continue;
    }
    array_unshift(
      $variables['links'],
      Link::fromTextAndUrl(
        $crumb['text'],
        UrlHelper::isExternal($crumb['url'])
          ? Url::fromUri($crumb['url'])
          : Url::fromUserInput($crumb['url'])
      )
    );
    array_unshift(
      $variables['breadcrumb'],
      [
        'text' => $crumb['text'],
        'url' => $crumb['url'],
      ]
    );
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function helfi_platform_config_page_attachments_alter(array &$attachments) {
  // Set custom content type metatag on all content pages.
  if (empty($attachments['#attached']['html_head'])) {
    return;
  }

  $entities = array_filter(
    iterator_to_array(\Drupal::routeMatch()->getParameters()),
    function($param) {
      return ($param instanceof \Drupal\Core\Entity\EntityInterface && method_exists($param, 'getType'));
    }
  );

  $entity = !empty($entities) ? reset($entities) : NULL;
  if ($entity) {
    $type = $entity->getType();
    $tag_name = 'helfi_content_type';
    $helfi_content_type = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => $tag_name,
        'content' => $type,
      ],
    ];
    $attachments['#attached']['html_head'][] = [$helfi_content_type, $tag_name];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_platform_config_preprocess_react_and_share(&$variables) {
  $variables['privacy_policy_url'] = _helfi_platform_config_eu_cookie_compliance_get_privacy_policy_url();
}

/**
 * Helper function to get the privacy policy link URL.
 */
function _helfi_platform_config_eu_cookie_compliance_get_privacy_policy_url(): Url|string {
  $config = Drupal::config('eu_cookie_compliance.settings');
  $link = $config->get('popup_link');

  return (UrlHelper::isExternal($link))
    ? Url::fromUri($link)
    : Url::fromUserInput($link === '<front>' ? '/' : $link);
}
