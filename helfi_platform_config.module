<?php

/**
 * @file
 * Contains HELfi platform configuration alterations.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function helfi_platform_config_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Replace node title on nodes with the visible title field.
  // @todo Needs work on caches, wrong title is displayed if user visits content listing.
  if ($entity->hasField('field_unit_visible_title')) {
    $entity->set('title', \Drupal::token()->replace((string) $entity->get('field_unit_visible_title')->value));
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function helfi_platform_config_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'modules_installed') {
    $moduleHandler = \Drupal::service('module_handler');
    if ($moduleHandler->moduleExists('locale')) {
      unset($implementations['locale']);
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function helfi_platform_config_modules_installed() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('locale')) {
    locale_system_set_config_langcodes();
  }
}

/**
 * Implements hook_theme().
 */
function helfi_platform_config_theme() {
  return [
    'react_and_share' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_token_info()
 */
function hdbt_content_token_info() {
  $info['tokens']['site']['page-title-suffix'] = [
    'name' => t('Page title suffix'),
    'description' => t('Official suffix for page title.'),
  ];
  return $info;
}

/**
 * Implements hook_tokens()
 */
function hdbt_content_tokens(
  $type,
  $tokens,
  array $data,
  array $options,
  BubbleableMetadata $bubbleable_metadata
) {
  $replacements = [];

  foreach ($tokens as $name => $original) {
    if ($name === 'page-title-suffix') {
      $language = Drupal::languageManager()->getCurrentLanguage();

      switch ($language->getId()) {
        case 'fi':
          $replacements[$original] = 'Helsingin kaupunki';
          break;
        case 'sv':
          $replacements[$original] = 'Helsingfors stad';
          break;
        case 'ru':
          $replacements[$original] = 'Гopoд Xeльcинки';
          break;
        default:
          $replacements[$original] = 'City of Helsinki';
          break;
      }
    }
  }

  return $replacements;
}
