<?php

/**
 * @file
 * Contains installation hooks for HELfi platform config module.
 */

declare(strict_types=1);

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\TranslatableInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\helfi_api_base\Environment\ActiveProjectRoles;
use Drupal\helfi_api_base\Environment\ProjectRoleEnum;
use Drupal\helfi_platform_config\Entity\PublishableRedirect;
use Drupal\user\Entity\User;

/**
 * UHF-9113: Remove obsolete hotjar permission.
 */
function helfi_platform_config_update_9301(): void {
  helfi_platform_config_remove_permissions_from_all_roles([
    'administer hotjar settings',
  ]);
}

/**
 * Config_filter becomes obsolete after config_ignore 3.x upgrade.
 */
function helfi_platform_config_update_9302(): void {
  $module_installer = \Drupal::service('module_installer');

  if (\Drupal::moduleHandler()->moduleExists('config_filter')) {
    $module_installer->uninstall(['config_filter']);
  }
}

/**
 * Create an email address for all read_only users missing the email address.
 */
function helfi_platform_config_update_9303(): void {
  $query = \Drupal::entityQuery('user');
  $usersIds = $query->accessCheck(FALSE)
    ->condition('status', 1)
    ->condition('roles', ['read_only'])
    ->execute();
  if (!$usersIds) {
    return;
  }

  $userEntities = User::loadMultiple($usersIds);
  foreach ($userEntities as $user) {
    if (!$user->getEmail()) {
      $randomString = substr(md5((string) rand()), 0, 6);
      $email = "$randomString+readonly@hel.fi";
      $user->setEmail($email);
      $user->save();
    }
  }
}

/**
 * Include front page in custom simple_sitemap links.
 */
function helfi_platform_config_update_9304() : void {
  if (!\Drupal::moduleHandler()->moduleExists('simple_sitemap')) {
    return;
  }
  $config = \Drupal::configFactory()->getEditable('simple_sitemap.custom_links.default');
  $links = $config->get('links') ?? [];

  $links = array_filter($links, fn (array $link) => $link['path'] !== '/');
  $links[] = ['path' => '/', 'priority' => '1.0', 'changefreq' => 'daily'];
  $config->set('links', $links)
    ->save();
}

/**
 * UHF-9761: Remove the user inquiry -popup that is no longer used.
 */
function helfi_platform_config_update_9306() : void {
  $config_factory = Drupal::configFactory();

  // Make sure the configuration is present.
  if (!$config_factory->get('block.block.hdbt_subtheme_user_inquiry')->isNew()) {
    // Remove the user inquiry block.
    $config_factory->getEditable('block.block.hdbt_subtheme_user_inquiry')->delete();
  }
}

/**
 * UHF-9312: Remove config filter, prepare hal and rdf removal.
 */
function helfi_platform_config_update_9307() : void {
  $module_installer = \Drupal::service('module_installer');
  $environmentResolver = \Drupal::getContainer()->get('helfi_api_base.environment_resolver');

  try {
    $environmentResolver->getActiveEnvironment();
  }
  catch (\InvalidArgumentException) {
    return;
  }

  // If config filter would be enabled for some reason.
  // Prevents 'Currently using Missing or invalid module'.
  $config = \Drupal::configFactory()->getEditable('core.extension');
  $enabled_modules = $config->get('module') ?? [];
  if (isset($enabled_modules['config_filter'])) {
    unset($enabled_modules['config_filter']);
    $config->set('module', $enabled_modules);
    $config->save();
    \Drupal::service('extension.list.module')->reset();
    \Drupal::moduleHandler()->invokeAll('rebuild');
    $module_installer->uninstall(['config_filter']);
  }

  // Disable hal & rdf modules.
  foreach (['hal', 'rdf'] as $module_name) {
    if (\Drupal::moduleHandler()->moduleExists($module_name)) {
      $module_installer->uninstall([$module_name]);
    }
  }
}

/**
 * UHF-10063: Enable help module to prevent errors during twig:compile.
 */
function helfi_platform_config_update_9308() : void {
  $module_installer = \Drupal::service('module_installer');

  // Enable help module.
  if (!\Drupal::moduleHandler()->moduleExists('help')) {
    $module_installer->install(['help']);
  }
}

/**
 * Rerun hal/rdf module disabling since the first one did not run.
 */
function helfi_platform_config_update_9309() {
  helfi_platform_config_update_9307();
}

/**
 * UHF-9708: Enable helfi_node_survey module.
 */
function helfi_platform_config_update_9310() : void {
  $module_installer = \Drupal::service('module_installer');

  // Enable helfi_node_survey module.
  if (!\Drupal::moduleHandler()->moduleExists('helfi_node_survey')) {
    $module_installer->install(['helfi_node_survey']);
  }
}

/**
 * UHF-9708: Fix "Mismatched entity and/or field definitions" for published_at.
 */
function helfi_platform_config_update_9311(): void {
  if (!\Drupal::moduleHandler()->moduleExists('publication_date')) {
    return;
  }

  $changeList = \Drupal::entityDefinitionUpdateManager()->getChangeList();

  // Check if field storage definition for published_at is missing.
  if (isset($changeList['node']['field_storage_definitions']['published_at'])) {
    $entity_type = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->getEntityType();

    if ($field = publication_date_entity_base_field_info($entity_type)['published_at'] ?? NULL) {
      \Drupal::entityDefinitionUpdateManager()
        ->installFieldStorageDefinition('published_at', 'node', 'publication_date', $field);
    }
  }
}

/**
 * UHF-9708: Enable helfi_users module.
 */
function helfi_platform_config_update_9312() : void {
  helfi_platform_config_remove_permissions_from_all_roles([
    'delete user accounts',
  ]);

  if (!\Drupal::moduleHandler()->moduleExists('helfi_users')) {
    \Drupal::service('module_installer')->install(['helfi_users']);
  }
}

/**
 * UHF-10259: Enable helfi_paragraphs_curated_event_list module.
 */
function helfi_platform_config_update_9313() : void {
  $environmentResolver = \Drupal::getContainer()->get('helfi_api_base.environment_resolver');

  try {
    $environmentResolver->getActiveEnvironment();
  }
  catch (\InvalidArgumentException) {
    return;
  }

  $module_installer = \Drupal::service('module_installer');

  // Enable helfi_paragraphs_curated_event_list.
  if (!\Drupal::moduleHandler()->moduleExists('helfi_paragraphs_curated_event_list')) {
    $module_installer->install(['helfi_paragraphs_curated_event_list']);
  }
}

/**
 * UHF-9761: Remove the user inquiry -popup that is no longer used.
 */
function helfi_platform_config_update_9314() : void {
  $config_factory = Drupal::configFactory();

  // Make sure the configuration is present.
  if (!$config_factory->get('block.block.hdbt_subtheme_user_inquiry')->isNew()) {
    // Remove the user inquiry block.
    $config_factory->getEditable('block.block.hdbt_subtheme_user_inquiry')->delete();
  }
}

/**
 * UHF-10555: Removed unused media display.
 */
function helfi_platform_config_update_9315(): void {
  // We need to remove some unused configuration that has swum to all instances
  // but is now part of helfi_node_news_item module. The module is not on in
  // all instances so that is why the configuration is removed here.
  $config_factory = Drupal::configFactory();
  $config_factory->getEditable('core.entity_view_mode.media.image_content_area')
    ->delete();
  $config_factory->getEditable('core.entity_view_display.media.image.image_content_area')
    ->delete();
}

/**
 * UHF-10539: Update redirect entity type.
 */
function helfi_platform_config_update_9316() : void {
  if (!\Drupal::moduleHandler()->moduleExists('redirect')) {
    return;
  }

  $updateManager = \Drupal::entityDefinitionUpdateManager();
  $entityTypes = [
    'redirect' => $updateManager->getEntityType('redirect'),
  ];

  helfi_platform_config_entity_type_build($entityTypes);

  /** @var \Drupal\Core\Entity\EntityTypeInterface $entityType */
  $entityType = reset($entityTypes);

  $fields = PublishableRedirect::baseFieldDefinitions($entityType);

  // Revert class change.
  $entityType->setClass($entityType->getOriginalClass());

  // Update entity settings without updating the class.
  $updateManager->updateEntityType($entityType);

  foreach (['published', 'custom'] as $key) {
    $field = $fields[$entityType->getKey($key)];

    // Set published and custom initially to TRUE.
    if ($field instanceof BaseFieldDefinition) {
      $field->setInitialValue(TRUE);
    }

    $updateManager->installFieldStorageDefinition(
      $entityType->getKey($key),
      $entityType->id(),
      'helfi_platform_config',
      $field
    );
  }

  helfi_platform_config_entity_type_build($entityTypes);

  /** @var \Drupal\Core\Entity\EntityTypeInterface $entityType */
  $entityType = reset($entityTypes);

  // Update entity type again with the class change.
  $updateManager->updateEntityType($entityType);
}

/**
 * UHF-10539: Update redirect entity type.
 */
function helfi_platform_config_update_9317() : void {
  /** @var \Drupal\helfi_api_base\Environment\ActiveProjectRoles $projectRoles */
  $projectRoles = \Drupal::service(ActiveProjectRoles::class);

  if ($projectRoles->hasRole(ProjectRoleEnum::Core)) {
    \Drupal::configFactory()
      ->getEditable('helfi_platform_config.redirect_cleaner')
      ->set('enable', TRUE)
      ->save();
  }
}

/**
 * UHF-11225: Remove the chatleijuke block.
 */
function helfi_platform_config_update_9319() : void {
  $config_factory = Drupal::configFactory();
  // Remove the chatleijuke block.
  $config_factory->getEditable('block.block.chatleijuke')->delete();
  // Remove the chatleijuke block.
  $config_factory->getEditable('block.block.chatleijuke_2')->delete();

  // Remove the chatleijuke block.
  $config_factory->getEditable('block.block.hdbt_subtheme_chatleijuke')->delete();
}

/**
 * UHF-10899 Convert Outlook safe links to direct URLs.
 */
function helfi_platform_config_update_9320(): void {
  helfi_platform_config_convert_safelinks();
}

/**
 * Get anchor links from text fields and run them through conversion.
 */
function helfi_platform_config_convert_safelinks(): void {
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = Drupal::service('entity_field.manager');
  $entity_type_manager = \Drupal::entityTypeManager();

  $field_types = [
    'text_with_summary',
    'text',
    'text_long',
  ];

  $count = 0;

  foreach ($field_types as $field_type) {
    $field_map = $entity_field_manager->getFieldMapByFieldType($field_type);

    foreach ($field_map as $entity_type => $fields) {
      foreach ($fields as $name => $field) {
        $query = $entity_type_manager
          ->getStorage($entity_type)
          ->getQuery();

        $ids = $query->exists($name)
          ->condition($name, '<a href="[^"]*safelinks\.protection\.outlook\.com[^"]*"', 'REGEXP')
          ->accessCheck(FALSE)
          ->execute();

        foreach ($ids as $id) {
          $entity = $entity_type_manager->getStorage($entity_type)->load($id);

          assert($entity instanceof TranslatableInterface);
          foreach ($entity->getTranslationLanguages() as $language) {
            try {
              _helfi_platform_config_process_links(
                $entity->getTranslation($language->getId()),
                $name,
                $count
              );
            }
            catch (\Exception $e) {
              \Drupal::logger('helfi_platform_config')
                ->error($e->getMessage());
            }
          }
        }
      }
    }
  }
  \Drupal::logger('helfi_platform_config')
    ->notice(sprintf('Converted %s Outlook safelinks to direct URLs.', $count));
}

/**
 * Convert Outlooks safelinks to direct URLs.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity translation to process.
 * @param string $field_name
 *   The field name.
 * @param int $count
 *   The number of links fixed.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _helfi_platform_config_process_links(ContentEntityInterface $entity, string $field_name, int &$count = 0) : void {
  if (!$value = $entity->get($field_name)->value) {
    return;
  }

  $hasChanges = FALSE;
  $dom = Html::load($value);
  /** @var \DOMElement $node */
  foreach ($dom->getElementsByTagName('a') as $node) {
    // Nothing to do if link has no href.
    if (!$href = $node->getAttribute('href')) {
      continue;
    }

    // Skip non-safelinked links.
    if (!str_contains($href, 'safelinks.protection.outlook.com')) {
      continue;
    }

    // Convert the URL.
    if (preg_match('/\?url=([^&]*)/', $href, $matches)) {
      $newHref = urldecode($matches[1]);
      $newHref = trim($newHref);

      // Bail if the URL is not valid.
      if (!UrlHelper::isValid($newHref)) {
        continue;
      }

      $hasChanges = TRUE;
      $count++;
      $node->setAttribute('href', $newHref);
    }
  }

  if ($hasChanges) {
    $entity->get($field_name)->value = Html::serialize($dom);
    $entity->save();
  }
}
