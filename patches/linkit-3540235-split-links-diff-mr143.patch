diff --git a/js/build/linkit.js b/js/build/linkit.js
index c0b0815215072cac6a60269c4957e698d0002629..b1cfb4fc93d0ba16797852754984ca51edcd9e9b 100644
--- a/js/build/linkit.js
+++ b/js/build/linkit.js
@@ -1 +1 @@
-!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CKEditor5=e():(t.CKEditor5=t.CKEditor5||{},t.CKEditor5.linkit=e())}(self,()=>(()=>{var t={"ckeditor5/src/core.js":(t,e,i)=>{t.exports=i("dll-reference CKEditor5.dll")("./src/core.js")},"ckeditor5/src/typing.js":(t,e,i)=>{t.exports=i("dll-reference CKEditor5.dll")("./src/typing.js")},"dll-reference CKEditor5.dll":t=>{"use strict";t.exports=CKEditor5.dll}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};return(()=>{"use strict";i.d(n,{default:()=>u});var t=i("ckeditor5/src/core.js"),e=i("ckeditor5/src/typing.js");class s extends t.Plugin{init(){this.attrs=["linkDataEntityType","linkDataEntityUuid","linkDataEntitySubstitution"],this.attrsView=["data-entity-type","data-entity-uuid","data-entity-substitution"],this._allowAndConvertExtraAttributes(),this._removeExtraAttributesOnUnlinkCommandExecute(),this._refreshExtraAttributeValues(),this._addExtraAttributesOnLinkCommandExecute()}_allowAndConvertExtraAttributes(){const t=this.editor;t.model.schema.extend("$text",{allowAttributes:this.attrs}),this.attrs.forEach((e,i)=>{t.conversion.for("downcast").attributeToElement({model:e,view:(t,{writer:e})=>{const n=e.createAttributeElement("a",{[this.attrsView[i]]:t},{priority:5});return e.setCustomProperty("link",!0,n),n}}),t.conversion.for("upcast").elementToAttribute({view:{name:"a",attributes:{[this.attrsView[i]]:!0}},model:{key:e,value:t=>t.getAttribute(this.attrsView[i])}})})}_addExtraAttributesOnLinkCommandExecute(){const t=this.editor,e=t.commands.get("link");let i=!1;e.on("execute",(e,n)=>{if(i)return void(i=!1);e.stop(),i=!0;let s=[];n&&n[1]&&!n[1].linkit_attributes?(this.attrs.forEach(t=>{s[t]=e.source[t]}),n[1].linkit_attributes=s):s=n[1].linkit_attributes,n[1].linkit_attributes=s;const o=s,r=this.editor.model,a=r.document.selection;r.change(e=>{t.execute("link",...n);const i=a.getFirstPosition();this.attrs.forEach(t=>{if(a.isCollapsed){const n=i.textNode||i.nodeBefore;o[t]?e.setAttribute(t,o[t],e.createRangeOn(n)):e.removeAttribute(t,e.createRangeOn(n)),e.removeSelectionAttribute(t)}else{const i=r.schema.getValidRanges(a.getRanges(),t);for(const n of i)o[t]?e.setAttribute(t,o[t],n):e.removeAttribute(t,n)}})})},{priority:"high"})}_removeExtraAttributesOnUnlinkCommandExecute(){const t=this.editor,i=t.commands.get("unlink"),n=this.editor.model,s=n.document.selection;let o=!1;i.on("execute",i=>{o||(i.stop(),n.change(()=>{o=!0,t.execute("unlink"),o=!1,n.change(t=>{let i;this.attrs.forEach(o=>{i=s.isCollapsed?[(0,e.findAttributeRange)(s.getFirstPosition(),o,s.getAttribute(o),n)]:n.schema.getValidRanges(s.getRanges(),o);for(const e of i)t.removeAttribute(o,e)})})}))},{priority:"high"})}_refreshExtraAttributeValues(){const t=this.editor,e=this.attrs,i=t.commands.get("link"),n=this.editor.model,s=n.document.selection;e.forEach(t=>{i.set(t,null)}),n.document.on("change",()=>{e.forEach(t=>{i[t]=s.getAttribute(t)})})}static get pluginName(){return"LinkitEditing"}}const o=jQuery;function r(t,e){var i=o("<li>").addClass("linkit-result-line"),n=o("<div>").addClass("linkit-result-line-wrapper");return n.addClass(e.status),n.append(o("<span>").html(e.label).addClass("linkit-result-line--title")),e.hasOwnProperty("description")&&n.append(o("<span>").html(e.description).addClass("linkit-result-line--description")),i.append(n).appendTo(t)}function a(t,e){var i=this.element.autocomplete("instance"),n={};e.forEach(function(t){const e=t.hasOwnProperty("group")?t.group:"";n.hasOwnProperty(e)||(n[e]=[]),n[e].push(t)}),o.each(n,function(e,n){e.length&&t.append('<li class="linkit-result-line--group ui-menu-divider">'+e+"</li>"),o.each(n,function(e,n){i._renderItemData(t,n)})})}class l extends t.Plugin{static get requires(){return[s]}init(){this._state={};const t=this.editor;t.config.get("linkit");t.plugins.get("LinkUI")._createViews(),this._enableLinkAutocomplete(),this._handleExtraFormFieldSubmit(),this._handleDataLoadingIntoExtraFormField()}_enableLinkAutocomplete(){const t=this.editor,e=t.config.get("linkit"),i=t.plugins.get("LinkUI").formView,n=i.urlInputView.fieldView.element;let s=!1;i.extendTemplate({attributes:{class:["ck-vertical-form","ck-link-form_layout-vertical"]}}),t.plugins.get("ContextualBalloon").on("set:visibleView",(t,l,u,c)=>{if(u!==i||s)return;let d;!function(t,e){const{autocompleteUrl:i,selectHandler:n,closeHandler:s,openHandler:l}=e,u={cache:{},ajax:{dataType:"json",jsonp:!1}},c={appendTo:t.closest(".ck-labeled-field-view"),source:function(t,e){const{cache:n}=u;var s=t.term;n.hasOwnProperty(s)?e(n[s]):o.ajax(i,{success:function(t){n[s]=t.suggestions,e(t.suggestions)},data:{q:s},...u.ajax})},select:n,focus:()=>!1,search:()=>!c.isComposing,close:s,open:l,minLength:1,isComposing:!1},d=o(t).autocomplete(c),p=d.data("ui-autocomplete");p.widget().menu("option","items","> :not(.linkit-result-line--group)"),p._renderMenu=a,p._renderItem=r,d.autocomplete("widget").addClass("linkit-ui-autocomplete ck-reset_all-excluded"),d.on("click",function(){d.autocomplete("search",d.val())}),d.on("compositionstart.autocomplete",function(){c.isComposing=!0}),d.on("compositionend.autocomplete",function(){c.isComposing=!1})}(n,{...e,selectHandler:(t,{item:e})=>{if(!e.path)throw"Missing path param."+JSON.stringify(e);if(e.entity_type_id||e.entity_uuid||e.substitution_id){if(!e.entity_type_id||!e.entity_uuid||!e.substitution_id)throw"Missing path param."+JSON.stringify(e);this.set("entityType",e.entity_type_id),this.set("entityUuid",e.entity_uuid),this.set("entitySubstitution",e.substitution_id)}else this.set("entityType",""),this.set("entityUuid",""),this.set("entitySubstitution","");return t.target.value=e.path??"",d=!0,!1},openHandler:t=>{d=!1},closeHandler:t=>{d=!1}}),s=!0,i.urlInputView.fieldView.template.attributes.class.push("form-linkit-autocomplete")})}_handleExtraFormFieldSubmit(){const t=this.editor,e=t.plugins.get("LinkUI").formView,i=t.commands.get("link");t.plugins.get("Linkit");this.listenTo(e,"submit",()=>{i.once("execute",(t,e)=>{this._isValidHttpUrl(e[0])?e[1].linkit_attributes={linkDataEntityType:"external"}:e[1].linkit_attributes={linkDataEntityType:this.entityType,linkDataEntityUuid:this.entityUuid,linkDataEntitySubstitution:this.entitySubstitution}},{priority:"highest"})},{priority:"high"})}_handleDataLoadingIntoExtraFormField(){const t=this.editor.commands.get("link");this.bind("entityType").to(t,"linkDataEntityType"),this.bind("entityUuid").to(t,"linkDataEntityUuid"),this.bind("entitySubstitution").to(t,"linkDataEntitySubstitution")}_isValidHttpUrl(t){let e;try{e=new URL(t)}catch(t){return!1}return"https:"===e.protocol}static get pluginName(){return"Linkit"}}const u={Linkit:l}})(),n=n.default})());
\ No newline at end of file
+!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CKEditor5=e():(t.CKEditor5=t.CKEditor5||{},t.CKEditor5.linkit=e())}(self,()=>(()=>{var t={"ckeditor5/src/core.js":(t,e,i)=>{t.exports=i("dll-reference CKEditor5.dll")("./src/core.js")},"ckeditor5/src/typing.js":(t,e,i)=>{t.exports=i("dll-reference CKEditor5.dll")("./src/typing.js")},"dll-reference CKEditor5.dll":t=>{"use strict";t.exports=CKEditor5.dll}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};return(()=>{"use strict";i.d(n,{default:()=>u});var t=i("ckeditor5/src/core.js"),e=i("ckeditor5/src/typing.js");class s extends t.Plugin{init(){this.attrs=["linkDataEntityType","linkDataEntityUuid","linkDataEntitySubstitution"],this.attrsView=["data-entity-type","data-entity-uuid","data-entity-substitution"],this._allowAndConvertExtraAttributes(),this._removeExtraAttributesOnUnlinkCommandExecute(),this._refreshExtraAttributeValues(),this._addExtraAttributesOnLinkCommandExecute()}_allowAndConvertExtraAttributes(){const t=this.editor;t.model.schema.extend("$text",{allowAttributes:this.attrs}),this.attrs.forEach((e,i)=>{t.conversion.for("downcast").attributeToElement({model:e,view:(t,{writer:e})=>{const n=e.createAttributeElement("a",{[this.attrsView[i]]:t},{priority:5});return e.setCustomProperty("link",!0,n),n}}),t.conversion.for("upcast").elementToAttribute({view:{name:"a",attributes:{[this.attrsView[i]]:!0}},model:{key:e,value:t=>t.getAttribute(this.attrsView[i])}})})}_addExtraAttributesOnLinkCommandExecute(){const t=this.editor,e=t.commands.get("link");let i=!1;e.on("execute",(e,n)=>{if(i)return void(i=!1);e.stop(),i=!0;let s=[];n&&n[1]&&!n[1].linkit_attributes?(this.attrs.forEach(t=>{s[t]=e.source[t]}),n[1].linkit_attributes=s):s=n[1].linkit_attributes,n[1].linkit_attributes=s;const o=s,r=this.editor.model,a=r.document.selection,l=n[3]||n[1].linkit_attributes.displayedText;r.change(e=>{const i=(t,i)=>{this.attrs.forEach(n=>{o[n]?e.setAttribute(n,o[n],t):e.removeAttribute(n,t),i&&e.removeSelectionAttribute(n)})};if(t.execute("link",...n),a.isCollapsed){const t=function(t){let e=t.getFirstPosition().getAncestors();for(const t of e){let e=t.getChildren();for(const t of e)if(t.hasAttribute("linkHref"))return t}return""}(a);let n=e.createRangeOn(t);n=((t,i)=>{const n=function(t){let e="";for(const i of t.getItems()){if(!i.is("$text")&&!i.is("$textProxy"))return;e+=i.data}return e}(t);return n?e.createRange(t.start,t.start.getShiftedBy(i.length)):t})(n,l),i(n,!0)}else{const t=r.schema.getValidRanges(a.getRanges(),"linkDataEntityType");for(const e of t)i(e)}})},{priority:"high"})}_removeExtraAttributesOnUnlinkCommandExecute(){const t=this.editor,i=t.commands.get("unlink"),n=this.editor.model,s=n.document.selection;let o=!1;i.on("execute",i=>{o||(i.stop(),n.change(()=>{o=!0,t.execute("unlink"),o=!1,n.change(t=>{let i;this.attrs.forEach(o=>{i=s.isCollapsed?[(0,e.findAttributeRange)(s.getFirstPosition(),o,s.getAttribute(o),n)]:n.schema.getValidRanges(s.getRanges(),o);for(const e of i)t.removeAttribute(o,e)})})}))},{priority:"high"})}_refreshExtraAttributeValues(){const t=this.editor,e=this.attrs,i=t.commands.get("link"),n=this.editor.model,s=n.document.selection;e.forEach(t=>{i.set(t,null)}),n.document.on("change",()=>{e.forEach(t=>{i[t]=s.getAttribute(t)})})}static get pluginName(){return"LinkitEditing"}}const o=jQuery;function r(t,e){var i=o("<li>").addClass("linkit-result-line"),n=o("<div>").addClass("linkit-result-line-wrapper");return n.addClass(e.status),n.append(o("<span>").html(e.label).addClass("linkit-result-line--title")),e.hasOwnProperty("description")&&n.append(o("<span>").html(e.description).addClass("linkit-result-line--description")),i.append(n).appendTo(t)}function a(t,e){var i=this.element.autocomplete("instance"),n={};e.forEach(function(t){const e=t.hasOwnProperty("group")?t.group:"";n.hasOwnProperty(e)||(n[e]=[]),n[e].push(t)}),o.each(n,function(e,n){e.length&&t.append('<li class="linkit-result-line--group ui-menu-divider">'+e+"</li>"),o.each(n,function(e,n){i._renderItemData(t,n)})})}class l extends t.Plugin{static get requires(){return[s]}init(){this._state={};const t=this.editor;t.config.get("linkit");t.plugins.get("LinkUI")._createViews(),this._enableLinkAutocomplete(),this._handleExtraFormFieldSubmit(),this._handleDataLoadingIntoExtraFormField()}_enableLinkAutocomplete(){const t=this.editor,e=t.config.get("linkit"),i=t.plugins.get("LinkUI").formView,n=i.urlInputView.fieldView.element;let s=!1;i.extendTemplate({attributes:{class:["ck-vertical-form","ck-link-form_layout-vertical"]}}),t.plugins.get("ContextualBalloon").on("set:visibleView",(t,l,u,d)=>{if(u!==i||s)return;let c;!function(t,e){const{autocompleteUrl:i,selectHandler:n,closeHandler:s,openHandler:l}=e,u={cache:{},ajax:{dataType:"json",jsonp:!1}},d={appendTo:t.closest(".ck-labeled-field-view"),source:function(t,e){const{cache:n}=u;var s=t.term;n.hasOwnProperty(s)?e(n[s]):o.ajax(i,{success:function(t){n[s]=t.suggestions,e(t.suggestions)},data:{q:s},...u.ajax})},select:n,focus:()=>!1,search:()=>!d.isComposing,close:s,open:l,minLength:1,isComposing:!1},c=o(t).autocomplete(d),p=c.data("ui-autocomplete");p.widget().menu("option","items","> :not(.linkit-result-line--group)"),p._renderMenu=a,p._renderItem=r,c.autocomplete("widget").addClass("linkit-ui-autocomplete ck-reset_all-excluded"),c.on("click",function(){c.autocomplete("search",c.val())}),c.on("compositionstart.autocomplete",function(){d.isComposing=!0}),c.on("compositionend.autocomplete",function(){d.isComposing=!1})}(n,{...e,selectHandler:(t,{item:e})=>{if(!e.path)throw"Missing path param."+JSON.stringify(e);if(e.entity_type_id||e.entity_uuid||e.substitution_id){if(!e.entity_type_id||!e.entity_uuid||!e.substitution_id)throw"Missing path param."+JSON.stringify(e);this.set("entityType",e.entity_type_id),this.set("entityUuid",e.entity_uuid),this.set("entitySubstitution",e.substitution_id)}else this.set("entityType",""),this.set("entityUuid",""),this.set("entitySubstitution","");return t.target.value=e.path??"",c=!0,!1},openHandler:t=>{c=!1},closeHandler:t=>{c=!1}}),s=!0,i.urlInputView.fieldView.template.attributes.class.push("form-linkit-autocomplete")})}_handleExtraFormFieldSubmit(){const t=this.editor,e=t.plugins.get("LinkUI").formView,i=t.commands.get("link");t.plugins.get("Linkit");this.listenTo(e,"submit",()=>{i.once("execute",(t,i)=>{let n="";void 0!==e.displayedTextInputView&&(n=e.displayedTextInputView.fieldView.element.value),this._isValidHttpUrl(i[0])?i[1].linkit_attributes={displayedText:n,linkDataEntityType:"external"}:i[1].linkit_attributes={linkDataEntityType:this.entityType,linkDataEntityUuid:this.entityUuid,linkDataEntitySubstitution:this.entitySubstitution,displayedText:n}},{priority:"highest"})},{priority:"high"})}_handleDataLoadingIntoExtraFormField(){const t=this.editor.commands.get("link");this.bind("entityType").to(t,"linkDataEntityType"),this.bind("entityUuid").to(t,"linkDataEntityUuid"),this.bind("entitySubstitution").to(t,"linkDataEntitySubstitution")}_isValidHttpUrl(t){let e;try{e=new URL(t)}catch(t){return!1}return"https:"===e.protocol}static get pluginName(){return"Linkit"}}const u={Linkit:l}})(),n=n.default})());
\ No newline at end of file
diff --git a/js/ckeditor5_plugins/linkit/src/index.js b/js/ckeditor5_plugins/linkit/src/index.js
index 3e65154c3c696b60a6739b353d070d204039c62b..42b0d2aaf1d7a687b8531381a11d95a6fac054b4 100644
--- a/js/ckeditor5_plugins/linkit/src/index.js
+++ b/js/ckeditor5_plugins/linkit/src/index.js
@@ -102,11 +102,17 @@ class Linkit extends Plugin {
       // Stop the execution of the link command caused by closing the form.
       // Inject the extra attribute value.
       linkCommand.once('execute', (evt, args) => {
-
+        // CKEditor v45 includes a 'displayed text' input value. If present,
+        // send this information along so we can properly update the selection.
+        let displayedText = '';
+        if (typeof linkFormView.displayedTextInputView != 'undefined') {
+          displayedText = linkFormView.displayedTextInputView.fieldView.element.value;
+        }
         // Clear out linkit attributes for external URLs but leave attributes
         // to prevent issues (see #3535098).
         if (this._isValidHttpUrl(args[0])) {
           args[1]['linkit_attributes'] = {
+            'displayedText': displayedText,
             'linkDataEntityType': 'external',
           }
         }
@@ -116,6 +122,7 @@ class Linkit extends Plugin {
             'linkDataEntityType': this.entityType,
             'linkDataEntityUuid': this.entityUuid,
             'linkDataEntitySubstitution': this.entitySubstitution,
+            'displayedText': displayedText,
           }
         }
         // - The highest priority listener here
diff --git a/js/ckeditor5_plugins/linkit/src/linkitediting.js b/js/ckeditor5_plugins/linkit/src/linkitediting.js
index c604d1c845e495499e31c4ab6179437dcaa6ee2c..620456f49ae24546b0085d5fb0d0e67b9793fba3 100644
--- a/js/ckeditor5_plugins/linkit/src/linkitediting.js
+++ b/js/ckeditor5_plugins/linkit/src/linkitediting.js
@@ -1,5 +1,6 @@
 import { Plugin } from 'ckeditor5/src/core';
 import { findAttributeRange } from 'ckeditor5/src/typing';
+import { getClosestSelectedLinkElement, extractTextFromLinkRange } from './utils.js';

 export default class LinkitEditing extends Plugin {
   init() {
@@ -87,36 +88,46 @@ export default class LinkitEditing extends Plugin {
       const extraAttributeValues = linkitAttributes;
       const model = this.editor.model;
       const selection = model.document.selection;
+      const displayedText = args[3] || args[1]['linkit_attributes']['displayedText'];

       // Wrapping the original command execution in a model.change() block to
       // make sure there's a single undo step when the extra attribute is added.
       model.change((writer) => {
-        editor.execute('link', ...args);
-        const firstPosition = selection.getFirstPosition();
-
-        this.attrs.forEach((attribute) => {
-          if (selection.isCollapsed) {
-            const node = firstPosition.textNode || firstPosition.nodeBefore;

+        const updateAttributes = (range, removeSelection) => {
+          this.attrs.forEach((attribute) => {
             if (extraAttributeValues[attribute]) {
-              writer.setAttribute(attribute, extraAttributeValues[attribute], writer.createRangeOn(node));
+              writer.setAttribute(attribute, extraAttributeValues[attribute], range);
             } else {
-              writer.removeAttribute(attribute, writer.createRangeOn(node));
+              writer.removeAttribute(attribute, range);
+            }
+            if (removeSelection) {
+              writer.removeSelectionAttribute(attribute);
             }
+          });
+        };

-            writer.removeSelectionAttribute(attribute);
-          } else {
-            const ranges = model.schema.getValidRanges(selection.getRanges(), attribute);
+        const updateLinkTextIfNeeded = (range, displayedText) => {
+          const linkText = extractTextFromLinkRange(range);
+          if (!linkText) {
+            return range;
+          }
+          let newRange = writer.createRange(range.start, range.start.getShiftedBy(displayedText.length));
+          return newRange;
+        };

-            for (const range of ranges) {
-              if (extraAttributeValues[attribute]) {
-                writer.setAttribute(attribute, extraAttributeValues[attribute], range);
-              } else {
-                writer.removeAttribute(attribute, range);
-              }
-            }
+        editor.execute('link', ...args);
+        if (selection.isCollapsed) {
+          const link = getClosestSelectedLinkElement(selection);
+          let range = writer.createRangeOn(link);
+          range = updateLinkTextIfNeeded(range, displayedText);
+          updateAttributes(range, true);
+        } else {
+          const ranges = model.schema.getValidRanges(selection.getRanges(), 'linkDataEntityType');
+          for (const range of ranges) {
+            updateAttributes(range);
           }
-        });
+        }
       });
     }, { priority: 'high' } );
   }
diff --git a/js/ckeditor5_plugins/linkit/src/utils.js b/js/ckeditor5_plugins/linkit/src/utils.js
new file mode 100644
index 0000000000000000000000000000000000000000..71a638676b9fcd02a0128b4cca3ca84b1139ac33
--- /dev/null
+++ b/js/ckeditor5_plugins/linkit/src/utils.js
@@ -0,0 +1,32 @@
+/**
+* Returns a link model element if one is selected or is among the selection's ancestors.
+*/
+export function getClosestSelectedLinkElement(selection) {
+  let ancestors = selection.getFirstPosition().getAncestors();
+  for (const ancestor of ancestors) {
+    let children = ancestor.getChildren();
+    for (const child of children) {
+      if (child.hasAttribute('linkHref')) {
+        return child;
+      }
+    }
+  }
+  return '';
+}
+
+/**
+ * Returns a text of a link range.
+ *
+ * If the returned value is `undefined`, the range contains elements other than text nodes.
+ */
+export function extractTextFromLinkRange(range) {
+  let text = '';
+  for (const item of range.getItems()) {
+    if (!item.is('$text') && !item.is('$textProxy')) {
+      return;
+    }
+    text += item.data;
+  }
+  return text;
+}
+
