diff --git a/core/core.services.yml b/core/core.services.yml
index 72ff560296..9bc32c499f 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -162,6 +162,11 @@ services:
     arguments: ['@current_user']
     tags:
       - { name: cache.context}
+  cache_context.user.admin_language:
+    class: Drupal\Core\Cache\Context\AccountAdminLanguageCacheContext
+    arguments: [ '@current_user' ]
+    tags:
+      - { name: cache.context }
   cache_context.user.permissions:
     class: Drupal\Core\Cache\Context\AccountPermissionsCacheContext
     arguments: ['@current_user', '@user_permissions_hash_generator']
diff --git a/core/lib/Drupal/Core/Cache/Context/AccountAdminLanguageCacheContext.php b/core/lib/Drupal/Core/Cache/Context/AccountAdminLanguageCacheContext.php
new file mode 100644
index 0000000000..c827e14738
--- /dev/null
+++ b/core/lib/Drupal/Core/Cache/Context/AccountAdminLanguageCacheContext.php
@@ -0,0 +1,53 @@
+<?php
+
+namespace Drupal\Core\Cache\Context;
+
+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Session\AccountProxyInterface;
+
+/**
+ * Defines an AdminLanguageCacheContext service, for "admin language" caching.
+ *
+ * Cache context ID: 'user.admin_language'.
+ */
+class AccountAdminLanguageCacheContext implements CacheContextInterface {
+
+  /**
+   * The current user.
+   *
+   * @var \Drupal\Core\Session\AccountProxyInterface
+   */
+  protected AccountProxyInterface $currentUser;
+
+  /**
+   * Constructs a new AccountAdminLanguageCacheContext service.
+   *
+   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   *   The current user.
+   */
+  public function __construct(AccountProxyInterface $current_user) {
+    $this->currentUser = $current_user;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getLabel() {
+    return t("Account's administration language");
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getContext() {
+    return $this->currentUser->getPreferredAdminLangcode();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getCacheableMetadata() {
+    return new CacheableMetadata();
+  }
+
+}
diff --git a/core/misc/cspell/dictionary.txt b/core/misc/cspell/dictionary.txt
index 8fcbd4fe32..e867034f7a 100644
--- a/core/misc/cspell/dictionary.txt
+++ b/core/misc/cspell/dictionary.txt
@@ -287,6 +287,8 @@ endtrans
 enim
 enoki
 entit
+entitynodedelete
+entitynodeedit
 entitytype
 entityviewedit
 errmode
diff --git a/core/modules/block/tests/src/Functional/Views/DisplayBlockTest.php b/core/modules/block/tests/src/Functional/Views/DisplayBlockTest.php
index 043474f072..40bb2304b3 100644
--- a/core/modules/block/tests/src/Functional/Views/DisplayBlockTest.php
+++ b/core/modules/block/tests/src/Functional/Views/DisplayBlockTest.php
@@ -387,9 +387,9 @@ public function testBlockContextualLinks() {
     $cached_block = $this->drupalPlaceBlock('views_block:test_view_block-block_1');
     $this->drupalGet('test-page');
 
-    $id = 'block:block=' . $block->id() . ':langcode=en|entity.view.edit_form:view=test_view_block:location=block&name=test_view_block&display_id=block_1&langcode=en';
+    $id = 'block:block=' . $block->id() . ':langcode=en&admin_langcode=en|entity.view.edit_form:view=test_view_block:location=block&name=test_view_block&display_id=block_1&langcode=en&admin_langcode=en';
     $id_token = Crypt::hmacBase64($id, Settings::getHashSalt() . $this->container->get('private_key')->get());
-    $cached_id = 'block:block=' . $cached_block->id() . ':langcode=en|entity.view.edit_form:view=test_view_block:location=block&name=test_view_block&display_id=block_1&langcode=en';
+    $cached_id = 'block:block=' . $cached_block->id() . ':langcode=en&admin_langcode=en|entity.view.edit_form:view=test_view_block:location=block&name=test_view_block&display_id=block_1&langcode=en&admin_langcode=en';
     $cached_id_token = Crypt::hmacBase64($cached_id, Settings::getHashSalt() . $this->container->get('private_key')->get());
     // @see \Drupal\contextual\Tests\ContextualDynamicContextTest:assertContextualLinkPlaceHolder()
     // Check existence of the contextual link placeholders.
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentContextualLinksTest.php b/core/modules/block_content/tests/src/Functional/BlockContentContextualLinksTest.php
index 16e147d99c..c2ce954c19 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentContextualLinksTest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentContextualLinksTest.php
@@ -36,7 +36,7 @@ public function testBlockContentContextualLinks() {
     $this->drupalLogin($user);
 
     $this->drupalGet('<front>');
-    $this->assertSession()->elementAttributeContains('css', 'div[data-contextual-id]', 'data-contextual-id', 'block:block=' . $block->id() . ':langcode=en|block_content:block_content=' . $block_content->id() . ':');
+    $this->assertSession()->elementAttributeContains('css', 'div[data-contextual-id]', 'data-contextual-id', 'block:block=' . $block->id() . ':langcode=en&admin_langcode=en|block_content:block_content=' . $block_content->id() . ':');
   }
 
 }
diff --git a/core/modules/contextual/contextual.module b/core/modules/contextual/contextual.module
index 96ab68dd1b..3276e354fe 100644
--- a/core/modules/contextual/contextual.module
+++ b/core/modules/contextual/contextual.module
@@ -174,13 +174,18 @@ function contextual_contextual_links_view_alter(&$element, $items) {
 function _contextual_links_to_id($contextual_links) {
   $ids = [];
   $langcode = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_URL)->getId();
+  $admin_langcode = \Drupal::currentUser()->getPreferredAdminLangcode();
   foreach ($contextual_links as $group => $args) {
     $route_parameters = UrlHelper::buildQuery($args['route_parameters']);
     $args += ['metadata' => []];
     // Add the current URL language to metadata so a different ID will be
     // computed when URLs vary by language. This allows to store different
-    // language-aware contextual links on the client side.
-    $args['metadata'] += ['langcode' => $langcode];
+    // language-aware contextual links on the client side. Add the admin
+    // language as the link text can vary by that.
+    $args['metadata'] += [
+      'langcode' => $langcode,
+      'admin_langcode' => $admin_langcode,
+    ];
     $metadata = UrlHelper::buildQuery($args['metadata']);
     $ids[] = "{$group}:{$route_parameters}:{$metadata}";
   }
diff --git a/core/modules/contextual/tests/src/Functional/ContextualDynamicContextTest.php b/core/modules/contextual/tests/src/Functional/ContextualDynamicContextTest.php
index b1f048d715..04d8215b41 100644
--- a/core/modules/contextual/tests/src/Functional/ContextualDynamicContextTest.php
+++ b/core/modules/contextual/tests/src/Functional/ContextualDynamicContextTest.php
@@ -100,10 +100,10 @@ public function testDifferentPermissions() {
     // Now, on the front page, all article nodes should have contextual links
     // placeholders, as should the view that contains them.
     $ids = [
-      'node:node=' . $node1->id() . ':changed=' . $node1->getChangedTime() . '&langcode=en',
-      'node:node=' . $node2->id() . ':changed=' . $node2->getChangedTime() . '&langcode=en',
-      'node:node=' . $node3->id() . ':changed=' . $node3->getChangedTime() . '&langcode=en',
-      'entity.view.edit_form:view=frontpage:location=page&name=frontpage&display_id=page_1&langcode=en',
+      'node:node=' . $node1->id() . ':changed=' . $node1->getChangedTime() . '&langcode=en&admin_langcode=en',
+      'node:node=' . $node2->id() . ':changed=' . $node2->getChangedTime() . '&langcode=en&admin_langcode=en',
+      'node:node=' . $node3->id() . ':changed=' . $node3->getChangedTime() . '&langcode=en&admin_langcode=en',
+      'entity.view.edit_form:view=frontpage:location=page&name=frontpage&display_id=page_1&langcode=en&admin_langcode=en',
     ];
 
     // Editor user: can access contextual links and can edit articles.
@@ -124,7 +124,7 @@ public function testDifferentPermissions() {
 
     // Verify that link language is properly handled.
     $node3->addTranslation('it')->set('title', $this->randomString())->save();
-    $id = 'node:node=' . $node3->id() . ':changed=' . $node3->getChangedTime() . '&langcode=it';
+    $id = 'node:node=' . $node3->id() . ':changed=' . $node3->getChangedTime() . '&langcode=it&admin_langcode=en';
     $this->drupalGet('node', ['language' => ConfigurableLanguage::createFromLangcode('it')]);
     $this->assertContextualLinkPlaceHolder($id);
 
@@ -178,7 +178,7 @@ public function testTokenProtection() {
 
     // Now, on the front page, all article nodes should have contextual links
     // placeholders, as should the view that contains them.
-    $id = 'node:node=' . $node1->id() . ':changed=' . $node1->getChangedTime() . '&langcode=en';
+    $id = 'node:node=' . $node1->id() . ':changed=' . $node1->getChangedTime() . '&langcode=en&admin_langcode=en';
 
     // Editor user: can access contextual links and can edit articles.
     $this->drupalGet('node');
diff --git a/core/modules/contextual/tests/src/FunctionalJavascript/ContextualTranslationTest.php b/core/modules/contextual/tests/src/FunctionalJavascript/ContextualTranslationTest.php
new file mode 100644
index 0000000000..5ad1a1f096
--- /dev/null
+++ b/core/modules/contextual/tests/src/FunctionalJavascript/ContextualTranslationTest.php
@@ -0,0 +1,117 @@
+<?php
+
+namespace Drupal\Tests\contextual\FunctionalJavascript;
+
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\language\Entity\ConfigurableLanguage;
+
+/**
+ * Tests contextual link translation.
+ *
+ * @group contextual
+ */
+class ContextualTranslationTest extends WebDriverTestBase {
+
+  use ContextualLinkClickTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'olivero';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'block',
+    'contextual',
+    'language',
+    'locale',
+    'node',
+    'system',
+  ];
+
+  /**
+   * The admin user.
+   *
+   * @var \Drupal\user\Entity\User
+   */
+  protected $adminUser;
+
+  /**
+   * The language manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
+   * The locale storage.
+   *
+   * @var \Drupal\locale\StringStorageInterface
+   */
+  protected $localeStorage;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $this->languageManager = $this->container->get('language_manager');
+    $this->localeStorage = $this->container->get('locale.storage');
+
+    $this->drupalPlaceBlock('local_actions_block');
+    $this->drupalPlaceBlock('local_tasks_block');
+
+    $this->adminUser = $this->createUser([], NULL, TRUE);
+    $this->drupalLogin($this->adminUser);
+
+    $this->drupalCreateContentType(['type' => 'page', 'name' => 'Basic page']);
+
+    ConfigurableLanguage::createFromLangcode('nl')->save();
+    $this->rebuildContainer();
+
+    // Enable the 'Account administration pages' language detection.
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm(['language_interface[enabled][language-user-admin]' => TRUE], 'Save settings');
+  }
+
+  /**
+   * Tests that contextual links are shown in the preferred admin language.
+   */
+  public function testContextualLinksPreferredAdminLanguage() {
+    // Create a node and visit the translated page so new translation labels
+    // are added.
+    $nl_language = $this->languageManager->getLanguage('nl');
+    $node1 = $this->drupalCreateNode(['type' => 'page']);
+    $this->drupalGet($node1->toUrl('canonical', ['language' => $nl_language]));
+
+    // Add a translation for the 'Edit' string.
+    $edit_translation = $this->randomMachineName();
+    $this->drupalGet('admin/config/regional/translate');
+    $this->submitForm(['string' => 'Edit', 'langcode' => 'nl'], 'Filter');
+    $textarea = current($this->xpath('//textarea'));
+    $lid = (string) $textarea->getAttribute('name');
+    $this->submitForm([$lid => $edit_translation], 'Save translations');
+
+    // Configure a preferred admin language.
+    $this->adminUser->set('preferred_admin_langcode', 'nl');
+    $this->adminUser->save();
+
+    // The edit link text should be using the translated string.
+    $this->drupalGet($node1->toUrl('canonical'));
+    $this->clickContextualLink('article.node', $edit_translation);
+    $this->assertSession()->addressEquals($node1->toUrl('edit-form'));
+
+    // Change the preferred admin language.
+    $this->adminUser->set('preferred_admin_langcode', 'en');
+    $this->adminUser->save();
+
+    // The edit link text should be using the english string.
+    $this->drupalGet($node1->toUrl('canonical'));
+    $this->clickContextualLink('article.node', 'Edit');
+    $this->assertSession()->addressEquals($node1->toUrl('edit-form'));
+  }
+
+}
diff --git a/core/modules/contextual/tests/src/Kernel/ContextualUnitTest.php b/core/modules/contextual/tests/src/Kernel/ContextualUnitTest.php
index dc46bef32a..6050622ff4 100644
--- a/core/modules/contextual/tests/src/Kernel/ContextualUnitTest.php
+++ b/core/modules/contextual/tests/src/Kernel/ContextualUnitTest.php
@@ -33,10 +33,10 @@ public function contextualLinksDataProvider(): array {
           'route_parameters' => [
             'node' => '14031991',
           ],
-          'metadata' => ['langcode' => 'en'],
+          'metadata' => ['langcode' => 'en', 'admin_langcode' => 'en'],
         ],
       ],
-      'node:node=14031991:langcode=en',
+      'node:node=14031991:langcode=en&admin_langcode=en',
     ];
 
     $tests['one group, multiple dynamic path arguments, no metadata'] = [
@@ -47,10 +47,10 @@ public function contextualLinksDataProvider(): array {
             'key' => 'baz',
             1 => 'qux',
           ],
-          'metadata' => ['langcode' => 'en'],
+          'metadata' => ['langcode' => 'en', 'admin_langcode' => 'en'],
         ],
       ],
-      'foo:0=bar&key=baz&1=qux:langcode=en',
+      'foo:0=bar&key=baz&1=qux:langcode=en&admin_langcode=en',
     ];
 
     $tests['one group, one dynamic path argument, metadata'] = [
@@ -63,10 +63,11 @@ public function contextualLinksDataProvider(): array {
             'location' => 'page',
             'display' => 'page_1',
             'langcode' => 'en',
+            'admin_langcode' => 'en',
           ],
         ],
       ],
-      'views_ui_edit:view=frontpage:location=page&display=page_1&langcode=en',
+      'views_ui_edit:view=frontpage:location=page&display=page_1&langcode=en&admin_langcode=en',
     ];
 
     $tests['multiple groups, multiple dynamic path arguments'] = [
@@ -75,7 +76,7 @@ public function contextualLinksDataProvider(): array {
           'route_parameters' => [
             'node' => '14031991',
           ],
-          'metadata' => ['langcode' => 'en'],
+          'metadata' => ['langcode' => 'en', 'admin_langcode' => 'en'],
         ],
         'foo' => [
           'route_parameters' => [
@@ -83,14 +84,14 @@ public function contextualLinksDataProvider(): array {
             'key' => 'baz',
             1 => 'qux',
           ],
-          'metadata' => ['langcode' => 'en'],
+          'metadata' => ['langcode' => 'en', 'admin_langcode' => 'en'],
         ],
         'edge' => [
           'route_parameters' => ['20011988'],
-          'metadata' => ['langcode' => 'en'],
+          'metadata' => ['langcode' => 'en', 'admin_langcode' => 'en'],
         ],
       ],
-      'node:node=14031991:langcode=en|foo:0=bar&key=baz&1=qux:langcode=en|edge:0=20011988:langcode=en',
+      'node:node=14031991:langcode=en|foo:0=bar&key=baz&1=qux:langcode=en|edge:0=20011988:langcode=en&admin_langcode=en',
     ];
 
     return $tests;
diff --git a/core/modules/language/language.module b/core/modules/language/language.module
index 88a25d030d..b60c0163cc 100644
--- a/core/modules/language/language.module
+++ b/core/modules/language/language.module
@@ -16,6 +16,7 @@
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\language\AdminLanguageRender;
 use Drupal\language\Entity\ContentLanguageSettings;
 use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUI;
 use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrl;
@@ -138,6 +139,14 @@ function language_element_info_alter(&$type) {
     $type['language_select']['#languages'] = LanguageInterface::STATE_CONFIGURABLE;
     $type['language_select']['#multiple'] = FALSE;
   }
+
+  // Support rendering the links in the user's preferred admin language.
+  if (isset($type['toolbar'])) {
+    $type['toolbar'] = AdminLanguageRender::applyTo($type['toolbar']);
+  }
+  if (isset($type['contextual_links'])) {
+    $type['contextual_links'] = AdminLanguageRender::applyTo($type['contextual_links']);
+  }
 }
 
 /**
diff --git a/core/modules/language/language.services.yml b/core/modules/language/language.services.yml
index ffc267f3f5..51fc3fd65d 100644
--- a/core/modules/language/language.services.yml
+++ b/core/modules/language/language.services.yml
@@ -27,3 +27,6 @@ services:
     tags:
       - { name: paramconverter }
     lazy: true
+  language.admin_language_render:
+    class: Drupal\language\AdminLanguageRender
+    arguments: ['@language_manager', '@string_translation', '@current_user']
diff --git a/core/modules/language/src/AdminLanguageRender.php b/core/modules/language/src/AdminLanguageRender.php
new file mode 100644
index 0000000000..16d1587479
--- /dev/null
+++ b/core/modules/language/src/AdminLanguageRender.php
@@ -0,0 +1,131 @@
+<?php
+
+namespace Drupal\language;
+
+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Security\TrustedCallbackInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslationManager;
+
+class AdminLanguageRender implements TrustedCallbackInterface {
+
+  /**
+   * The language manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
+   * The string translation service.
+   *
+   * @var \Drupal\Core\StringTranslation\TranslationManager
+   */
+  protected $translationManager;
+
+  /**
+   * The current user.
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected $currentUser;
+
+  /**
+   * Constructs an AdminLanguageRender object.
+   *
+   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   *   The language manager.
+   * @param \Drupal\Core\StringTranslation\TranslationManager $translationManager
+   *   The translation manager.
+   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   *   The current user.
+   */
+  public function __construct(LanguageManagerInterface $languageManager, TranslationManager $translationManager, AccountInterface $currentUser) {
+    $this->languageManager = $languageManager;
+    $this->translationManager = $translationManager;
+    $this->currentUser = $currentUser;
+  }
+
+  /**
+   * Adds the render callbacks to a render element.
+   *
+   * @param array $type
+   *   A render element that will be altered to switch to the admin language
+   *   while rendering.
+   *
+   * @return array
+   *   A renderable array.
+   */
+  public static function applyTo(array $type): array {
+    if (!isset($type['#pre_render'])) {
+      $type['#pre_render'] = [];
+    }
+    if (!isset($type['#post_render'])) {
+      $type['#post_render'] = [];
+    }
+    // Switch to the admin language as early as possible and then switch back as
+    // late as possible.
+    array_unshift($type['#pre_render'], 'language.admin_language_render:switchToUserAdminLanguage');
+    $type['#post_render'][] = 'language.admin_language_render:restoreLanguage';
+    return $type;
+  }
+
+  /**
+   * Sets admin language.
+   *
+   * @param array $element
+   *   A renderable array.
+   *
+   * @return array
+   *   A renderable array.
+   */
+  public function switchToUserAdminLanguage(array $element) {
+    $userAdminLangcode = $this->currentUser->getPreferredAdminLangcode(FALSE);
+
+    if ($userAdminLangcode && ($this->currentUser->hasPermission('access administration pages') || $this->currentUser->hasPermission('view the administration theme'))) {
+      $element['#original_langcode'] = $this->languageManager->getCurrentLanguage()->getId();
+      $this->languageManager->setCurrentLanguage($this->languageManager->getLanguage($userAdminLangcode));
+      $this->translationManager->setDefaultLangcode($userAdminLangcode);
+      $this->languageManager->setConfigOverrideLanguage($this->languageManager->getLanguage($userAdminLangcode));
+    }
+
+    // Add the correct cache contexts in.
+    $metadata = CacheableMetadata::createFromRenderArray($element);
+    $metadata->addCacheContexts(['user.admin_language', 'user.permissions']);
+    $metadata->applyTo($element);
+
+    return $element;
+  }
+
+  /**
+   * Restore original language.
+   *
+   * @param \Drupal\Core\Render\Markup $content
+   *   Rendered markup.
+   * @param array $element
+   *   A renderable array.
+   *
+   * @return \Drupal\Core\Render\Markup
+   *   Rendered markup.
+   */
+  public function restoreLanguage($content, $element) {
+    if (isset($element['#original_langcode'])) {
+      $langcode = $element['#original_langcode'];
+      $language = $this->languageManager->getLanguage($langcode);
+      $this->languageManager->setCurrentLanguage($language);
+      $this->translationManager->setDefaultLangcode($langcode);
+      $this->languageManager->setConfigOverrideLanguage($language);
+    }
+
+    return $content;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function trustedCallbacks() {
+    return ['switchToUserAdminLanguage', 'restoreLanguage'];
+  }
+
+}
diff --git a/core/modules/language/src/ConfigurableLanguageManager.php b/core/modules/language/src/ConfigurableLanguageManager.php
index c4187aaf60..d78a8fc331 100644
--- a/core/modules/language/src/ConfigurableLanguageManager.php
+++ b/core/modules/language/src/ConfigurableLanguageManager.php
@@ -235,6 +235,25 @@ public function getCurrentLanguage($type = LanguageInterface::TYPE_INTERFACE) {
     return $this->negotiatedLanguages[$type];
   }
 
+  /**
+   * Sets current language.
+   *
+   * @param \Drupal\Core\Language\LanguageInterface $language
+   *   Language interface.
+   * @param string $type
+   *   Type interface.
+   */
+  public function setCurrentLanguage(LanguageInterface $language, $type = LanguageInterface::TYPE_INTERFACE) {
+    $this->negotiatedLanguages[$type] = $language;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setCurrentLanguage(LanguageInterface $language, ?string $type = LanguageInterface::TYPE_INTERFACE): void {
+    $this->negotiatedLanguages[$type] = $language;
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/core/modules/language/src/ConfigurableLanguageManagerInterface.php b/core/modules/language/src/ConfigurableLanguageManagerInterface.php
index 41a1681f3f..2b8984e6c6 100644
--- a/core/modules/language/src/ConfigurableLanguageManagerInterface.php
+++ b/core/modules/language/src/ConfigurableLanguageManagerInterface.php
@@ -103,4 +103,15 @@ public function getStandardLanguageListWithoutConfigured();
    */
   public function getNegotiatedLanguageMethod($type = LanguageInterface::TYPE_INTERFACE);
 
+  /**
+   * Sets the current language.
+   *
+   * @param \Drupal\Core\Language\LanguageInterface $language
+   *   The language to set.
+   * @param string|null $type
+   *   (optional) The language type; e.g., the interface or the content
+   *   language.
+   */
+  public function setCurrentLanguage(LanguageInterface $language, ?string $type = LanguageInterface::TYPE_INTERFACE): void;
+
 }
diff --git a/core/modules/toolbar/tests/src/Functional/ToolbarMenuTranslationTest.php b/core/modules/toolbar/tests/src/Functional/ToolbarMenuTranslationTest.php
index be99b93902..d7992fd199 100644
--- a/core/modules/toolbar/tests/src/Functional/ToolbarMenuTranslationTest.php
+++ b/core/modules/toolbar/tests/src/Functional/ToolbarMenuTranslationTest.php
@@ -60,9 +60,8 @@ public function testToolbarClasses() {
     $langcode = 'es';
 
     // Add Spanish.
-    $edit['predefined_langcode'] = $langcode;
     $this->drupalGet('admin/config/regional/language/add');
-    $this->submitForm($edit, 'Add language');
+    $this->submitForm(['predefined_langcode' => $langcode], 'Add language');
 
     // The menu item 'Structure' in the toolbar will be translated.
     $menu_item = 'Structure';
@@ -70,49 +69,108 @@ public function testToolbarClasses() {
     // Visit a page that has the string on it so it can be translated.
     $this->drupalGet($langcode . '/admin/structure');
 
-    // Search for the menu item.
+    // Check that the class is on the item before we translate it.
+    $this->assertSession()->elementsCount('xpath', '//a[contains(@class, "icon-system-admin-structure")]', 1);
+
+    // Translate the menu item.
+    $menu_item_translated = $this->randomMachineName();
+    $this->addLocalizedString($langcode, $menu_item, $menu_item_translated);
+
+    // Go to another page in the custom language and make sure the menu item
+    // was translated.
+    $this->drupalGet($langcode . '/admin/structure');
+    $this->assertSession()->pageTextContains($menu_item_translated);
+
+    // Toolbar icons are included based on the presence of a specific class on
+    // the menu item. Ensure that class also exists for a translated menu item.
+    $xpath = $this->xpath('//a[contains(@class, "icon-system-admin-structure")]');
+    $this->assertCount(1, $xpath, 'The menu item class is the same.');
+  }
+
+  /**
+   * Tests that the toolbar is shown in the preferred admin language.
+   */
+  public function testToolbarRenderedInPreferredAdminLanguage() {
+    // Enable the 'Account administration pages' language detection.
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm(['language_interface[enabled][language-user-admin]' => TRUE], 'Save settings');
+
+    $langcode = 'es';
+
+    // Add Spanish.
+    $this->drupalGet('admin/config/regional/language/add');
+    $this->submitForm(['predefined_langcode' => $langcode], 'Add language');
+
+    // The menu item 'Structure' and 'View profile' in the toolbar will be
+    // translated.
+    $menu_item_structure = 'Structure';
+    $menu_item_view_profile = 'View profile';
+
+    // Visit a page that has the string on it so it can be translated.
+    $this->drupalGet($langcode . '/admin/structure');
+    $menu_item_structure_translated = $this->randomMachineName();
+    $this->addLocalizedString($langcode, $menu_item_structure, $menu_item_structure_translated);
+
+    // Add a translation for a menu item added using user_toolbar().
+    $menu_item_view_profile_translated = $this->randomMachineName();
+    $this->addLocalizedString($langcode, $menu_item_view_profile, $menu_item_view_profile_translated);
+
+    // Go to another page in the custom language and make sure the menu item
+    // was translated.
+    $this->drupalGet($langcode . '/user');
+    $this->assertSession()->elementContains('css', '#toolbar-link-system-admin_structure', $menu_item_structure_translated);
+    $this->assertSession()->elementContains('css', '#toolbar-item-user-tray a[title="User account"]', $menu_item_view_profile_translated);
+
+    // Configure a preferred admin language.
+    $this->adminUser->set('preferred_admin_langcode', 'en');
+    $this->adminUser->save();
+
+    drupal_flush_all_caches();
+
+    // Go to another page in the custom language and make sure the menu item
+    // is shown in the preferred admin language.
+    $this->drupalGet($langcode . '/user');
+    $this->assertSession()->elementContains('css', '#toolbar-link-system-admin_structure', $menu_item_structure);
+    $this->assertSession()->elementContains('css', '#toolbar-item-user-tray a[title="User account"]', $menu_item_view_profile);
+  }
+
+  /**
+   * Add a localized string.
+   *
+   * @param string $langcode
+   *   The langcode.
+   * @param string $string
+   *   The string to translate.
+   * @param string $translation
+   *   The string translation.
+   */
+  protected function addLocalizedString(string $langcode, string $string, string $translation): void {
+    // Search for the label.
     $search = [
-      'string' => $menu_item,
+      'string' => $string,
       'langcode' => $langcode,
       'translation' => 'untranslated',
     ];
     $this->drupalGet('admin/config/regional/translate');
     $this->submitForm($search, 'Filter');
-    // Make sure will be able to translate the menu item.
+    // Make sure will be able to translate the label.
     $this->assertSession()->pageTextNotContains('No strings available.');
 
-    // Check that the class is on the item before we translate it.
-    $this->assertSession()->elementsCount('xpath', '//a[contains(@class, "icon-system-admin-structure")]', 1);
+    $textarea = current($this->xpath('//textarea'));
 
-    // Translate the menu item.
-    $menu_item_translated = $this->randomMachineName();
-    $textarea = $this->assertSession()->elementExists('xpath', '//textarea');
     $lid = (string) $textarea->getAttribute('name');
-    $edit = [
-      $lid => $menu_item_translated,
-    ];
-    $this->drupalGet('admin/config/regional/translate');
-    $this->submitForm($edit, 'Save translations');
+    $this->submitForm([$lid => $translation], 'Save translations');
 
     // Search for the translated menu item.
     $search = [
-      'string' => $menu_item,
+      'string' => $string,
       'langcode' => $langcode,
       'translation' => 'translated',
     ];
     $this->drupalGet('admin/config/regional/translate');
     $this->submitForm($search, 'Filter');
     // Make sure the menu item string was translated.
-    $this->assertSession()->pageTextContains($menu_item_translated);
-
-    // Go to another page in the custom language and make sure the menu item
-    // was translated.
-    $this->drupalGet($langcode . '/admin/structure');
-    $this->assertSession()->pageTextContains($menu_item_translated);
-
-    // Toolbar icons are included based on the presence of a specific class on
-    // the menu item. Ensure that class also exists for a translated menu item.
-    $this->assertSession()->elementsCount('xpath', '//a[contains(@class, "icon-system-admin-structure")]', 1);
+    $this->assertSession()->pageTextContains($translation);
   }
 
 }
diff --git a/core/modules/toolbar/toolbar.routing.yml b/core/modules/toolbar/toolbar.routing.yml
index 10e6cc3295..80d6d19ff2 100644
--- a/core/modules/toolbar/toolbar.routing.yml
+++ b/core/modules/toolbar/toolbar.routing.yml
@@ -4,3 +4,5 @@ toolbar.subtrees:
     _controller: '\Drupal\toolbar\Controller\ToolbarController::subtreesAjax'
   requirements:
     _custom_access: '\Drupal\toolbar\Controller\ToolbarController::checkSubTreeAccess'
+  options:
+    _admin_route: TRUE
diff --git a/core/modules/user/src/ToolbarLinkBuilder.php b/core/modules/user/src/ToolbarLinkBuilder.php
index 8d989b339e..21761a8403 100644
--- a/core/modules/user/src/ToolbarLinkBuilder.php
+++ b/core/modules/user/src/ToolbarLinkBuilder.php
@@ -2,10 +2,12 @@
 
 namespace Drupal\user;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
+use Drupal\language\AdminLanguageRender;
 
 /**
  * ToolbarLinkBuilder fills out the placeholders generated in user_toolbar().
@@ -14,21 +16,18 @@ class ToolbarLinkBuilder implements TrustedCallbackInterface {
 
   use StringTranslationTrait;
 
-  /**
-   * The current user.
-   *
-   * @var \Drupal\Core\Session\AccountProxyInterface
-   */
-  protected $account;
-
   /**
    * ToolbarHandler constructor.
    *
    * @param \Drupal\Core\Session\AccountProxyInterface $account
    *   The current user.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   *   The module handler.
    */
-  public function __construct(AccountProxyInterface $account) {
-    $this->account = $account;
+  public function __construct(
+    protected AccountProxyInterface $account,
+    protected ModuleHandlerInterface $moduleHandler
+  ) {
   }
 
   /**
@@ -69,6 +68,11 @@ public function renderToolbarLinks() {
       ],
     ];
 
+    // Support rendering the links in the user's preferred admin language.
+    if ($this->moduleHandler->moduleExists('language')) {
+      $build = AdminLanguageRender::applyTo($build);
+    }
+
     return $build;
   }
 
diff --git a/core/modules/user/user.services.yml b/core/modules/user/user.services.yml
index d2d2720bd1..3afc508061 100644
--- a/core/modules/user/user.services.yml
+++ b/core/modules/user/user.services.yml
@@ -62,7 +62,7 @@ services:
       - { name: 'context_provider' }
   user.toolbar_link_builder:
     class: Drupal\user\ToolbarLinkBuilder
-    arguments: ['@current_user']
+    arguments: ['@current_user', '@module_handler']
   Drupal\user\ToolbarLinkBuilder: '@user.toolbar_link_builder'
   user.flood_control:
     class: Drupal\user\UserFloodControl
diff --git a/core/modules/views_ui/tests/src/FunctionalJavascript/DisplayTest.php b/core/modules/views_ui/tests/src/FunctionalJavascript/DisplayTest.php
index 70fb850e6e..173c4a33ca 100644
--- a/core/modules/views_ui/tests/src/FunctionalJavascript/DisplayTest.php
+++ b/core/modules/views_ui/tests/src/FunctionalJavascript/DisplayTest.php
@@ -130,7 +130,7 @@ public function testPageContextualLinks() {
     $element = $this->getSession()->getPage()->find('css', $selector);
     $element->find('css', '.contextual button')->press();
 
-    $contextual_container_id = 'entity.view.edit_form:view=test_display:location=page&name=test_display&display_id=page_1&langcode=en';
+    $contextual_container_id = 'entity.view.edit_form:view=test_display:location=page&name=test_display&display_id=page_1&langcode=en&admin_langcode=en';
     $contextual_container = $page->find('css', '[data-contextual-id="' . $contextual_container_id . '"]');
     $this->assertNotEmpty($contextual_container);
 
