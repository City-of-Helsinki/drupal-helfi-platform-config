diff --git a/core/core.services.yml b/core/core.services.yml
index 72ff560296..e245aa5a95 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -773,7 +773,7 @@ services:
   Drupal\Core\Menu\MenuLinkManagerInterface: '@plugin.manager.menu.link'
   menu.link_tree:
     class: Drupal\Core\Menu\MenuLinkTree
-    arguments: ['@menu.tree_storage', '@plugin.manager.menu.link', '@router.route_provider', '@menu.active_trail', '@callable_resolver']
+    arguments: ['@menu.tree_storage', '@plugin.manager.menu.link', '@router.route_provider', '@menu.active_trail', '@callable_resolver', '@event_dispatcher']
   Drupal\Core\Menu\MenuLinkTreeInterface: '@menu.link_tree'
   menu.default_tree_manipulators:
     class: Drupal\Core\Menu\DefaultMenuLinkTreeManipulators
diff --git a/core/lib/Drupal/Core/Menu/MenuLinkBase.php b/core/lib/Drupal/Core/Menu/MenuLinkBase.php
index 7757f45159..6ef381f6e1 100644
--- a/core/lib/Drupal/Core/Menu/MenuLinkBase.php
+++ b/core/lib/Drupal/Core/Menu/MenuLinkBase.php
@@ -3,7 +3,7 @@
 namespace Drupal\Core\Menu;
 
 use Drupal\Component\Plugin\Exception\PluginException;
-use Drupal\Core\Cache\Cache;
+use Drupal\Core\Cache\RefinableCacheableDependencyTrait;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\Url;
 
@@ -12,6 +12,8 @@
  */
 abstract class MenuLinkBase extends PluginBase implements MenuLinkInterface {
 
+  use RefinableCacheableDependencyTrait;
+
   /**
    * The list of definition values where an override is allowed.
    *
@@ -209,25 +211,4 @@ public function deleteLink() {
     throw new PluginException("Menu link plugin with ID '{$this->getPluginId()}' does not support deletion");
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function getCacheMaxAge() {
-    return Cache::PERMANENT;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getCacheContexts() {
-    return [];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getCacheTags() {
-    return [];
-  }
-
 }
diff --git a/core/lib/Drupal/Core/Menu/MenuLinkInterface.php b/core/lib/Drupal/Core/Menu/MenuLinkInterface.php
index 0699aef361..4a420627fc 100644
--- a/core/lib/Drupal/Core/Menu/MenuLinkInterface.php
+++ b/core/lib/Drupal/Core/Menu/MenuLinkInterface.php
@@ -4,13 +4,13 @@
 
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
-use Drupal\Core\Cache\CacheableDependencyInterface;
+use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Url;
 
 /**
  * Defines an interface for classes providing a type of menu link.
  */
-interface MenuLinkInterface extends PluginInspectionInterface, DerivativeInspectionInterface, CacheableDependencyInterface {
+interface MenuLinkInterface extends PluginInspectionInterface, DerivativeInspectionInterface, RefinableCacheableDependencyInterface {
 
   /**
    * Returns the weight of the menu link.
diff --git a/core/lib/Drupal/Core/Menu/MenuLinkTree.php b/core/lib/Drupal/Core/Menu/MenuLinkTree.php
index 15d9c71050..a98626ba1b 100644
--- a/core/lib/Drupal/Core/Menu/MenuLinkTree.php
+++ b/core/lib/Drupal/Core/Menu/MenuLinkTree.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Core\Menu;
 
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -51,6 +52,13 @@ class MenuLinkTree implements MenuLinkTreeInterface {
    */
   protected CallableResolver $callableResolver;
 
+  /**
+   * The event dispatcher.
+   *
+   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   */
+  protected $eventDispatcher;
+
   /**
    * Constructs a \Drupal\Core\Menu\MenuLinkTree object.
    *
@@ -64,8 +72,10 @@ class MenuLinkTree implements MenuLinkTreeInterface {
    *   The active menu trail service.
    * @param \Drupal\Core\Utility\CallableResolver|\Drupal\Core\Controller\ControllerResolverInterface $callable_resolver
    *   The callable resolver.
+   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher|null $eventDispatcher
+   *   The event dispatcher.
    */
-  public function __construct(MenuTreeStorageInterface $tree_storage, MenuLinkManagerInterface $menu_link_manager, RouteProviderInterface $route_provider, MenuActiveTrailInterface $menu_active_trail, ControllerResolverInterface|CallableResolver $callable_resolver) {
+  public function __construct(MenuTreeStorageInterface $tree_storage, MenuLinkManagerInterface $menu_link_manager, RouteProviderInterface $route_provider, MenuActiveTrailInterface $menu_active_trail, ControllerResolverInterface|CallableResolver $callable_resolver, ContainerAwareEventDispatcher $eventDispatcher = NULL) {
     $this->treeStorage = $tree_storage;
     $this->menuLinkManager = $menu_link_manager;
     $this->routeProvider = $route_provider;
@@ -75,6 +85,11 @@ public function __construct(MenuTreeStorageInterface $tree_storage, MenuLinkMana
       $callable_resolver = \Drupal::service('callable_resolver');
     }
     $this->callableResolver = $callable_resolver;
+    if ($eventDispatcher === NULL) {
+      @trigger_error('The event_dispatcher service must be passed to ' . __NAMESPACE__ . '\MenuLinkTree::__construct(). It was added in drupal:10.3.0 and will be required before drupal:11.0.0.', E_USER_DEPRECATED);
+      $eventDispatcher = \Drupal::service('event_dispatcher');
+    }
+    $this->eventDispatcher = $eventDispatcher;
   }
 
   /**
@@ -141,6 +156,7 @@ protected function createInstances(array $data_tree) {
    * {@inheritdoc}
    */
   public function transform(array $tree, array $manipulators) {
+    $this->eventDispatcher->dispatch(new MenuLinkTreeManipulatorsAlterEvent($tree, $manipulators, $this), MenuLinkTreeEvents::ALTER_MANIPULATORS);
     foreach ($manipulators as $manipulator) {
       $callable = $this->callableResolver->getCallableFromDefinition($manipulator['callable']);
       // Prepare the arguments for the menu tree manipulator callable; the first
diff --git a/core/lib/Drupal/Core/Menu/MenuLinkTreeEvents.php b/core/lib/Drupal/Core/Menu/MenuLinkTreeEvents.php
new file mode 100644
index 0000000000..c72f39f38d
--- /dev/null
+++ b/core/lib/Drupal/Core/Menu/MenuLinkTreeEvents.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace Drupal\Core\Menu;
+
+/**
+ * Defines events for the menu link tree system.
+ *
+ * @see \Drupal\Core\Menu\MenuLinkTreeManipulatorsAlterEvent
+ */
+final class MenuLinkTreeEvents {
+
+  /**
+   * Name of the event fired during menu link tree manipulator collection.
+   *
+   * This event allows modules to modify menu tree manipulators. The event
+   * listener method receives a \Drupal\Core\Menu\MenuLinkTreeManipulatorsAlterEvent instance.
+   *
+   * @Event
+   *
+   * @see \Drupal\Core\Menu\MenuLinkTreeManipulatorsAlterEvent
+   */
+  const ALTER_MANIPULATORS = 'menu.link_tree.alter_manipulators';
+
+}
diff --git a/core/lib/Drupal/Core/Menu/MenuLinkTreeManipulatorsAlterEvent.php b/core/lib/Drupal/Core/Menu/MenuLinkTreeManipulatorsAlterEvent.php
new file mode 100644
index 0000000000..f681d1b977
--- /dev/null
+++ b/core/lib/Drupal/Core/Menu/MenuLinkTreeManipulatorsAlterEvent.php
@@ -0,0 +1,89 @@
+<?php
+
+namespace Drupal\Core\Menu;
+
+use Drupal\Component\EventDispatcher\Event;
+
+/**
+ * Represents menu link tree manipulator information as event.
+ */
+class MenuLinkTreeManipulatorsAlterEvent extends Event {
+
+  /**
+   * The menu tree to manipulate.
+   *
+   * @var \Drupal\Core\Menu\MenuLinkTreeElement[]
+   */
+  protected $tree;
+
+  /**
+   * The menu link tree manipulators.
+   *
+   * @var array
+   */
+  protected $manipulators;
+
+  /**
+   * The menu link tree.
+   *
+   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   */
+  protected $menuLinkTree;
+
+  /**
+   * MenuLinkTreeManipulatorsAlterEvent constructor.
+   *
+   * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $tree
+   *   The menu tree to manipulate.
+   * @param array $manipulators
+   *   The menu link tree manipulators.
+   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree
+   *   The menu link tree.
+   */
+  public function __construct(array $tree, array &$manipulators, MenuLinkTreeInterface $menuLinkTree) {
+    $this->tree = $tree;
+    $this->manipulators = &$manipulators;
+    $this->menuLinkTree = $menuLinkTree;
+   }
+
+  /**
+   * The MenuLinkElement tree.
+   *
+   * @return \Drupal\Core\Menu\MenuLinkTreeElement[]
+   *   The menu tree.
+   */
+  public function getTree(): array {
+    return $this->tree;
+  }
+
+  /**
+   * Get the manipulators for the tree.
+   *
+   * @return array
+   *   The menu tree manipulators.
+   */
+  public function &getManipulators(): array {
+    return $this->manipulators;
+  }
+
+  /**
+   * Set the manipulators for the tree.
+   *
+   * @param array $manipulators
+   *   The menu tree manipulators.
+   */
+  public function setManipulators(array $manipulators): void {
+    $this->manipulators = $manipulators;
+  }
+
+  /**
+   * The MenuLinkTree.
+   *
+   * @return \Drupal\Core\Menu\MenuLinkTreeInterface
+   *   The menu link tree.
+   */
+  public function getMenuLinkTree(): MenuLinkTreeInterface {
+    return $this->menuLinkTree;
+  }
+
+}
diff --git a/core/modules/system/tests/modules/menu_test/menu_test.routing.yml b/core/modules/system/tests/modules/menu_test/menu_test.routing.yml
index 5b83aeb2af..2f3211a77d 100644
--- a/core/modules/system/tests/modules/menu_test/menu_test.routing.yml
+++ b/core/modules/system/tests/modules/menu_test/menu_test.routing.yml
@@ -544,3 +544,27 @@ menu_test.breadcrumb3:
     _title: 'Normal title'
   requirements:
     _access: 'TRUE'
+
+menu_test.manipulator1:
+  path: '/menu-test/manipulators/1'
+  defaults:
+    _controller: '\Drupal\menu_test\Controller\MenuTestController::menuTestCallback'
+    _title: 'Link 1'
+  requirements:
+    _access: 'TRUE'
+
+menu_test.manipulator2:
+  path: '/menu-test/manipulators/2'
+  defaults:
+    _controller: '\Drupal\menu_test\Controller\MenuTestController::menuTestCallback'
+    _title: 'Link 2'
+  requirements:
+    _access: 'TRUE'
+
+menu_test.manipulator3:
+  path: '/menu-test/manipulators/3'
+  defaults:
+    _controller: '\Drupal\menu_test\Controller\MenuTestController::menuTestCallback'
+    _title: 'Link 1'
+  requirements:
+    _access: 'TRUE'
diff --git a/core/modules/system/tests/modules/menu_test/menu_test.services.yml b/core/modules/system/tests/modules/menu_test/menu_test.services.yml
index e1a0aa059b..759dd1a5b5 100644
--- a/core/modules/system/tests/modules/menu_test/menu_test.services.yml
+++ b/core/modules/system/tests/modules/menu_test/menu_test.services.yml
@@ -9,3 +9,8 @@ services:
     arguments: ['@request_stack']
     tags:
       - { name: access_check, applies_to: _menu_test_session_access }
+
+  menu_test.event_subscriber.menu_link_tree:
+    class: Drupal\menu_test\EventSubscriber\MenuLinkTreeEventSubscriber
+    tags:
+      - { name: event_subscriber }
diff --git a/core/modules/system/tests/modules/menu_test/src/EventSubscriber/MenuLinkTreeEventSubscriber.php b/core/modules/system/tests/modules/menu_test/src/EventSubscriber/MenuLinkTreeEventSubscriber.php
new file mode 100644
index 0000000000..7133785d3d
--- /dev/null
+++ b/core/modules/system/tests/modules/menu_test/src/EventSubscriber/MenuLinkTreeEventSubscriber.php
@@ -0,0 +1,36 @@
+<?php
+
+namespace Drupal\menu_test\EventSubscriber;
+
+use Drupal\Core\Menu\MenuLinkTreeEvents;
+use Drupal\Core\Menu\MenuLinkTreeManipulatorsAlterEvent;
+use Drupal\menu_test\MenuLinkManipulators;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+
+/**
+ * Menu tree subscriber for menu tree manipulator events.
+ */
+class MenuLinkTreeEventSubscriber implements EventSubscriberInterface {
+
+  /**
+   * Add our test menu link manipulators.
+   *
+   * @param \Drupal\Core\Menu\MenuLinkTreeManipulatorsAlterEvent $event
+   *   The event.
+   */
+  public static function alterMenuLinkManipulators(MenuLinkTreeManipulatorsAlterEvent $event) {
+    $manipulators = &$event->getManipulators();
+    // Append the test menu link manipulator.
+    $manipulators[] = ['callable' => MenuLinkManipulators::getTestManipulator()];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents() {
+    return [
+      MenuLinkTreeEvents::ALTER_MANIPULATORS => ['alterMenuLinkManipulators'],
+    ];
+  }
+
+}
diff --git a/core/modules/system/tests/modules/menu_test/src/MenuLinkManipulators.php b/core/modules/system/tests/modules/menu_test/src/MenuLinkManipulators.php
new file mode 100644
index 0000000000..fd3d08c68a
--- /dev/null
+++ b/core/modules/system/tests/modules/menu_test/src/MenuLinkManipulators.php
@@ -0,0 +1,53 @@
+<?php
+
+namespace Drupal\menu_test;
+
+use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * A menu manipulator.
+ */
+class MenuLinkManipulators implements ContainerInjectionInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static();
+  }
+
+  /**
+   * Add the class menu-test-link to certain links.
+   *
+   * @param \Drupal\Core\Menu\MenuLinkTreeElement[] $tree
+   *   The menu tree.
+   *
+   * @return array
+   *   The menu manipulators.
+   */
+  public function testManipulator(array $tree) {
+    foreach ($tree as $key => $element) {
+      $link = $tree[$key]->link;
+      $url = $link->getUrlObject();
+      if ($url->isRouted()) {
+        $manipulators = ['menu_test.manipulator2', 'menu_test.manipulator3'];
+        if (in_array($url->getRouteName(), $manipulators)) {
+          $tree[$key]->options['attributes']['class'][] = 'menu-test-link';
+        }
+      }
+    }
+    return $tree;
+  }
+
+  /**
+   * Gets the name of menu manipulator.
+   *
+   * @return string
+   *   The manipulator name.
+   */
+  public static function getTestManipulator() {
+    return self::class . ":testManipulator";
+  }
+
+}
diff --git a/core/modules/system/tests/src/Unit/Menu/MenuLinkTreeTest.php b/core/modules/system/tests/src/Unit/Menu/MenuLinkTreeTest.php
index 6032ff399d..7e77e717ef 100644
--- a/core/modules/system/tests/src/Unit/Menu/MenuLinkTreeTest.php
+++ b/core/modules/system/tests/src/Unit/Menu/MenuLinkTreeTest.php
@@ -37,7 +37,8 @@ protected function setUp(): void {
       $this->createMock('\Drupal\Core\Menu\MenuLinkManagerInterface'),
       $this->createMock('\Drupal\Core\Routing\RouteProviderInterface'),
       $this->createMock('\Drupal\Core\Menu\MenuActiveTrailInterface'),
-      $this->createMock(CallableResolver::class)
+      $this->createMock(CallableResolver::class),
+      $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface')
     );
 
     $cache_contexts_manager = $this->getMockBuilder('Drupal\Core\Cache\Context\CacheContextsManager')
diff --git a/core/modules/toolbar/toolbar.services.yml b/core/modules/toolbar/toolbar.services.yml
index b70f8b9df9..1cf25ff3e4 100644
--- a/core/modules/toolbar/toolbar.services.yml
+++ b/core/modules/toolbar/toolbar.services.yml
@@ -11,4 +11,4 @@ services:
       - { name: page_cache_request_policy }
   toolbar.menu_tree:
     class: Drupal\toolbar\Menu\ToolbarMenuLinkTree
-    arguments: ['@menu.tree_storage', '@plugin.manager.menu.link', '@router.route_provider', '@menu.active_trail', '@callable_resolver']
+    arguments: ['@menu.tree_storage', '@plugin.manager.menu.link', '@router.route_provider', '@menu.active_trail', '@callable_resolver', '@event_dispatcher']
diff --git a/core/tests/Drupal/KernelTests/Core/Menu/MenuLinkTreeTest.php b/core/tests/Drupal/KernelTests/Core/Menu/MenuLinkTreeTest.php
index c36c37fea9..f59b7b53ea 100644
--- a/core/tests/Drupal/KernelTests/Core/Menu/MenuLinkTreeTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Menu/MenuLinkTreeTest.php
@@ -133,4 +133,49 @@ public function testCreateLinksInMenu() {
     $this->assertEquals(3, $height);
   }
 
+  /**
+   * Tests menu link manipulator alter events.
+   */
+  public function testMenuManipulatorAlter() {
+    $links = [
+      1 => MenuLinkMock::create([
+        'id' => 'test.link1',
+        'route_name' => 'menu_test.manipulator1',
+        'title' => 'Link 1',
+        'parent' => '',
+      ]),
+      2 => MenuLinkMock::create([
+        'id' => 'test.link2',
+        'route_name' => 'menu_test.manipulator2',
+        'title' => 'Link 2',
+        'parent' => '',
+      ]),
+      3 => MenuLinkMock::create([
+        'id' => 'test.link3',
+        'route_name' => 'menu_test.manipulator3',
+        'title' => 'Link 3',
+        'parent' => '',
+      ]),
+    ];
+    foreach ($links as $instance) {
+      $this->menuLinkManager->addDefinition($instance->getPluginId(),
+        $instance->getPluginDefinition());
+    }
+    $parameters = new MenuTreeParameters();
+    $tree = $this->linkTree->load('mock', $parameters);
+    $manipulators = [
+      ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
+    ];
+    $tree = $this->linkTree->transform($tree, $manipulators);
+
+    $this->assertCount(3, $tree);
+    /** @var \Drupal\Core\Menu\MenuLinkTreeElement[] $tree */
+    list($link1, $link2, $link3) = array_values($tree);
+
+    // Check that the correct links have an additional class.
+    $this->assertNotContains('menu-test-link', $link1->options['attributes']['class'] ?? []);
+    $this->assertContains('menu-test-link', $link2->options['attributes']['class'] ?? []);
+    $this->assertContains('menu-test-link', $link3->options['attributes']['class'] ?? []);
+  }
+
 }
