diff --git a/lib/Drupal/Core/Config/StorageComparer.php b/lib/Drupal/Core/Config/StorageComparer.php
index 820fe041fc..4974e80e41 100644
--- a/lib/Drupal/Core/Config/StorageComparer.php
+++ b/lib/Drupal/Core/Config/StorageComparer.php
@@ -299,6 +299,15 @@ class StorageComparer implements StorageComparerInterface {
     foreach (array_intersect($this->sourceNames[$collection], $this->targetNames[$collection]) as $name) {
       $source_data = $this->getSourceStorage($collection)->read($name);
       $target_data = $this->getTargetStorage($collection)->read($name);
+
+      // Sort array keys to ensure only actual configuration changes are
+      // detected. This does not affect the export process, as all
+      // configuration is always exported in full.
+      if (is_array($source_data) && is_array($target_data)) {
+        $source_data = $this->ksortRecursive($source_data);
+        $target_data = $this->ksortRecursive($target_data);
+      }
+
       if ($source_data !== $target_data) {
         if (isset($source_data['uuid']) && $source_data['uuid'] !== $target_data['uuid']) {
           // The entity has the same file as an existing entity but the UUIDs do
@@ -321,6 +330,21 @@ class StorageComparer implements StorageComparerInterface {
     }
   }
 
+  /**
+   * Sorts an array recursively based on the keys.
+   *
+   * @param array $array
+   *   Array to sort.
+   * @return array
+   *   Sorted array.
+   */
+  protected function ksortRecursive(array $array): array {
+    ksort($array);
+    return array_map(function ($value) {
+      return is_array($value) ? $this->ksortRecursive($value) : $value;
+    }, $array);
+  }
+
   /**
    * Creates the rename changelist.
    *
