<?php

use Drupal\helfi_platform_config\ConfigHelper;

/**
 * Implements hook_install().
 *
 * Update EU Cookie compliance configurations and authenticated user role when
 * installing module for the first time.
 */
function helfi_gdpr_compliance_install($is_syncing) {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import
  if (!$is_syncing && Drupal::moduleHandler()->moduleExists('update_helper')) {
    // Update base configurations for HELfi GDPR compliance.
    helfi_gdpr_compliance_update_9001();
    helfi_gdpr_compliance_update_9002();
    helfi_gdpr_compliance_update_9003();
    helfi_gdpr_compliance_update_9004();
    helfi_gdpr_compliance_update_9005();
  }

  // Override eu_cookie_compliance settings on module install.
  $configLocation = dirname(__FILE__) . '/config/override/';
  \Drupal\helfi_platform_config\ConfigHelper::installNewConfig($configLocation, 'eu_cookie_compliance.settings');
}

/**
 * {@inheritdoc}
 */
function helfi_gdpr_compliance_update_dependencies() {
  // Run helfi_gdpr_compliance_update_9001()
  // after helfi_platform_config_update_9004() and helfi_base_config_9001().
  $dependencies['helfi_gdpr_compliance'][9001] = [
    'helfi_platform_config' => 9004,
    'helfi_base_config' => 9001,
  ];
  return $dependencies;
}

/**
 * Base configuration for HELfi GDPR compliance feature.
 */
function helfi_gdpr_compliance_update_9001() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_gdpr_compliance', 'helfi_gdpr_compliance_update_9001');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * More accurate information about cookies to Consent management page.
 */
function helfi_gdpr_compliance_update_9002() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_gdpr_compliance', 'helfi_gdpr_compliance_update_9002');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}


/**
 * Update cookie compliance information and whitelisted cookies.
 */
function helfi_gdpr_compliance_update_9003() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Added manually the creation of configuration. Cannot be handled automatically.
  $configLocation = dirname(__FILE__) . '/config/install/';
  $configTranslationLocation = dirname(__FILE__) . '/config/language/';

  $configurations = [
    'eu_cookie_compliance.cookie_category.preference',
    'eu_cookie_compliance.cookie_category.statistics',
    'eu_cookie_compliance.cookie_category.marketing',
    'eu_cookie_compliance.settings'
  ];

  // Install configurations and translations.
  foreach ($configurations as $configuration) {
    ConfigHelper::installNewConfig($configLocation, $configuration);
    ConfigHelper::installNewConfigTranslation($configTranslationLocation, $configuration);
  }

  // Remove obsolete cookie category.
  \Drupal::configFactory()->getEditable('eu_cookie_compliance.cookie_category.performance_ux')->delete();

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_gdpr_compliance', 'helfi_gdpr_compliance_update_9003');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update cookie statistics category and allowed cookies.
 */
function helfi_gdpr_compliance_update_9004() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_gdpr_compliance', 'helfi_gdpr_compliance_update_9004');

  // Install updated translations.
  $configTranslationLocation = dirname(__FILE__) . '/config/language/';
  ConfigHelper::installNewConfigTranslation($configTranslationLocation, 'eu_cookie_compliance.cookie_category.statistics');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update cookie categories and cookie intro text.
 */
function helfi_gdpr_compliance_update_9005() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_gdpr_compliance', 'helfi_gdpr_compliance_update_9005');

  // Install updated translations.
  $configTranslationLocation = dirname(__FILE__) . '/config/language/';
  $configurations = [
    'eu_cookie_compliance.cookie_category.essential',
    'eu_cookie_compliance.cookie_category.marketing',
    'eu_cookie_compliance.cookie_category.preference',
    'eu_cookie_compliance.cookie_category.statistics',
    'hdbt_admin_tools.cookie_consent_intro',
  ];
  foreach ($configurations as $configuration) {
    ConfigHelper::installNewConfigTranslation($configTranslationLocation, $configuration);
  }

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

