<?php

use Drupal\helfi_platform_config\ConfigHelper;

/**
 * @file
 * Contains install functions for HELfi Event module
 */

/**
 * Implements hook_install().
 */
function helfi_events_install($is_syncing) {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if (!$is_syncing && Drupal::moduleHandler()->moduleExists('update_helper')) {
    helfi_events_update_9001();
  }
}

/**
 * Update landing page and page content fields to include events list
 */
function helfi_events_update_9001() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Install config translations
  $configTranslationLocation = dirname(__FILE__) . '/config/language/';

  $configurations = [
    'field.field.paragraph.event_list.field_api_url',
    'field.field.paragraph.event_list.field_event_list_description',
    'field.field.paragraph.event_list.field_event_list_title',
    'field.field.paragraph.event_list.field_load_more',
    'paragraphs.paragraphs_type.event_list'
  ];

  foreach($configurations as $configuration) {
    ConfigHelper::installNewConfigTranslation($configTranslationLocation, $configuration);
  }

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_events', 'helfi_events_update_9001');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Implements hook_uninstall().
 * 
 * Remove configs. 
 */
function helfi_events_uninstall() {
    /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
    $configFactory = \Drupal::configFactory();
    $logger = \Drupal::logger('helfi_events');
  
    $configNames = [
      'core.entity_form_display.paragraph.event_list.default',
      'core.entity_view_display.paragraph.event_list.default',
      'field.field.paragraph.event_list.field_api_url',
      'field.field.paragraph.event_list.field_event_list_description',
      'field.field.paragraph.event_list.field_event_list_title',
      'field.storage.paragraph.field_api_url',
      'field.storage.paragraph.field_event_list_description',
      'field.storage.paragraph.field_event_list_title',
      'paragraphs.paragraphs_type.event_list'
    ];
  
    foreach ($configNames as $configName) {
      try {
        $configFactory->getEditable($configName)->delete();
     }
      catch (\Exception $e) {
        $logger->warning(sprintf('Unable to uninstall config: %s.', $configName));
      }
    }

}
