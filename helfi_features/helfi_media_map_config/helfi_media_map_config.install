<?php

use Drupal\helfi_platform_config\ConfigHelper;

/**
 * Implements hook_install().
 *
 * Update HELfi Media map configurations when
 * installing module for the first time.
 */
function helfi_media_map_config_install($is_syncing) {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import
  if (!$is_syncing && Drupal::moduleHandler()->moduleExists('update_helper')) {
    helfi_media_map_config_update_9001();
    helfi_media_map_config_update_9002();
  }
}

/**
 * {@inheritdoc}
 */
function helfi_media_map_config_update_dependencies() {
  // Run helfi_media_map_config_update_9002()
  // after helfi_platform_config_update_9004() and helfi_base_config_9001().
  $dependencies['helfi_media_map_config'][9001] = [
    'helfi_platform_config' => 9004,
    'helfi_base_config' => 9001,
  ];

  // Run helfi_media_map_config_update_9002() after helfi_content_update_9014()
  // has been run. helfi_content_update_9014() update will reinstall
  // user roles and permissions.
  $dependencies['helfi_media_map_config'][9002] = [
    'helfi_content' => 9014,
  ];
  return $dependencies;
}

/**
 * Base configurations for HELfi Media map config module.
 */
function helfi_media_map_config_update_9001() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_media_map_config', 'helfi_media_map_config_update_9001');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Reinstall Helfi Media map specific permissions.
 */
function helfi_media_map_config_update_9002() {
  // Handle the configuration update manually.
  $configLocation = dirname(__FILE__) . '/config/optional/';

  $configurations = [
    'user.role.admin',
    'user.role.content_producer',
    'user.role.editor',
  ];

  // Install configurations and translations.
  foreach ($configurations as $configuration) {
    ConfigHelper::updateExistingConfig($configLocation, $configuration);
  }
}


/**
 * Added assistive technology title field
 */
function helfi_media_map_config_update_9003() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Added manually the creation of configuration. Cannot be handled automatically.
  $configLocation = dirname(__FILE__) . '/config/install/';
  $storageLocation = dirname(__FILE__) . '../helfi_base_config/config/optional'

  // Key field storage and value is field configuration.
  $configFields = [
    'field.storage.paragraph.field_iframe_title' => 'field.field.paragraph.map.field_iframe_title',
  ];

  // Install iframe title field.
  foreach ($configFields as $field_storage => $field_config) {
    ConfigHelper::installNewField($configLocation, $field_storage, $field_config, $storageLocation);
  }

  // Handle the configuration translation update manually.
  $configTranslationLocation = dirname(__FILE__) . '/config/language/';

  $configurations = [
    'field.field.paragraph.map.field_iframe_title'
  ];

  // Install configurations and translations.
  foreach ($configurations as $configuration) {
    ConfigHelper::installNewConfigTranslation($configTranslationLocation, $configuration);
  }

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_media_map_config', 'helfi_media_map_config_update_9003');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}
