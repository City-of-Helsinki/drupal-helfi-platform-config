<?php

/**
 * @file
 * Contains install functions for Helfi Content.
 */

use Drupal\helfi_platform_config\ConfigHelper;

/**
 * Implements hook_install().
 *
 * Update HELfi Content configurations when
 * installing module for the first time.
 */
function helfi_content_install($is_syncing) {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if (!$is_syncing && Drupal::moduleHandler()->moduleExists('update_helper')) {
    helfi_content_update_9001();
    helfi_content_update_9002();
    helfi_content_update_9004();
    helfi_content_update_9005();
    helfi_content_update_9006();
    helfi_content_update_9007();
    helfi_content_update_9009();
  }
}

/**
 * {@inheritdoc}
 */
function helfi_content_update_dependencies() {
  // Run helfi_content_update_9001()
  // after helfi_platform_config_update_9004() and helfi_base_config_9001().
  $dependencies['helfi_content'][9001] = [
    'helfi_platform_config' => 9004,
    'helfi_base_config' => 9001,
  ];
  return $dependencies;
}

/**
 * Base configuration for HELfi Content feature.
 */
function helfi_content_update_9001() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9001');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Configuration update after feature merge.
 */
function helfi_content_update_9002() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9002');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update link field display form settings to use Linkit-widget.
 */
function helfi_content_update_9003() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Added manually the creation of configuration. Cannot be handled automatically.
  $configLocation = dirname(__FILE__) . '/config/install/';
  ConfigHelper::installNewConfig($configLocation, 'linkit.linkit_profile.tpr_content');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9003');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add title and description field for the accordion paragraph.
 */
function helfi_content_update_9004() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Added manually the creation of configuration. Cannot be handled automatically.
  // Added manually the creation of configuration. Cannot be handled automatically.
  $configLocation = dirname(__FILE__) . '/config/install/';

  // Key field storage and value is field configuration.
  $configFields = [
    'field.storage.paragraph.field_accordion_description' => 'field.field.paragraph.accordion.field_accordion_description',
    'field.storage.paragraph.field_accordion_title' => 'field.field.paragraph.accordion.field_accordion_title',
    'field.storage.paragraph.field_accordion_title_level' => 'field.field.paragraph.accordion.field_accordion_title_level',
  ];

  // Install accordion description, title and title level fields.
  foreach ($configFields as $field_storage => $field_config) {
    ConfigHelper::installNewField($configLocation, $field_storage, $field_config);
  }

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9004');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add class as allowed attribute for ul and li elements on full html text format.
 */
function helfi_content_update_9005() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9005');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Remove highlight component from WYSIWYG.
 */
function helfi_content_update_9006() {
  // Load the existing configuration.
  $config_name = 'editor.editor.full_html';
  $config = \Drupal::configFactory()->getEditable($config_name);
  $config_data = $config->getRawData();

  // Check that the WYSIWYG toolbar is set.
  if (isset($config_data['settings']['toolbar']['rows'])) {
    foreach ($config_data['settings']['toolbar']['rows'] as &$rows) {
      // Go through each row of settings and search for the 'highlight' value and remove it if found.
      foreach ($rows as &$row) {
        if (array_key_exists('items', $row)) {
          if (($key = array_search('highlight', $row['items'])) !== FALSE) {
            unset($row['items'][$key]);
          }
        }
      }
    }
  }
  // Save the configuration without the highlight value.
  $config->setData($config_data)->save();

  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9006');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add image paragraph as allowed paragraph inside accordion content.
 */
function helfi_content_update_9007() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9007');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Set up Table of contents field for basic page content type.
 */
function helfi_content_update_9008() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9008');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update content metatag image values to use shareable image (token).
 */
function helfi_content_update_9009() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9009');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update permissions for Admin and Content producer roles.
 */
function helfi_content_update_9010() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Added manually the creation of configuration. Cannot be handled automatically.
  $configLocation = dirname(__FILE__) . '/config/install/';
  ConfigHelper::installNewConfig($configLocation, 'user.role.read_only');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_content', 'helfi_content_update_9010');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}
