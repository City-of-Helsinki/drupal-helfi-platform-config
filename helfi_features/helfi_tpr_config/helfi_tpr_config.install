<?php

/**
 * @file
 * Contains install functions for HELfi TPR configuration.
 */

use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_install().
 */
function helfi_tpr_config_install($is_syncing) {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if (!$is_syncing) {
    if (Drupal::moduleHandler()->moduleExists('update_helper')) {
      helfi_tpr_config_update_9001();
      helfi_tpr_config_update_9002();
      helfi_tpr_config_update_9003();
      helfi_tpr_config_update_9004();
      helfi_tpr_config_update_9005();
      helfi_tpr_config_update_9015();
    }

    // If HELfi Announcements module is installed, install also
    // HELfi Announcements TPR integration module.
    if (Drupal::moduleHandler()->moduleExists('helfi_announcements')) {
      Drupal::service('module_installer')->install([
        'helfi_announcements_tpr',
      ]);
    }
  }
}

/**
 * {@inheritdoc}
 */
function helfi_tpr_config_update_dependencies() {
  // Run helfi_tpr_config_update_9002()
  // after helfi_platform_config_update_9004() and helfi_base_config_9001().
  $dependencies['helfi_tpr_config'][9002] = [
    'helfi_platform_config' => 9004,
    'helfi_base_config' => 9001,
  ];
  $dependencies['helfi_tpr_config'][9003] = [
    'helfi_content' => 9003,
  ];
  $dependencies['helfi_tpr_config'][9013] = [
    'helfi_content' => 9010,
  ];
  return $dependencies;
}

/**
 * Install 'color palette' field to TPR Unit and TPR Service entities.
 */
function helfi_tpr_config_update_9001() {

  // Field to be installed and entity types.
  $field = 'color_palette';
  $entity_types = [
    'tpr_unit',
    'tpr_service',
  ];

  foreach ($entity_types as $entity_type) {
    $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
    $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $entity_type);
    if (!empty($field_definitions[$field]) && $field_definitions[$field] instanceof FieldStorageDefinitionInterface) {
      $entity_definition_update_manager->installFieldStorageDefinition($field, $entity_type, 'hdbt_admin_editorial', $field_definitions[$field]);
    }
  }
}

/**
 * Base configurations for HELfi TPR config module.
 */
function helfi_tpr_config_update_9002() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9002');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add tpr_service and tpr_unit to linkit profile.
 */
function helfi_tpr_config_update_9003() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9003');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Pathauto configuration for TPR units and services.
 */
function helfi_tpr_config_update_9004() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9004');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Modify unit teaser display to include image field and remove phone number field.
 */
function helfi_tpr_config_update_9005() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9005');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update label for Unit views load more button.
 */
function helfi_tpr_config_update_9006() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9006');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Show five (5) Service points instead of eight (8) in Service page.
 */
function helfi_tpr_config_update_9007() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9007');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update lower content field to use liftup with image paragraphs.
 */
function helfi_tpr_config_update_9008() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9008');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Install 'table of contents' fields to TPR Service entities.
 */
function helfi_tpr_config_update_9009() {
  // Fields to be installed and entity type.
  $fields = ['toc_enabled', 'toc_title'];
  $entity_type = 'tpr_service';

  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $entity_type);

  foreach ($fields as $field) {
    if (!empty($field_definitions[$field]) && $field_definitions[$field] instanceof FieldStorageDefinitionInterface) {
      $entity_definition_update_manager->installFieldStorageDefinition($field, $entity_type, 'helfi_toc', $field_definitions[$field]);
    }
  }

  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9009');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Install 'color palette' field to TPR Unit and TPR Service entities.
 */
function helfi_tpr_config_update_9010() {

  // Field to be installed and entity types.
  $field = 'color_palette';
  $entity_types = [
    'tpr_unit',
    'tpr_service',
  ];

  foreach ($entity_types as $entity_type) {
    $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
    $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $entity_type);

    // Install color palette field, if color palette field has not
    // been installed to current entity.
    if (
      !empty($field_definitions[$field]) &&
      $field_definitions[$field] instanceof FieldStorageDefinitionInterface &&
      empty($entity_definition_update_manager->getFieldStorageDefinition($field, $entity_type))
    ) {
      $entity_definition_update_manager->installFieldStorageDefinition($field, $entity_type, 'hdbt_admin_editorial', $field_definitions[$field]);
    }
  }
}

/**
 * Update translations for the Unit map title and link.
 */
function helfi_tpr_config_update_9011() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9011');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update TPR Unit metatag images to use default-og-image as fallback (token).
 */
function helfi_tpr_config_update_9012() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9012');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add view unpublished TPR entities permissions to Admin and Content producer.
 */
function helfi_tpr_config_update_9013() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9013');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update TPR Unit and Service metatag og_site_name to use global site name.
 */
function helfi_tpr_config_update_9014() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9014');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update Unit view mode in Service units view.
 */
function helfi_tpr_config_update_9015() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9015');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}


/**
 * show_www field configuration.
 */
function helfi_tpr_config_update_9017() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('helfi_tpr_config', 'helfi_tpr_config_update_9017');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}
