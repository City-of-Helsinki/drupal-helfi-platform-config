<?php

/**
 * @file
 * Contains installation hooks.
 */

declare(strict_types=1);

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Extension\ModuleHandlerInterface;

/**
 * Implements hook_install().
 */
function helfi_recommendations_install($is_syncing) : void {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if ($is_syncing) {
    return;
  }

  /** @var Drupal\helfi_platform_config\Helper\BlockInstaller $block_installer */
  $block_installer = \Drupal::service('helfi_platform_config.helper.block_installer');

  /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
  $theme_handler = \Drupal::service('theme_handler');

  if (!str_starts_with($theme_handler->getDefault(), 'hdbt')) {
    return;
  }

  $theme = $theme_handler->getDefault();
  $block_config = helfi_recommendations_get_block_configurations($theme);
  ['block' => $block, 'variations' => $variations] = $block_config;
  $block_installer->install($block, $variations);

  // Set the text converter view display for the given content types.
  helfi_recommendations_set_text_converter_view_display('node', 'news_article', [
    'field_content',
    'field_lead_in',
  ]);
  helfi_recommendations_set_text_converter_view_display('node', 'news_item', [
    'field_content',
    'field_lead_in',
  ]);
  helfi_recommendations_set_text_converter_view_display('node', 'page', [
    'field_content',
    'field_lead_in',
    'field_lower_content',
    'field_sidebar_content',
  ]);

  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service(ModuleHandlerInterface::class);

  if ($moduleHandler->moduleExists('helfi_tpr_config')) {
    helfi_recommendations_set_text_converter_view_display('tpr_service', 'tpr_service', [
      'field_content',
      'field_lower_content',
      'field_sidebar_content',
    ]);
  }
}

/**
 * Sets the text converter view display for the given content type.
 *
 * Creates a text_converter view display for the given content type and copies
 * selected fields from the default view display.
 *
 * @param string $entity_type
 *   The entity type.
 * @param string $content_type
 *   The content type.
 * @param array $fields
 *   The fields to set the text converter view display for.
 */
function helfi_recommendations_set_text_converter_view_display(string $entity_type, string $content_type, array $fields) : void {
  // First check if entity bundle exists here.
  $bundle_info = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entity_type);
  if (!isset($bundle_info[$content_type])) {
    return;
  }

  $storage = \Drupal::entityTypeManager()->getStorage('entity_view_display');

  // Load default view display to be used as basis for the text converter
  // view display.
  $default_view_display = $storage->load($entity_type . '.' . $content_type . '.default')->toArray();
  // Try loading text converter view display, or create it if it doesn't exist.
  $text_converter_view_display = $storage->load($entity_type . '.' . $content_type . '.text_converter');

  if (!$text_converter_view_display) {
    $text_converter_view_display = $storage->create([
      'targetEntityType' => $entity_type,
      'bundle' => $content_type,
      'mode' => 'text_converter',
    ]);
  }

  assert($text_converter_view_display instanceof EntityViewDisplayInterface);

  // Hide all existing components that are not in the list of fields to be
  // shown.
  foreach ($text_converter_view_display->getComponents() as $field => $component) {
    if (!in_array($field, $fields)) {
      $text_converter_view_display->removeComponent($field);
    }
  }

  // Set component settings from default view mode.
  foreach ($fields as $field) {
    $text_converter_view_display->setComponent($field, $default_view_display['content'][$field] ?? []);
  }

  // Enable and save.
  $text_converter_view_display->enable();
  $text_converter_view_display->save();
}

/**
 * Gets the block configurations.
 *
 * @return array[]
 *   The block configurations.
 */
function helfi_recommendations_get_block_configurations(string $theme) : array {
  $blocks = [
    'block' => [
      'id' => 'helfirecommendationsblock',
      'plugin' => 'helfi_recommendations',
      'provider' => 'helfi_recommendations',
      'settings' => [
        'id' => 'helfi_recommendations',
        'label' => 'AI powered recommendations',
        'label_display' => FALSE,
        'provider' => 'helfi_recommendations',
      ],
      'weight' => 1,
      'visibility' => [
        'language' => [
          'id' => 'language',
          'negate' => FALSE,
          'context_mapping' => [
            'language' => '@language.current_language_context:language_interface',
          ],
          'langcodes' => [
            'fi' => 'fi',
            'sv' => 'sv',
            'en' => 'en',
          ],
        ],
        'request_path' => [
          'id' => 'request_path',
          'negate' => FALSE,
          'pages' => "/tpr-service/*\r\n/node/*",
        ],
      ],
    ],
    'variations' => [
      [
        'theme' => $theme,
        'region' => 'content',
      ],
      [
        'theme' => 'stark',
        'region' => 'content',
      ],
    ],
  ];

  return $blocks;
}

/**
 * Unset '_info_file_ctime' for helfi_recommendations module.
 */
function helfi_recommendations_update_10001() : void {
  $module_info = \Drupal::keyValue('locale.project')->get('helfi_recommendations');

  // Unset '_info_file_ctime' for helfi_recommendations module as it contains
  // outdated data which prevents the translastions from being updated.
  if (isset($module_info['info']['_info_file_ctime'])) {
    unset($module_info['info']['_info_file_ctime']);
    \Drupal::keyValue('locale.project')->set('helfi_recommendations', $module_info);
  }
}

/**
 * Re-trigger install hook to install view mode and block for tpr_service.
 */
function helfi_recommendations_update_10003() : void {
  helfi_recommendations_install(FALSE);

  $recommendations_block = Drupal::configFactory()
    ->getEditable('block.block.helfirecommendationsblock');
  $raw_data = $recommendations_block->getRawData();

  if (isset($raw_data['visibility']['entity_bundle:node'])) {
    unset($raw_data['visibility']['entity_bundle:node']);
  }

  $raw_data['visibility']['request_path'] = [
    'id' => 'request_path',
    'negate' => FALSE,
    'pages' => "/tpr-service/*\r\n/node/*",
  ];
  $recommendations_block->setData($raw_data);
  $recommendations_block->save();
}
