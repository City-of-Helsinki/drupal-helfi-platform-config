<?php

/**
 * @file
 * Contains installation tasks for helfi_platform_config_base module.
 */

declare(strict_types=1);

use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_install().
 */
function helfi_platform_config_base_install($is_syncing) : void {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if ($is_syncing) {
    return;
  }

  $config_factory = Drupal::configFactory();
  $theme_installer = Drupal::service('theme_installer');
  /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
  $theme_handler = \Drupal::service('theme_handler');
  $module_installer = Drupal::service('module_installer');

  // Remove the default frontpage view.
  $config_factory->getEditable('views.view.frontpage')->delete();

  // Remove the obsolete footer menu.
  $config_factory->getEditable('system.menu.footer')->delete();

  // Install hdbt and hdbt_admin themes.
  $theme_installer->install(['hdbt', 'hdbt_admin']);
  $config_factory->getEditable('system.theme')
    ->set('default', 'hdbt')
    ->set('admin', 'hdbt_admin')
    ->save();

  // Uninstall stark theme.
  if (array_key_exists('stark', $theme_handler->listInfo())) {
    $theme_installer->uninstall(['stark']);
  }

  // Remove an obsolete block that is named hdbt_admin.
  $config_factory->getEditable('block.block.hdbt_admin')->delete();

  // Install gin_toolbar as installing it as a theme dependency will not install
  // HDBT Admin theme at all.
  // See: https://git.drupalcode.org/project/gin/-/blob/8.x-3.x/gin.info.yml#L7
  $module_installer->install(['gin_toolbar']);

  // Apply permission.
  helfi_platform_config_base_grant_permissions();
}

/**
 * Grants required permissions.
 */
function helfi_platform_config_base_grant_permissions() : void {
  $permissions = [
    'authenticated' => [
      'access toolbar',
    ],
  ];
  helfi_platform_config_grant_permissions($permissions);
}

/**
 * Enable hearings paragraph.
 */
function helfi_platform_config_base_update_9001() : void {
  Drupal::service('module_installer')->install([
    'helfi_paragraphs_hearings',
  ]);
}

/**
 * Enable STOMP module.
 */
function helfi_platform_config_base_update_9002() : void {
  $module_installer = Drupal::service('module_installer');
  $module_installer->install(['stomp']);
}

/**
 * UHF-9511 Uninstall content_liftup paragraph.
 */
function helfi_platform_config_base_update_9003() : void {

  // Remove stale content liftup paragraph entities.
  $paragraph_ids = \Drupal::entityQuery('paragraph')
    ->condition('type', 'content_liftup')
    ->accessCheck(FALSE)
    ->execute();

  if (!empty($paragraph_ids)) {
    // Load the paragraphs.
    $paragraphs = Paragraph::loadMultiple($paragraph_ids);

    // Delete the paragraphs.
    foreach ($paragraphs as $paragraph) {
      $paragraph->delete();
    }
  }

  // Uninstall helfi_paragraphs_content_liftup module.
  $module_installer = Drupal::service('module_installer');
  $module_installer->uninstall(['helfi_paragraphs_content_liftup']);

  // Trigger updates for content liftup related modules.
  $affected_modules = [
    'helfi_base_content',
    'helfi_tpr_config',
    'helfi_node_landing_page',
    'helfi_node_page',
  ];

  foreach ($affected_modules as $module) {
    if (!\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    // Trigger updates for content liftup related modules.
    \Drupal::service('helfi_platform_config.config_update_helper')
      ->update($module);
  }
}

/**
 * Enable image gallery paragraph.
 */
function helfi_platform_config_base_update_9004() : void {
  $environmentResolver = \Drupal::getContainer()->get('helfi_api_base.environment_resolver');

  try {
    $environmentResolver->getActiveEnvironment();
  }
  catch (\InvalidArgumentException) {
    return;
  }

  // Enable helfi_paragraphs_image_gallery.
  if (!\Drupal::moduleHandler()->moduleExists('helfi_paragraphs_image_gallery')) {
    Drupal::service('module_installer')->install(['helfi_paragraphs_image_gallery']);
  }

  // Trigger updates for content liftup related modules.
  $affected_modules = [
    'helfi_node_landing_page',
    'helfi_node_page',
  ];

  foreach ($affected_modules as $module) {
    if (!\Drupal::moduleHandler()->moduleExists($module)) {
      continue;
    }
    // Trigger updates for content liftup related modules.
    \Drupal::service('helfi_platform_config.config_update_helper')
      ->update($module);
  }
}
