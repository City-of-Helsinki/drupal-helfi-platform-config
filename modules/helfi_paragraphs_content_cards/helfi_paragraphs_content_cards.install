<?php

/**
 * @file
 * Contains installation tasks for helfi_paragraphs_content_cards module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\Exception\FieldStorageDefinitionUpdateForbiddenException;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * UHF-9088: Updated config translations for helfi_paragraphs_content_cards.
 */
function helfi_paragraphs_content_cards_update_9001() : void {
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_paragraphs_content_cards');
}

/**
 * UHF-8982 Remove grey options, change to use allowed_values_function.
 */
function helfi_paragraphs_content_cards_update_9002(): void {
  try {
    $old_rows = \Drupal::database()
      ->select('paragraph__field_content_cards_design')
      ->fields('paragraph__field_content_cards_design')
      ->condition('bundle', 'content_cards')
      ->execute()
      ->fetchAll();

    if (!$old_rows) {
      return;
    }

    foreach ($old_rows as $row) {
      $values = (array) $row;
      $original_design = $values['field_content_cards_design_value'] ?? NULL;

      // Skip if there's no value.
      if (!$original_design) {
        continue;
      }

      // Map the old grey styles to the new ones.
      $new_design = match ($original_design) {
        'small-cards-grey' => 'small-cards',
        'large-cards-grey' => 'large-cards',
        default => $original_design,
      };

      // Skip if nothing changed.
      if ($new_design === $original_design) {
        continue;
      }

      // Update the record.
      \Drupal::database()
        ->update('paragraph__field_content_cards_design')
        ->fields(['field_content_cards_design_value' => $new_design])
        ->condition('entity_id', $values['entity_id'])
        ->condition('revision_id', $values['revision_id'])
        ->execute();
    }
  }
  catch (\Exception $e) {
    \Drupal::messenger()->addMessage(t('Transforming old content cards design values failed.'));
    return;
  }
  try {
    $field_content_cards_design = FieldStorageConfig::loadByName('paragraph', 'field_content_cards_design');
    $field_content_cards_design->setSetting('allowed_values', '{ }');
    $field_content_cards_design->setSetting('allowed_values_function', 'helfi_paragraphs_content_cards_allowed_values');
    $field_content_cards_design->save();
  }
  catch (FieldStorageDefinitionUpdateForbiddenException $exception) {
    // We know the database values are different what we are trying to write,
    // but we are only replacing the values with an allowed_values_function.
  }
}
