<?php

/**
 * @file
 * Contains helfi_paragraphs_curated_event_list' module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\entity\BundleFieldDefinition;
use Drupal\external_entities\Entity\ExternalEntity;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook hook_ENTITY_TYPE_view().
 */
function helfi_paragraphs_curated_event_list_paragraph_view(
  array &$build,
  ParagraphInterface $entity,
  EntityViewDisplayInterface $display,
  string $view_mode,
): void {
  if ($entity->bundle() !== 'curated_event_list') {
    return;
  }

  $selections = $entity->field_events->referencedEntities();

  if (
    $display->getComponent('field_events') &&
    !empty($selections)
  ) {
    $storage = Drupal::entityTypeManager()
      ->getStorage('linkedevents_event');

    $ids = array_map(function (ExternalEntity $event) {
      return $event->id();
    }, $selections);

    $entities = $storage->loadMultiple($ids);
    $time = time();

    foreach ($entities as $item) {
      $item->addCacheableDependency($entity);
      $end_timestamp = $item->end_time->date->getTimeStamp();
      $has_ended = $end_timestamp < $time;

      $build[$has_ended ? 'past_events' : 'future_or_ongoing'][] = Drupal::entityTypeManager()
        ->getViewBuilder('linkedevents_event')
        ->view($item);
    }

    if (
      isset($build['future_or_ongoing']) &&
      count($build['future_or_ongoing']) > 3
    ) {
      $build['future_or_ongoing'] = array_slice($build['future_or_ongoing'], 0, 3);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paragraphs_curated_event_list_preprocess_external_entity__linkedevents_event(
  array &$variables,
): void {
  $event = $variables['external_entity'];
  $variables['start_timestamp'] = $event->start_time->date->getTimeStamp();
  $variables['end_timestamp'] = $event->end_time->date->getTimeStamp();
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function helfi_paragraphs_curated_event_list_entity_bundle_field_info_alter(
  &$fields,
  EntityTypeInterface $entity_type,
  $bundle,
): void {
  if ($entity_type->id() === 'linkedevents_event') {
    $fields['main_image'] = BundleFieldDefinition::create('link')
      ->setName('main_image')
      ->setLabel('Main image')
      ->setTargetEntityTypeId($entity_type->id())
      ->setTargetBundle($bundle)
      ->setSettings([
        'max_length' => 1024,
      ])
      ->setDisplayConfigurable('view', TRUE);
    $fields['start_time'] = BundleFieldDefinition::create('datetime')
      ->setName('start_time')
      ->setLabel('Event start time')
      ->setDefaultValue('')
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'datetime_default',
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);
    $fields['end_time'] = BundleFieldDefinition::create('datetime')
      ->setName('end_time')
      ->setLabel('Event end time')
      ->setDefaultValue('')
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'datetime_default',
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);
    $fields['external_link'] = BundleFieldDefinition::create('link')
      ->setName('external_link')
      ->setLabel('External link')
      ->setDefaultValue('')
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'link_default',
      ])
      ->setTranslatable(TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }

  if (
    $entity_type->id() === 'paragraph' &&
    $bundle === 'curated_event_list' &&
    array_key_exists('field_events', $fields)
  ) {
    $fields['field_events']->addConstraint('CuratedEvent', []);
  }
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_paragraphs_curated_event_list_helfi_paragraph_types() : array {
  $types = [
    'field_content' => [
      'curated_event_list' => 15,
    ],
  ];

  $enabled = [];
  foreach ($types as $field => $paragraphTypes) {
    foreach ($paragraphTypes as $paragraphType => $weight) {
      $enabled[] = new ParagraphTypeCollection('node', 'landing_page', $field, $paragraphType, $weight);
    }
  }
  return $enabled;
}
