<?php

/**
 * @file
 * Contains installation tasks for helfi_user_roles module.
 */

declare(strict_types=1);

use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;

/**
 * Install 'super_administrator' role.
 */
function helfi_user_roles_update_9001() : void {
  if (Role::load('super_administrator')) {
    return;
  }
  // We can't use 'update_helper' service to re-install configuration because
  // it will re-install previously installed roles (from this module) and wipe
  // out the permissions because 'user.role.*.yml' configuration files define
  // no permissions.
  // Permissions are granted by individual modules in hook_install().
  Role::create([
    'id' => 'super_administrator',
    'label' => 'Super administrator',
    'status' => TRUE,
    'is_admin' => TRUE,
    'weight' => 7,
  ])
    ->save();
}

/**
 * Randomize password for uid 1 user.
 */
function helfi_user_roles_update_9002() : void {
  try {
    // Attempt to resolve active environment. If this throws an exception, this
    // is not running in the main instances, and we don't want to change the
    // password.
    \Drupal::service('helfi_api_base.environment_resolver')->getActiveEnvironment();
  }
  catch (\InvalidArgumentException) {
    return;
  }

  $user = User::load(1);
  if (empty($user)) {
    return;
  }

  // Random password, 192 bits of entropy.
  $password = base64_encode(random_bytes(24));

  $user
    ->setPassword($password)
    ->save();
}
