<?php

/**
 * @file
 * Contains hooks for 'helfi_tpr_config' module.
 */

declare(strict_types=1);

use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_tpr_config_helfi_paragraph_types() : array {
  $fields = [
    'tpr_unit' => [
      'field_content' => [
        'text',
        'columns',
        'accordion',
        'image',
        'list_of_links',
        'content_cards',
        'banner',
        'from_library',
        'contact_card_listing',
        'remote_video',
      ],
      'field_lower_content' => [
        'columns',
        'accordion',
        'image',
        'list_of_links',
        'content_cards',
        'banner',
        'liftup_with_image',
        'from_library',
        'news_list',
        'contact_card_listing',
        'remote_video',
        'event_list',
      ],
    ],
    'tpr_service' => [
      'field_content' => [
        'text',
        'columns',
        'accordion',
        'image',
        'list_of_links',
        'content_cards',
        'banner',
        'from_library',
        'remote_video',
        'phasing',
      ],
      'field_sidebar_content' => [
        'text',
        'from_library',
      ],
      'field_lower_content' => [
        'columns',
        'accordion',
        'image',
        'list_of_links',
        'content_cards',
        'banner',
        'liftup_with_image',
        'from_library',
        'remote_video',
        'event_list',
        'phasing',
      ],
    ],
  ];

  $enabled = [];
  foreach ($fields as $entityTypeId => $types) {
    foreach ($types as $field => $paragraphTypes) {
      foreach ($paragraphTypes as $paragraphType) {
        $enabled[] = new ParagraphTypeCollection($entityTypeId, $entityTypeId, $field, $paragraphType);
      }
    }
  }
  return $enabled;
}

/**
 * Implements hook_theme().
 */
function helfi_tpr_config_theme() {
  return [
    'tpr_errand_service_detail' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'tpr_errand_service_detail_link' => [
      'variables' => [
        'title' => NULL,
        'links' => NULL,
      ],
    ],
    'tpr_unit_contact_information' => [
      'render element' => 'elements',
    ],
    'tpr_unit_lower_content' => [
      'render element' => 'elements',
    ],
    'tpr_service_important_links' => [
      'render element' => 'elements',
    ],
    'tpr_service_lower_content' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for tpr_unit_contact_information templates.
 *
 * Default template: tpr-unit-contact-information.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_unit_contact_information(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_unit'])) {
    $entity = $variables['entity'] = $variables['elements']['#tpr_unit'];

    // Get 'show_www' field value and pass it to the template.
    $show_www = $variables['entity']->get('show_www')->value;
    $variables['show_www'] = boolval($show_www);

    // Convert email link to Url object and set as variable for the template.
    if (!$entity->email->isEmpty()) {
      $variables['unit_email_link'] = Url::fromUri('mailto:' . $entity->email->value);
    }
  }
}

/**
 * Prepares variables for tpr_unit_lower_content templates.
 *
 * Default template: tpr-unit-lower-content.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_unit_lower_content(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_unit'])) {
    $variables['entity'] = $variables['elements']['#tpr_unit'];
  }
}

/**
 * Prepares variables for tpr_service_important_links templates.
 *
 * Default template: tpr-service-important-links.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_service_important_links(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_service'])) {
    $variables['entity'] = $variables['elements']['#tpr_service'];
  }
}

/**
 * Prepares variables for tpr_service_lower_content templates.
 *
 * Default template: tpr-service-lower-content.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_service_lower_content(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_service'])) {
    $variables['entity'] = $variables['elements']['#tpr_service'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_tpr_config_form_views_exposed_form_alter(&$form, $form_state) : void {
  // Setting high school search form autocompletes to off so that when
  // users returning to the form won't see their previous selections
  // and think that the results match to those because they don't.
  if (str_starts_with($form['#id'], 'views-exposed-form-high-school-search-block')) {
    $form['#attributes']['autocomplete'] = 'off';
    $form['emphasis']['#attributes']['autocomplete'] = 'off';
    $form['mission']['#attributes']['autocomplete'] = 'off';
    $form['type']['#attributes']['autocomplete'] = 'off';
  }

  // Handle only Unit search view form at this point.
  if (!str_starts_with($form['#id'], 'views-exposed-form-unit-search-block')) {
    return;
  }

  // Get view from form state.
  $view = $form_state->getStorage()['view'];
  [, $paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }

  if ($paragraph->hasField('field_unit_search_meta_button')) {
    $form['actions']['submit']['#value'] = $paragraph
      ->get('field_unit_search_meta_button')
      ->value;
  }

  if ($paragraph->hasField('field_unit_search_meta_label')) {
    $form['#info']['filter-combine']['label'] = $paragraph
      ->get('field_unit_search_meta_label')
      ->value;
  }

  if ($paragraph->hasField('field_unit_search_meta_placehold')) {
    $form['unit_search']['#attributes']['placeholder'] = $paragraph
      ->get('field_unit_search_meta_placehold')
      ->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_tpr_config_preprocess_views_infinite_scroll_pager__unit_search(&$variables) : void {
  $view = $variables['view'];

  [, $paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }
  $variables['options']['button_text'] = $paragraph
    ->get('field_unit_search_meta_load_more')
    ?->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_tpr_config_preprocess_views_infinite_scroll_pager__service_list(&$variables) : void {
  $view = $variables['view'];

  [, $paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }
  $variables['options']['button_text'] = $paragraph
    ->get('field_service_list_meta_load_mor')
    ?->value;
}
