<?php

/**
 * @file
 * Contains hooks for 'helfi_tpr_config' module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\Element;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\helfi_tpr_config\Entity\ServiceList;
use Drupal\helfi_tpr_config\Entity\ServiceListSearch;
use Drupal\helfi_tpr_config\Entity\Unit;
use Drupal\helfi_tpr_config\Entity\UnitSearch;
use Drupal\linkit\Entity\Profile;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function helfi_tpr_config_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['tpr_unit']['tpr_unit'])) {
    $bundles['tpr_unit']['tpr_unit']['class'] = Unit::class;
  }
  if (isset($bundles['paragraph']['service_list'])) {
    $bundles['paragraph']['service_list']['class'] = ServiceList::class;
  }
  if (isset($bundles['paragraph']['service_list_search'])) {
    $bundles['paragraph']['service_list_search']['class'] = ServiceListSearch::class;
  }
  if (isset($bundles['paragraph']['unit_search'])) {
    $bundles['paragraph']['unit_search']['class'] = UnitSearch::class;
  }
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_tpr_config_helfi_paragraph_types() : array {
  $entities = [
    'tpr_unit' => [
      'tpr_unit' => [
        'field_content' => [
          'text' => 0,
          'accordion' => 1,
          'banner' => 2,
          'image' => 3,
          'list_of_links' => 4,
          'content_cards' => 5,
          'from_library' => 6,
          'remote_video' => 7,
          'columns' => 8,
          'contact_card_listing' => 9,
        ],
        'field_lower_content' => [
          'list_of_links' => 0,
          'content_cards' => 1,
          'event_list' => 2,
          'contact_card_listing' => 3,
          'news_list' => 4,
          'from_library' => 5,
          'banner' => 6,
          'accordion' => 7,
          'text' => 8,
          'columns' => 9,
          'image' => 10,
          'liftup_with_image' => 11,
          'map' => 12,
          'remote_video' => 13,
        ],
      ],
    ],
    'tpr_service' => [
      'tpr_service' => [
        'field_content' => [
          'text' => 0,
          'accordion' => 1,
          'banner' => 2,
          'image' => 3,
          'list_of_links' => 4,
          'content_cards' => 5,
          'from_library' => 6,
          'phasing' => 7,
          'map' => 8,
          'remote_video' => 9,
          'columns' => 10,
          'event_list' => 11,
          'contact_card_listing' => 12,
          'unit_accessibility_information' => 13,
          'unit_contact_card' => 14,
        ],
        'field_sidebar_content' => [
          'from_library' => 0,
          'sidebar_text' => 1,
        ],
        'field_lower_content' => [
          'list_of_links' => 0,
          'content_cards' => 1,
          'event_list' => 2,
          'contact_card_listing' => 3,
          'news_list' => 4,
          'from_library' => 5,
          'banner' => 6,
          'accordion' => 7,
          'text' => 8,
          'columns' => 9,
          'image' => 10,
          'liftup_with_image' => 11,
          'map' => 12,
          'remote_video' => 13,
          'phasing' => 14,
          'unit_accessibility_information' => 15,
          'unit_contact_card' => 16,
        ],
      ],
    ],
    'node' => [
      'page' => [
        'field_content' => [
          'content_liftup' => 12,
          'service_list_search' => 16,
          'unit_search' => 17,
        ],
        'field_lower_content' => [
          'content_liftup' => 12,
          'service_list_search' => 16,
          'unit_search' => 17,
        ],
      ],
      'landing_page' => [
        'field_content' => [
          'content_liftup' => 11,
          'service_list' => 15,
          'service_list_search' => 16,
          'unit_search' => 17,
        ],
      ],
    ],
    'paragraphs_library_item' => [
      'paragraphs_library_item' => [
        'paragraphs' => [
          'unit_search' => 0,
          'service_list' => 0,
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType => $weight) {
          $enabled[] = new ParagraphTypeCollection($entityTypeId, $bundle, $field, $paragraphType, $weight);
        }
      }
    }
  }
  return $enabled;
}

/**
 * Implements hook_themes_installed().
 */
function helfi_tpr_config_themes_installed($theme_list) {
  /** @var Drupal\helfi_platform_config\Helper\BlockInstaller $blockInstaller */
  $blockInstaller = Drupal::service('helfi_platform_config.helper.block_installer');

  foreach ($theme_list as $theme) {
    if (in_array($theme, ['stark', 'hdbt', 'hdbt_subtheme'])) {
      foreach (helfi_tpr_config_get_block_configurations($theme) as $blockConfiguration) {
        ['block' => $block, 'variations' => $variations] = $blockConfiguration;
        $blockInstaller->install($block, $variations);
      }
    }
  }
}

/**
 * Get linkit profile matchers for the TPR unit and TPR service.
 *
 * @return array
 *   Returns TPR entity matchers for linkit profile.
 */
function helfi_tpr_config_get_linkit_profile_matchers(): array {
  return [
    [
      'uuid' => '744298c6-f701-49e7-ba32-bed4e527cffc',
      'id' => 'entity:tpr_unit',
      'weight' => -1,
      'settings' => [
        'metadata' => '',
        'bundles' => NULL,
        'group_by_bundle' => NULL,
        'substitution_type' => 'canonical',
        'limit' => 20,
      ],
    ],
    [
      'uuid' => '8d7c9a5a-51fa-4f1b-9e0e-4ca58c6e6649',
      'id' => 'entity:tpr_service',
      'weight' => -2,
      'settings' => [
        'metadata' => '',
        'bundles' => NULL,
        'group_by_bundle' => NULL,
        'substitution_type' => 'canonical',
        'limit' => 20,
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function helfi_tpr_config_linkit_profile_presave(Profile $profile) : void {
  if ($profile->isSyncing() || $profile->id() !== 'helfi') {
    return;
  }

  // The uuids are defined in helfi_tpr_config_get_linkit_profile_matchers().
  $uuids = [
    '744298c6-f701-49e7-ba32-bed4e527cffc',
    '8d7c9a5a-51fa-4f1b-9e0e-4ca58c6e6649',
  ];

  // Return if both linkit profile matchers already exist in the configuration.
  if (empty(array_diff($uuids, $profile->getMatchers()->getInstanceIds()))) {
    return;
  }

  // Add the TPR linkit profile matchers to the linkit profile configuration
  // if original 'helfi' linkit profile is updated.
  foreach (helfi_tpr_config_get_linkit_profile_matchers() as $matcher) {
    $profile->getMatchers()->addInstanceId($matcher['uuid'], $matcher);
  }
  $profile->save();
}

/**
 * Gets the block configurations.
 *
 * @return array[]
 *   The block configurations.
 */
function helfi_tpr_config_get_block_configurations(string $theme) : array {
  return [
    'views_block__locked_services_locked_services_block' => [
      'block' => [
        'id' => 'views_block__locked_services_locked_services_block',
        'plugin' => 'views_block:locked_services-locked_services_block',
        'provider' => 'helfi_tpr_config',
        'settings' => [
          'id' => 'views_block:locked_services-locked_services_block',
          'label' => '',
          'provider' => 'views',
        ],
        'weight' => 1,
        'visibility' => [
          'request_path' => [
            'id' => 'request_path',
            'negate' => FALSE,
            'pages' => '/admin/content/locked-content',
          ],
        ],
      ],
      'variations' => [
        [
          'theme' => $theme,
          'region' => 'content',
        ],
        [
          'theme' => 'stark',
          'region' => 'content',
        ],
      ],
    ],
    'views_block__locked_units_locked_units_block' => [
      'block' => [
        'id' => 'views_block__locked_units_locked_units_block',
        'plugin' => 'views_block:locked_units-locked_units_block',
        'provider' => 'helfi_tpr_config',
        'settings' => [
          'id' => 'views_block:locked_units-locked_units_block',
          'label' => '',
          'provider' => 'views',
        ],
        'weight' => 2,
        'visibility' => [
          'request_path' => [
            'id' => 'request_path',
            'negate' => FALSE,
            'pages' => '/admin/content/locked-content',
          ],
        ],
      ],
      'variations' => [
        [
          'theme' => $theme,
          'region' => 'content',
        ],
        [
          'theme' => 'stark',
          'region' => 'content',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function helfi_tpr_config_theme() : array {
  return [
    'tpr_errand_service_detail' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'tpr_errand_service_detail_link' => [
      'variables' => [
        'title' => NULL,
        'links' => NULL,
      ],
    ],
    'tpr_unit_contact_information' => [
      'render element' => 'elements',
    ],
    'tpr_unit_lower_content' => [
      'render element' => 'elements',
    ],
    'tpr_service_important_links' => [
      'render element' => 'elements',
    ],
    'tpr_service_lower_content' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for tpr_unit_contact_information templates.
 *
 * Default template: tpr-unit-contact-information.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_unit_contact_information(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_unit'])) {
    $entity = $variables['entity'] = $variables['elements']['#tpr_unit'];

    // Get 'show_www' field value and pass it to the template.
    $show_www = $variables['entity']->get('show_www')->value;
    $variables['show_www'] = boolval($show_www);

    // Convert email link to Url object and set as variable for the template.
    if (!$entity->email->isEmpty()) {
      $variables['unit_email_link'] = Url::fromUri('mailto:' . $entity->email->value);
    }
  }
}

/**
 * Prepares variables for tpr_unit_lower_content templates.
 *
 * Default template: tpr-unit-lower-content.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_unit_lower_content(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_unit'])) {
    $variables['entity'] = $variables['elements']['#tpr_unit'];
  }
}

/**
 * Prepares variables for tpr_service_important_links templates.
 *
 * Default template: tpr-service-important-links.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_service_important_links(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_service'])) {
    $variables['entity'] = $variables['elements']['#tpr_service'];
  }
}

/**
 * Prepares variables for tpr_service_lower_content templates.
 *
 * Default template: tpr-service-lower-content.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_service_lower_content(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_service'])) {
    $variables['entity'] = $variables['elements']['#tpr_service'];
    // Get 'hide_service_points' field value and pass it to the template.
    $hide_service_points = $variables['entity']->get('hide_service_points')->value;
    $variables['hide_service_points'] = boolval($hide_service_points);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_tpr_config_form_tpr_unit_form_alter(&$form, &$form_state, $form_id): void {
  $form['field_phone_label']['#states'] = [
    'visible' => [
      ':input[name="field_phone_with_contacts[value]"]' => ['checked' => TRUE],
    ],
  ];

  // Required state must the widget rather than the form element.
  $form['field_phone_label']['widget'][0]['value']['#states'] = [
    'required' => [
      ':input[name="field_phone_with_contacts[value]"]' => ['checked' => TRUE],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_tpr_config_form_views_exposed_form_alter(&$form, $form_state) : void {
  // Setting high school search form autocompletes to off so that when
  // users returning to the form won't see their previous selections
  // and think that the results match to those because they don't.
  if (str_starts_with($form['#id'], 'views-exposed-form-high-school-search-block')) {
    $form['#attributes']['autocomplete'] = 'off';
    $form['emphasis']['#attributes']['autocomplete'] = 'off';
    $form['mission']['#attributes']['autocomplete'] = 'off';
    $form['type']['#attributes']['autocomplete'] = 'off';
  }

  // Handle only Unit search view form at this point.
  if (!str_starts_with($form['#id'], 'views-exposed-form-unit-search-block')) {
    return;
  }

  // Get view from form state.
  $view = $form_state->getStorage()['view'];
  [, $paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }

  if ($paragraph->hasField('field_unit_search_meta_button') && isset($paragraph->get('field_unit_search_meta_button')->value)) {
    $form['actions']['submit']['#value'] = $paragraph
      ->get('field_unit_search_meta_button')
      ->value;
  }

  if ($paragraph->hasField('field_unit_search_meta_label')) {
    $form['#info']['filter-combine']['label'] = $paragraph
      ->get('field_unit_search_meta_label')
      ->value;
  }

  if ($paragraph->hasField('field_unit_search_meta_placehold')) {
    $form['unit_search']['#attributes']['placeholder'] = $paragraph
      ->get('field_unit_search_meta_placehold')
      ->value;
  }

  if ($paragraph->hasField('field_unit_search_meta_desc')) {
    $form['#info']['filter-combine']['description'] = $paragraph
      ->get('field_unit_search_meta_desc')
      ->value;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function helfi_tpr_config_entity_base_field_info(EntityTypeInterface $entity_type) : array {
  $fields = [];

  if ($entity_type->id() === 'tpr_service') {
    $fields['hide_service_points'] = BaseFieldDefinition::create('boolean')
      ->setLabel(new TranslatableMarkup('Hide service units listing'))
      ->setDescription(new TranslatableMarkup('Select this if you link from the page to a filter search or another listing.'))
      ->setTranslatable(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }
  if ($entity_type->id() === 'tpr_unit') {
    $fields['unit_picture_caption'] = BaseFieldDefinition::create('string_long')
      ->setTranslatable(TRUE)
      ->setRevisionable(FALSE)
      ->setLabel(new TranslatableMarkup('Caption'))
      ->setDisplayOptions('form', [
        'weight' => 5,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSetting('allowed_formats', [0 => 'plain_text']);

    $fields['enrich_description'] = BaseFieldDefinition::create('text_with_summary')
      ->setTranslatable(TRUE)
      ->setRevisionable(FALSE)
      ->setLabel(new TranslatableMarkup('Long description (replacing missing information)'))
      ->setDescription(new TranslatableMarkup('Note! The content is displayed on the website only if the long description is missing from the data source.'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSetting('allowed_formats', [0 => 'plain_text']);
  }
  return $fields;
}
