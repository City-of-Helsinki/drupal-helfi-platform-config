<?php

/**
 * @file
 * Contains installation logic for HELfi TPR config module.
 */

declare(strict_types=1);

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\linkit\Entity\Profile;

/**
 * Grants required permissions.
 */
function helfi_tpr_config_grant_permissions() : void {
  $permissions = [
    'anonymous' => [
      'view tpr_service',
      'view tpr_unit',
    ],
    'authenticated' => [
      'view tpr_service',
      'view tpr_unit',
    ],
    'admin' => [
      'access tpr_service overview',
      'access tpr_unit overview',
      'administer tpr_service',
      'administer tpr_unit',
      'revert all tpr_service revisions',
      'revert all tpr_unit revisions',
      'translate tpr_errand_service',
      'translate tpr_service',
      'translate tpr_service_channel',
      'translate tpr_unit',
      'update any tpr_service',
      'update any tpr_unit',
      'update own tpr_service',
      'update own tpr_unit',
      'view all tpr_service revisions',
      'view all tpr_unit revisions',
      'view unpublished tpr_errand_service',
      'view unpublished tpr_service',
      'view unpublished tpr_service_channel',
      'view unpublished tpr_unit',
      // @views_bulk_edit.
      'use views bulk edit',
    ],
    'content_producer' => [
      'access tpr_service overview',
      'access tpr_unit overview',
      'translate tpr_errand_service',
      'translate tpr_service',
      'translate tpr_service_channel',
      'translate tpr_unit',
      'update any tpr_service',
      'update any tpr_unit',
      'update own tpr_service',
      'update own tpr_unit',
      'view all tpr_service revisions',
      'view all tpr_unit revisions',
      'view unpublished tpr_errand_service',
      'view unpublished tpr_service',
      'view unpublished tpr_service_channel',
      'view unpublished tpr_unit',
    ],
    'editor' => [
      'access tpr_service overview',
      'access tpr_unit overview',
      'revert all tpr_service revisions',
      'revert all tpr_unit revisions',
      'translate tpr_errand_service',
      'translate tpr_service',
      'translate tpr_service_channel',
      'translate tpr_unit',
      'update any tpr_service',
      'update any tpr_unit',
      'update own tpr_service',
      'update own tpr_unit',
      'view all tpr_service revisions',
      'view all tpr_unit revisions',
      'view unpublished tpr_errand_service',
      'view unpublished tpr_service',
      'view unpublished tpr_service_channel',
      'view unpublished tpr_unit',
    ],
    'read_only' => [
      'view unpublished tpr_errand_service',
      'view unpublished tpr_service',
      'view unpublished tpr_service_channel',
      'view unpublished tpr_unit',
    ],
  ];
  helfi_platform_config_grant_permissions($permissions);
}

/**
 * Install metatag configurations manually.
 */
function helfi_tpr_config_install_metatag_settings(): void {
  $entity_type_groups = [
    'tpr_service' => [
      'tpr_service' => [
        'basic' => 'basic',
        'open_graph' => 'open_graph',
        'twitter_cards' => 'twitter_cards',
      ],
    ],
    'tpr_unit' => [
      'tpr_unit' => [
        'basic' => 'basic',
        'open_graph' => 'open_graph',
        'twitter_cards' => 'twitter_cards',
      ],
    ],
  ];

  $config_factory = \Drupal::configFactory();
  $metatag_settings = $config_factory->getEditable('metatag.settings');
  $existing_groups = $metatag_settings->get('entity_type_groups');
  if (is_array($existing_groups)) {
    $entity_type_groups = array_merge($existing_groups, $entity_type_groups);
  }
  $metatag_settings->set('entity_type_groups', $entity_type_groups)->save();
}

/**
 * Implements hook_install().
 */
function helfi_tpr_config_install($is_syncing) : void {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if ($is_syncing) {
    return;
  }

  helfi_tpr_config_grant_permissions();

  // Add unit and service to linkit profile.
  if ($profile = Profile::load('helfi')) {
    foreach (helfi_tpr_config_get_linkit_profile_matchers() as $matcher) {
      $profile->getMatchers()->addInstanceId($matcher['uuid'], $matcher);
    }
    $profile->save();
  }

  $config_factory = Drupal::configFactory();
  $module_handler = Drupal::moduleHandler();

  // Add unit and service to simple sitemap settings.
  if ($module_handler->moduleExists('simple_sitemap')) {
    $sitemap_settings = $config_factory->getEditable('simple_sitemap.settings');
    $sitemap_config = $sitemap_settings->get('enabled_entity_types');
    $sitemap_config[] = 'tpr_service';
    $sitemap_config[] = 'tpr_unit';
    $sitemap_settings->set('enabled_entity_types', $sitemap_config)->save();
  }

  // Add unit and service to pathauto settings.
  if ($module_handler->moduleExists('pathauto')) {
    $pathauto_settings = $config_factory->getEditable('pathauto.settings');
    $pathauto_config = $pathauto_settings->get('enabled_entity_types');
    $pathauto_config[] = 'tpr_service';
    $pathauto_config[] = 'tpr_unit';
    $pathauto_settings->set('enabled_entity_types', $pathauto_config)->save();
  }

  // Add unit and service to content lock settings.
  if ($module_handler->moduleExists('content_lock')) {
    $types = [
      'tpr_service' => ['*' => '*'],
      'tpr_unit' => ['*' => '*'],
    ];
    $config_factory = \Drupal::configFactory();
    $content_lock_settings = $config_factory->getEditable('content_lock.settings');
    $content_lock_config = $content_lock_settings->get('types');
    $content_lock_config = array_merge($content_lock_config, $types);
    $content_lock_settings->set('types', $content_lock_config)->save();
  }

  // Install metatag settings manually as customizations will be overridden
  // during default content installation.
  if ($module_handler->moduleExists('metatag')) {
    helfi_tpr_config_install_metatag_settings();
  }
}

/**
 * UHF-8099 Update field_group translations for the unit search paragraph.
 */
function helfi_tpr_config_update_9035(): void {
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * Remove SOTE specific configuration. Double-check configuration updates.
 */
function helfi_tpr_config_update_9036(): void {
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8479 Update standard & landing page to include service_list_search.
 */
function helfi_tpr_config_update_9037(): void {
  helfi_platform_config_update_paragraph_target_types();
}

/**
 * UHF-8196 Update unit and service views to show unpublished entities.
 */
function helfi_tpr_config_update_9038(): void {
  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8532 Update the "Open larger map" text on maps.
 */
function helfi_tpr_config_update_9039(): void {
  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8595 Update after reverting unit display configs.
 */
function helfi_tpr_config_update_9040(): void {
  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8676 Update tpr_service to include multiple new paragraphs.
 */
function helfi_tpr_config_update_9041(): void {
  helfi_platform_config_update_paragraph_target_types();
}

/**
 * UHF-8770 tpr_service to include two new paragraphs.
 */
function helfi_tpr_config_update_9042(): void {
  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8717: Add a field to tpr_service and re-import configs.
 */
function helfi_tpr_config_update_9043() : void {
  $fields = [];
  $fields['hide_service_points'] = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('Hide service units listing'))
    ->setDescription(new TranslatableMarkup('Select this if you link from the page to a filter search or another listing.'))
    ->setTranslatable(TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr_config', $field);
  }

  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8838 Update services list views.
 */
function helfi_tpr_config_update_9044(): void {
  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8938: Add a field to tpr_unit and re-import configs.
 */
function helfi_tpr_config_update_9045() : void {
  $unit_picture_caption = BaseFieldDefinition::create('string_long')
    ->setTranslatable(TRUE)
    ->setRevisionable(FALSE)
    ->setLabel(new TranslatableMarkup('Caption'))
    ->setDisplayOptions('form', [
      'weight' => 5,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('unit_picture_caption', 'tpr_unit', 'helfi_tpr_config', $unit_picture_caption);

  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8932 Add fields coordinates to display.
 */
function helfi_tpr_config_update_9046(): void {
  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8939: Make all new TPR unit fields visible in form and display.
 */
function helfi_tpr_config_update_9047(): void {
  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8937: Configs for table of contents field on TPR units.
 */
function helfi_tpr_config_update_9048(): void {
  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-9113: Remove invalid permissions.
 */
function helfi_tpr_config_update_9049(): void {
  helfi_platform_config_remove_permissions_from_all_roles([
    'update tpr_service',
    'update tpr_unit',
  ]);
}

/**
 * UHF-9159: Subgroup field display configs.
 */
function helfi_tpr_config_update_9050(): void {
  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-8936 Update tpr_unit to include map and text paragraphs in lower content.
 */
function helfi_tpr_config_update_9051(): void {
  helfi_platform_config_update_paragraph_target_types();
}

/**
 * UHF-9249: Add a long description field for filling missing data.
 */
function helfi_tpr_config_update_9052() : void {
  $enrich_description = BaseFieldDefinition::create('text_with_summary')
    ->setTranslatable(TRUE)
    ->setRevisionable(FALSE)
    ->setLabel(new TranslatableMarkup('Long description (replacing missing information'))
    ->setDescription(new TranslatableMarkup('Note! The content is displayed on the website only if the long description is missing from the data source.'))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setSetting('allowed_formats', [0 => 'plain_text']);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('enrich_description', 'tpr_unit', 'helfi_tpr_config', $enrich_description);

  // Re-import 'helfi_tpr_config' configuration.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-9101 Add "Unit contact card" to standard page and landing page.
 */
function helfi_tpr_config_update_9069(): void {
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-9509 Change unit teaser and wide_teaser image style.
 */
function helfi_tpr_config_update_9071(): void {
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_tpr_config');
}

/**
 * UHF-10555: Removed unused TPR-unit display.
 */
function helfi_tpr_config_update_9072(): void {
  $config_factory = Drupal::configFactory();
  $config_factory->getEditable('core.entity_view_display.tpr_unit.tpr_unit.wide_teaser')->delete();
}
