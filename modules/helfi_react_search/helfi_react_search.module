<?php

/**
 * @file
 * Contains hooks for helfi_react_search module.
 */

declare(strict_types=1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\helfi_react_search\Entity\EventList;
use Drupal\helfi_react_search\Enum\CourseCategory;
use Drupal\helfi_react_search\Enum\EventCategory;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function helfi_react_search_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['paragraph']['event_list'])) {
    $bundles['paragraph']['event_list']['class'] = EventList::class;
  }
}

/**
 * Event list type allowed values.
 */
function helfi_react_search_event_list_allowed_types(): array {
  return [
    'events' => new TranslatableMarkup('Events', [], ['context' => 'helfi_react_search']),
    'hobbies' => new TranslatableMarkup('Hobbies', [], ['context' => 'helfi_react_search']),
    'events_and_hobbies' => new TranslatableMarkup('Events and hobbies', [], ['context' => 'helfi_react_search']),
  ];
}

/**
 * Event count dropdown selectable values.
 *
 * @return int[]
 *   Values to select.
 */
function helfi_react_search_event_list_allowed_values_function(): array {
  return [
    3 => 3,
    5 => 5,
    10 => 10,
  ];
}

/**
 * Event categories dropdown selectable values.
 */
function helfi_react_search_event_list_allowed_event_categories(): array {
  $values = [];

  foreach (EventCategory::cases() as $category) {
    $values[$category->value] = $category->translation();
  }

  return $values;
}

/**
 * Hobby categories dropdown selectable values.
 */
function helfi_react_search_event_list_allowed_hobby_categories(): array {
  $values = [];

  foreach (CourseCategory::cases() as $category) {
    $values[$category->value] = $category->translation();
  }

  return $values;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_react_search_preprocess_paragraph(array &$variables): void {
  $reactParagraphs = [
    'school_search',
    'job_search',
    'district_and_project_search',
    'ploughing_schedule',
    'health_station_search',
    'maternity_and_child_health_clini',
  ];

  $config = \Drupal::config('elastic_proxy.settings');
  $react_search_config = \Drupal::config('react_search.settings');

  if (
    isset($variables['paragraph']) &&
    in_array($variables['paragraph']->getType(), $reactParagraphs)
  ) {
    if ($proxyUrl = $config->get('elastic_proxy_url')) {
      $variables['#attached']['drupalSettings']['helfi_react_search']['elastic_proxy_url'] = $proxyUrl;
    }
    if ($sentry_dsn_react = $react_search_config->get('sentry_dsn_react')) {
      $variables['#attached']['drupalSettings']['helfi_react_search']['sentry_dsn_react'] = $sentry_dsn_react;
    }
  }
}

/**
 * Implements hook_theme().
 */
function helfi_react_search_theme(): array {
  return [
    'debug_item__search_api' => [
      'variables' => [
        'id' => NULL,
        'label' => NULL,
        'data' => [],
      ],
      'template' => 'debug-item--search-api',
    ],
  ];
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function helfi_react_search_field_widget_single_element_paragraphs_form_alter(array &$element, FormStateInterface $form_state, array $context): void {
  if (empty($element['#paragraph_type']) || $element['#paragraph_type'] != 'event_list') {
    return;
  }

  $select = fn (string $prefix) => ':input[name="' . $context['items']->getName() . '[' . $element['#delta'] . '][subform]' . $prefix . '"]';
  $states = [
    'field_event_list_category_event' => [
      'state' => 'invisible',
      'condition' => [$select('[field_event_list_type]') => ['value' => 'hobbies']],
    ],
    'field_event_list_category_hobby' => [
      'state' => 'invisible',
      'condition' => [$select('[field_event_list_type]') => ['value' => 'events']],
    ],
    'field_event_location' => [
      'state' => 'disabled',
      'condition' => [$select('[field_remote_events][value]') => ['checked' => TRUE]],
    ],
    'field_remote_events' => [
      'state' => 'disabled',
      'condition' => [$select('[field_event_location][value]') => ['checked' => TRUE]],
    ],
  ];

  foreach ($states as $field => ['state' => $state, 'condition' => $condition]) {
    $element['subform'][$field]['#states'] = [
      $state => [$condition],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_react_search_preprocess_form_element(array &$variables): void {
  if (!isset($variables['name']) || !isset($variables['description'])) {
    return;
  }

  // Remove the field_api_url description bullet list item and use
  // just the first description set in configuration files.
  if (
    str_contains($variables['name'], 'field_api_url') &&
    isset($variables['description']['content']['#items'])
  ) {
    $variables['description']['content'] = reset($variables['description']['content']['#items']);
  }
}
