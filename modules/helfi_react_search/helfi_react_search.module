<?php

/**
 * @file
 * Contains hooks for helfi_react_search module.
 */

declare(strict_types=1);

use Drupal\helfi_react_search\Entity\EventList;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function helfi_react_search_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['paragraph']['event_list'])) {
    $bundles['paragraph']['event_list']['class'] = EventList::class;
  }
}

/**
 * Event count dropdown selectable values.
 *
 * @return int[]
 *   Values to select.
 */
function helfi_react_search_event_list_allowed_values_function(): array {
  return [
    3 => 3,
    5 => 5,
    10 => 10,
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_react_search_preprocess_paragraph(array &$variables): void {
  $reactParagraphs = [
    'school_search',
    'job_search',
    'district_and_project_search',
    'ploughing_schedule',
    'health_station_search',
    'maternity_and_child_health_clini',
  ];

  $config = \Drupal::config('elastic_proxy.settings');
  $react_search_config = \Drupal::config('react_search.settings');

  if (
    isset($variables['paragraph']) &&
    in_array($variables['paragraph']->getType(), $reactParagraphs)
  ) {
    if ($proxyUrl = $config->get('elastic_proxy_url')) {
      $variables['#attached']['drupalSettings']['helfi_react_search']['elastic_proxy_url'] = $proxyUrl;
    }
    if ($sentry_dsn_react = $react_search_config->get('sentry_dsn_react')) {
      $variables['#attached']['drupalSettings']['helfi_react_search']['sentry_dsn_react'] = $sentry_dsn_react;
    }
  }
}

/**
 * Implements hook_theme().
 */
function helfi_react_search_theme(): array {
  return [
    'debug_item__search_api' => [
      'variables' => [
        'id' => NULL,
        'label' => NULL,
        'data' => [],
      ],
      'template' => 'debug-item--search-api',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_react_search_preprocess_form_element(array &$variables): void {
  if (!isset($variables['name']) || !isset($variables['description'])) {
    return;
  }

  // Remove the field_api_url description bullet list item and use
  // just the first description set in configuration files.
  if (
    str_contains($variables['name'], 'field_api_url') &&
    isset($variables['description']['content']['#items'])
  ) {
    $variables['description']['content'] = reset($variables['description']['content']['#items']);
  }
}

/**
 * Lookup tid with keyword id.
 */
function _helfi_react_search_lookup_term_tid(string $keyword_id) {
  $ids = \Drupal::entityQuery('taxonomy_term')
    ->condition('field_keyword_id', $keyword_id)
    ->range(0, 1)
    ->latestRevision()
    ->accessCheck(FALSE)
    ->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Implements hook_select2_autocomplete_matches_alter().
 */
function helfi_react_search_select2_autocomplete_matches_alter(array &$matches) {
  // Sort from shortest to longest.
  usort($matches, fn($a, $b) => strlen($a['text']) > strlen($b['text']));
}
