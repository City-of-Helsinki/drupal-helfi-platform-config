<?php

/**
 * @file
 * Contains installation tasks for helfi_react_search module.
 */

declare(strict_types=1);

use Drupal\Core\Field\EntityReferenceFieldItemList;
use Drupal\Core\Utility\UpdateException;
use Drupal\helfi_react_search\Entity\EventList;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\Event\ReindexScheduledEvent;
use Drupal\search_api\Event\SearchApiEvents;
use Drupal\taxonomy\TermInterface;
use Drupal\taxonomy\Entity\Vocabulary;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Utils;

/**
 * Remove stale event list paragraph load more field configurations.
 */
function helfi_react_search_update_9003(): void {
  $language_manager = \Drupal::languageManager();
  $default_language = $language_manager->getDefaultLanguage();
  $obsolete_configurations = [
    'field.field.paragraph.event_list.field_load_more',
    'field.storage.paragraph.field_load_more',
  ];

  // Remove original language configurations.
  $config_factory = \Drupal::configFactory();
  foreach ($obsolete_configurations as $configuration) {
    $config_factory->getEditable($configuration)->delete();

    // Remove translations.
    foreach ($language_manager->getLanguages() as $language) {
      if ($language->getId() === $default_language->getId()) {
        continue;
      }
      $language_manager->setConfigOverrideLanguage($language);
      $config_factory->getEditable($configuration)->delete();
    }
  }
  $language_manager->setConfigOverrideLanguage($default_language);

  // Make sure the configurations are correctly installed.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_react_search');
}

/**
 * Mark indexes to require reindexing.
 */
function helfi_react_search_update_9004() {
  if (!\Drupal::moduleHandler()->moduleExists('search_api')) {
    return;
  }

  $schoolsIndex = Index::load('schools');
  $healthStationsIndex = Index::load('health_stations');

  if ($healthStationsIndex) {
    // Ensure tracker works.
    $healthStationsIndex->rebuildTracker();

    // Mark index to require reindexing.
    $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
    $dispatcher->dispatch(new ReindexScheduledEvent($healthStationsIndex, TRUE), SearchApiEvents::REINDEX_SCHEDULED);
  }

  if ($schoolsIndex) {
    // Ensure tracker works.
    $schoolsIndex->rebuildTracker();

    // Mark index to require reindexing.
    $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
    $dispatcher->dispatch(new ReindexScheduledEvent($schoolsIndex, TRUE), SearchApiEvents::REINDEX_SCHEDULED);
  }

}

/**
 * Reindex job search.
 */
function helfi_react_search_update_9005() {
  if (!\Drupal::moduleHandler()->moduleExists('search_api')) {
    return;
  }

  $index = Index::load('job_listings');

  if ($index) {
    // Ensure tracker works.
    $index->rebuildTracker();

    // Mark index to require reindexing.
    $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
    $dispatcher->dispatch(new ReindexScheduledEvent($index, TRUE), SearchApiEvents::REINDEX_SCHEDULED);
  }
}

/**
 * UHF-9613: Update events list field descriptions and translation.
 */
function helfi_react_search_update_9006() : void {
  $module_installer = \Drupal::service('module_installer');
  $module_installer->install(['readonly_field_widget']);

  // Make sure the configurations are correctly installed.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_react_search');
}

/**
 * UHF-X: Fix clashing 'language' label translation.
 */
function helfi_react_search_update_9012() : void {
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_react_search');
}

/**
 * UHF-11676: Migrate data from `field_filter_keywords` to a new field.
 */
function helfi_react_search_update_9013() : void {
  $storage = \Drupal::entityTypeManager()
    ->getStorage('paragraph');

  $ids = $storage
    ->getQuery()
    ->condition('type', 'event_list')
    // Query paragraphs that have `field_filter_keywords` set.
    ->exists('field_filter_keywords')
    ->accessCheck(FALSE)
    ->execute();

  $client = \Drupal::httpClient();

  foreach ($ids as $id) {
    $paragraph = $storage->load($id);

    assert($paragraph instanceof EventList);
    $field = $paragraph->get('field_filter_keywords');
    assert($field instanceof EntityReferenceFieldItemList);

    $values = [];

    // Collect values from existing field.
    foreach ($field->referencedEntities() as $entity) {
      assert($entity instanceof TermInterface);
      $termId = $entity->get('field_keyword_id')->value;

      try {
        $response = $client
          ->request('GET', "https://api.hel.fi/linkedevents/v1/keyword/$termId/");

        /** @var object $data */
        $data = Utils::jsonDecode($response->getBody()->getContents());

        $values[] = json_encode([
          'id' => $data->id,
          'name' => $data->name,
        ]);

      }
      catch (GuzzleException $e) {
        throw new UpdateException("Failed to update $termId", previous: $e);
      }
    }

    // Update new field, clear old field & save.
    $paragraph->set('field_event_list_keywords_filter', $values);
    $paragraph->set('field_filter_keywords', NULL);
    $paragraph->save();
  }
}

/**
 * UHF-11676: Delete `field_filter_keywords` field.
 */
function helfi_react_search_update_9014() : void {
  $change = [
    'paragraph' => [
      'field_filter_keywords' => [
        'event_list',
      ],
    ],
  ];

  foreach ($change as $entityType => $fieldNames) {
    foreach ($fieldNames as $fieldName => $bundles) {
      // Delete field definition.
      foreach ($bundles as $bundle) {
        FieldConfig::loadByName($entityType, $bundle, $fieldName)?->delete();
      }

      // Delete storage config.
      FieldStorageConfig::loadByName($entityType, $fieldName)?->delete();
    }
  }
}

/**
 * UHF-11676: Delete `linked_events_keywords` taxonomy.
 */
function helfi_react_search_update_9015() : void {
  $storage = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term');

  $ids = $storage->getQuery()
    ->condition('vid', 'linked_events_keywords')
    ->accessCheck(FALSE)
    ->execute();

  foreach ($ids as $id) {
    $storage->load($id)?->delete();
  }

  Vocabulary::load('linked_events_keywords')?->delete();
}
