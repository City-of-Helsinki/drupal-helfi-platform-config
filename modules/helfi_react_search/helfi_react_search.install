<?php

/**
 * @file
 * Contains installation tasks for helfi_react_search module.
 */

declare(strict_types = 1);

use Drupal\search_api\Entity\Index;
use Drupal\search_api\Event\ReindexScheduledEvent;
use Drupal\search_api\Event\SearchApiEvents;

/**
 * Remove stale event list paragraph load more field configurations.
 */
function helfi_react_search_update_9003(): void {
  $language_manager = \Drupal::languageManager();
  $default_language = $language_manager->getDefaultLanguage();
  $obsolete_configurations = [
    'field.field.paragraph.event_list.field_load_more',
    'field.storage.paragraph.field_load_more',
  ];

  // Remove original language configurations.
  $config_factory = \Drupal::configFactory();
  foreach ($obsolete_configurations as $configuration) {
    $config_factory->getEditable($configuration)->delete();

    // Remove translations.
    foreach ($language_manager->getLanguages() as $language) {
      if ($language->getId() === $default_language->getId()) {
        continue;
      }
      $language_manager->setConfigOverrideLanguage($language);
      $config_factory->getEditable($configuration)->delete();
    }
  }
  $language_manager->setConfigOverrideLanguage($default_language);

  // Make sure the configurations are correctly installed.
  \Drupal::service('helfi_platform_config.config_update_helper')
    ->update('helfi_react_search');
}

/**
 * Mark indexes to require reindexing.
 */
function helfi_react_search_update_9004() {
  $schoolsIndex = Index::load('schools');
  $healthStationsIndex = Index::load('health_stations');

  if ($healthStationsIndex) {
    // Ensure tracker works.
    $healthStationsIndex->rebuildTracker();

    // Mark index to require reindexing.
    $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
    $dispatcher->dispatch(new ReindexScheduledEvent($healthStationsIndex, TRUE), SearchApiEvents::REINDEX_SCHEDULED);
  }

  if ($schoolsIndex) {
    // Ensure tracker works.
    $schoolsIndex->rebuildTracker();

    // Mark index to require reindexing.
    $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
    $dispatcher->dispatch(new ReindexScheduledEvent($schoolsIndex, TRUE), SearchApiEvents::REINDEX_SCHEDULED);
  }

}
