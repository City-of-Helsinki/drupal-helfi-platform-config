<?php

/**
 * @file
 * Contains HELfi media remote video alterations.
 */

declare(strict_types=1);

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\helfi_media_remote_video\Entity\RemoteVideo;
use Drupal\helfi_media_remote_video\Services\UrlResolver;
use Drupal\media\OEmbed\Resource;
use Drupal\media\OEmbed\ResourceException;
use Drupal\media\OEmbed\UrlResolverInterface;

/**
 * Implements hook_media_source_info_alter().
 */
function helfi_media_remote_video_media_source_info_alter(array &$sources): void {
  // Add Helsinki-kanava (Icareus Suite) as an available provider.
  $sources['oembed:video']['providers'][] = 'Icareus Suite';
}

/**
 * Implements hook_form_alter().
 */
function helfi_media_remote_video_form_alter(&$form, &$form_state, $form_id): void {
  $forms = [
    'media_remote_video_add_form',
    'media_remote_video_edit_form',
    'media_library_add_form_oembed',
  ];

  // Handle input URLs in form after build.
  if (in_array($form_id, $forms)) {
    $form['#after_build'][] = '_helfi_media_remote_video_remote_video_validate';
    $form['container']['submit']['#validate'][] = '_helfi_media_remote_video_remote_video_provider_validation';

    // Switch provider names to more understandable format as the true provider
    // for Helsinki-kanava is Icareus Suite.
    $providers = ['@providers' => 'YouTube, Helsinki-kanava'];

    if (isset($form['field_media_oembed_video']['widget'][0]['value']['#description'])) {
      $form['field_media_oembed_video']['widget'][0]['value']['#description'] = t('Allowed providers: @providers.', $providers);
    }

    if (isset($form['container']['url']['#description'])) {
      $form['container']['url']['#description'] = t('Allowed providers: @providers.', $providers);
    }
  }
}

/**
 * Check that the video provider is allowed.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return array
 *   Returns the form.
 */
function _helfi_media_remote_video_remote_video_provider_validation(array $form, FormStateInterface &$form_state): array {
  // No need for validation if user input is empty.
  if (empty($form_state->getUserInput())) {
    return $form;
  }

  // Skip if OEmbed providers module doesn't exist.
  if (!Drupal::moduleHandler()->moduleExists('oembed_providers')) {
    return $form;
  }

  $config = \Drupal::configFactory()->getEditable('media.type.remote_video');
  $config_data = $config->getRawData();

  if (isset($config_data['source_configuration']['providers'])) {
    $user_input = $form_state->getUserInput();
    $allowed_providers = $config_data['source_configuration']['providers'];
    $url_resolver = Drupal::service('media.oembed.url_resolver');

    try {
      $provider = $url_resolver->getProviderByUrl($user_input['url']);
    }
    catch (ResourceException $e) {
      return $form;
    }

    $provider_name = $provider->getName();

    if (!in_array($provider_name, $allowed_providers)) {
      $form_state->setErrorByName('url', t('@provider is not an allowed video provider.', [
        '@provider' => $provider_name,
      ]));
    }
  }

  return $form;
}

/**
 * Handle remote video URLs.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return array
 *   Returns the form.
 */
function _helfi_media_remote_video_remote_video_validate(array $form, FormStateInterface &$form_state): array {
  $oembed_video_field = 'field_media_oembed_video';

  // Alter URL only if user has input data.
  if (empty($form_state->getUserInput())) {
    return $form;
  }

  $user_input = $form_state->getUserInput();
  $video_url = FALSE;
  $skip_url_validation = FALSE;

  // Helsinki-kanava video can be added via media library or as a new media
  // entity. Handle the URL in both cases.
  if (
    array_key_exists($oembed_video_field, $user_input) &&
    !empty($user_input[$oembed_video_field][0]['value'])
  ) {
    $video_url = &$user_input[$oembed_video_field][0]['value'];
  }
  elseif (
    $user_input['form_id'] === 'media_library_add_form_oembed' &&
    !empty($user_input['url'])
  ) {
    $oembed_video_field = 'url';
    $video_url = &$user_input[$oembed_video_field];
    $skip_url_validation = TRUE;
  }

  // Convert the video url if needed.
  if ($video_url) {
    try {
      /** @var \Drupal\helfi_media_remote_video\Services\UrlResolver $url_resolver */
      $url_resolver = \Drupal::service('helfi_media_remote_video.url_resolver');
      $converted_url = $url_resolver->convertUrl($video_url);
    }
    catch (ResourceException $e) {
      $message = new TranslatableMarkup('The video URL is invalid. Please ensure it is correct and belongs to one of the supported providers: Helsinki Kanava or YouTube. The URL should link directly to the video page (the page where the video can be watched).', [], ['context' => 'helfi media remote video']);
      $form_state->setErrorByName('url', $message);
      return $form;
    }
    catch (Exception $e) {
      $form_state->setErrorByName('url', $e->getMessage());
      return $form;
    }

    if ($converted_url) {
      $video_url = $converted_url;
      $form_state->setUserInput($user_input);
      $form_state->setValue($oembed_video_field, $user_input[$oembed_video_field]);

      // Do not validate the media library form from this point forward.
      // The user inserted URL is cached by media library form and the Oembed
      // provider would try to validate the unconverted URL. Set the form
      // validation complete to avoid this.
      if ($skip_url_validation) {
        $form_state->setValidationComplete();
      }
    }
  }

  return $form;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function helfi_media_remote_video_theme_suggestions_media_oembed_iframe_alter(array &$suggestions, array $variables): void {
  // Add theme hook suggestions for the oembed providers.
  if (
    isset($variables['resource']) &&
    $variables['resource'] instanceof Resource &&
    !empty($variables['resource']->getProvider()->getName())
  ) {
    $provider = Html::getClass($variables['resource']->getProvider()->getName());
    $suggestions[] = 'media_oembed_iframe__' . str_replace('-', '_', $provider);
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function helfi_media_remote_video_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['media']['remote_video'])) {
    $bundles['media']['remote_video']['class'] = RemoteVideo::class;
  }
}
