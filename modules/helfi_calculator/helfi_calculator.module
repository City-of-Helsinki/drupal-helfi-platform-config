<?php

/**
 * @file
 * Calculators.
 */

declare(strict_types=1);

use Drupal\helfi_calculator\Entity\Calculator;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function helfi_calculator_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['paragraph']['calculator'])) {
    $bundles['paragraph']['calculator']['class'] = Calculator::class;
  }
}

/**
 * Implements hook_theme().
 */
function helfi_calculator_theme() {
  return [
    'paragraph__calculator' => [
      'base hook' => 'paragraph',
      'variables' => [
        'paragraph' => NULL,
        'view_mode' => 'full',
        'is_active' => FALSE,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph__calculator().
 */
function helfi_calculator_preprocess_paragraph__calculator(array &$variables): void {
  $paragraph = $variables['paragraph'];

  if (!$paragraph instanceof Calculator) {
    return;
  }

  // Load all calculators and attach the configuration data to drupalSettings.
  $calculators = Drupal::config('helfi_calculator.settings')->get('calculators') ?? [];
  $calculator_settings = $calculators[$paragraph->getCalculatorName()] ?? NULL;

  foreach ($calculators as $calculator => $data) {
    $variables['#attached']['drupalSettings']['helfiCalculator'][$calculator] = $data['json'];
  }

  // Check if the current calculator is active and return if not.
  $variables['is_active'] = !empty($calculator_settings['active']);
  if (!$variables['is_active']) {
    return;
  }

  // Attach base libraries.
  foreach ($paragraph->getBaseLibraries() as $library) {
    $variables['#attached']['library'][] = $library;
  }

  // Attach the active calculator library and settings.
  $variables['#attached']['library'][] = $paragraph->getCalculatorLibraryName();
  $variables['#attached']['drupalSettings']['helfiCalculator'][$paragraph->getCalculatorInstanceId()] = [
    'id' => $paragraph->getCalculatorInstanceId(),
    'type' => $paragraph->getCalculatorName(),
    'data' => $calculator_settings['json'] ?? '{}',
  ];

  // Set id for Twig.
  $variables['helfi_calculator_id'] = $paragraph->getCalculatorInstanceId();

  // Cache invalidation on settings change.
  $variables['#cache']['tags'][] = 'config:helfi_calculator.settings';
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_calculator_helfi_paragraph_types(): array {
  $types = [
    'field_content' => [
      'calculator' => 19,
    ],
    'field_lower_content' => [
      'calculator' => 20,
    ],
  ];

  $enabled = [];
  foreach ($types as $field => $paragraphTypes) {
    foreach ($paragraphTypes as $paragraphType => $weight) {
      $enabled[] = new ParagraphTypeCollection('node', 'page', $field, $paragraphType, $weight);
    }
  }
  return $enabled;
}

/**
 * Implements hook_config_ignore_settings_alter().
 */
function helfi_calculator_config_ignore_settings_alter(array &$settings): void {
  if (!in_array('helfi_calculator.settings', $settings)) {
    $settings[] = 'helfi_calculator.settings';
  }
}
