<?php

/**
 * @file
 * Calculators.
 */

declare(strict_types=1);

use Drupal\helfi_calculator\Entity\Calculator;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function helfi_calculator_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['paragraph']['calculator'])) {
    $bundles['paragraph']['calculator']['class'] = Chart::class;
  }
}

/**
 * Implements hook_theme().
 */
function helfi_calculator_theme() {
  return [
    'paragraph__calculator' => [
      'base hook' => 'paragraph',
      'variables' => [
        'paragraph' => NULL,
        'view_mode' => 'full',
        'is_active' => FALSE,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph__calculator().
 */
function helfi_calculator_preprocess_paragraph__calculator(array &$variables): void {
  $paragraph = $variables['paragraph'];

  if (!$paragraph->hasField('field_calculator') || $paragraph->get('field_calculator')->isEmpty()) {
    return;
  }

  // Map library names to JS filenames.
  $valid_calculators = [
    'home_care_service_voucher' => 'homeCareServiceVoucher',
    'home_care_client_fee' => 'homeCareClientFee',
    'early_childhood_education_fee' => 'earlyChildhoodEducationFee',
    'continuous_housing_service_voucher' => 'continuousHousingServiceVoucher',
    'families_home_services_client_fee' => 'familiesHomeServicesClientFee',
    'helsinki_benefit_amount_estimate' => 'helsinkiBenefitAmountEstimate',
  ];

  // Get the calculator name from the field.
  $calculator_name = $paragraph->get('field_calculator')->value;

  // Check if the calculator name is valid, return if not.
  if (isset($valid_calculators[$calculator_name])) {
    $js_function_name = $valid_calculators[$calculator_name];
  }
  else {
    $variables['is_active'] = FALSE;
    return;
  }

  // Attach the specific calculator library and necessary config.
  if ($js_function_name && $calculator_name) {
    $variables['#attached']['library'][] = "helfi_calculator/$calculator_name";
    $variables['attributes']['id'] = "helfi-calc-{$paragraph->id()}";

    // Get calculator settings from config.
    $config = \Drupal::config('helfi_calculator.settings');
    $calculator_settings = $config->get('calculators', []);

    // Pass necessary settings to the frontend.
    $variables['#attached']['drupalSettings']['helfiCalculator'][$paragraph->id()] = [
      'calculatorType' => $js_function_name,
      'settings' => $calculator_settings[$calculator_name] ?? [],
    ];

    // Set the calculator as active.
    $variables['is_active'] = TRUE;
  } else {
    $variables['is_active'] = FALSE;
  }
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_calculator_helfi_paragraph_types(): array {
  $types = [
    'field_content' => [
      'calculator' => 19,
    ],
    'field_lower_content' => [
      'calculator' => 20,
    ],
  ];

  $enabled = [];
  foreach ($types as $field => $paragraphTypes) {
    foreach ($paragraphTypes as $paragraphType => $weight) {
      $enabled[] = new ParagraphTypeCollection('node', 'page', $field, $paragraphType, $weight);
    }
  }
  return $enabled;
}

/**
 * Implements hook_config_ignore_settings_alter().
 */
function helfi_calculator_config_ignore_settings_alter(array &$settings): void {
  if (!in_array('helfi_calculator.settings', $settings)) {
    $settings[] = 'helfi_calculator.settings';
  }
}
