!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.CKEditor5=n():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.helfiLanguageSelector=n())}(self,(()=>(()=>{var __webpack_modules__={"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/helfiLanguageSelector.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ HelfiLanguageSelector)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _helfiLanguageSelectorEditing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helfiLanguageSelectorEditing */ "./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/helfiLanguageSelectorEditing.js");\n/* harmony import */ var _helfiLanguageSelectorUi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helfiLanguageSelectorUi */ "./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/helfiLanguageSelectorUi.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n// The contents of helfiLanguageSelectorUI and helfiLanguageSelector editing\n// could be included in this file, but it is recommended to separate\n// these concerns in different files.\n\n\n\n\nclass HelfiLanguageSelector extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  // Note that helfiLanguageSelectorEditing and helfiLanguageSelectorUI also\n  // extend `Plugin`, but these are not seen as individual plugins by CKEditor5.\n  // CKEditor 5 will only discover the plugins explicitly exported in index.js.\n  static get requires() {\n    return [\n      _helfiLanguageSelectorEditing__WEBPACK_IMPORTED_MODULE_1__["default"],\n      _helfiLanguageSelectorUi__WEBPACK_IMPORTED_MODULE_2__["default"]\n    ];\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/helfiLanguageSelector.js?')},"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/helfiLanguageSelectorEditing.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HelfiLanguageSelectorEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/utils */ \"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/utils/utils.js\");\n/* harmony import */ var _ui_helfiLanguageSelectorCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/helfiLanguageSelectorCommand */ \"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/ui/helfiLanguageSelectorCommand.js\");\n/**\n * @file A view to model and model to view converters for helfiLanguageSelector.\n */\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * This file has the logic for defining the helfiLanguageSelector model,\n * and for how it is converted to standard DOM markup.\n */\nclass HelfiLanguageSelectorEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget ];\n  }\n\n  /**\n   * @inheritdoc\n   */\n  static get pluginName() {\n    return 'HelfiLanguageSelectorEditing';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const { editor } = this;\n    const { conversion } = this.editor;\n\n    // Add helfiLanguageSelector model as an allowed attribute for '$text' nodes.\n    editor.model.schema.extend('$text', { allowAttributes: 'helfiLanguageSelector' });\n    editor.model.schema.setAttributeProperties('helfiLanguageSelector', {\n      copyOnEnter: true\n    });\n\n    // Define 'upcast' converter for helfiLanguageSelector.\n    conversion.for('upcast').elementToAttribute({\n      model: {\n        key: 'helfiLanguageSelector',\n        value: (viewElement) => {\n          const languageCode = viewElement.getAttribute('lang');\n          const textDirection = viewElement.getAttribute('dir');\n          return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.stringifyLanguageAttribute)(languageCode, textDirection);\n        }\n      },\n      view: {\n        name: 'span',\n        attributes: { lang: /[\\s\\S]+/ }\n      }\n    });\n\n    // Define 'downcast' converter for helfiLanguageSelector.\n    conversion.for('downcast').attributeToElement({\n      model: 'helfiLanguageSelector',\n      view: (attributeValue, { writer }, data) => {\n\n        if (!attributeValue) {\n          return;\n        }\n\n        if (!data.item.is('$textProxy') && !data.item.is('documentSelection')) {\n          return;\n        }\n\n        const { languageCode, textDirection } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.parseLanguageAttribute)(attributeValue);\n\n        return writer.createAttributeElement('span', {\n          lang: languageCode,\n          dir: textDirection\n        });\n      }\n    });\n\n    // Add helfiLanguageSelectorCommand.\n    editor.commands.add(\n      'helfiLanguageSelectorCommand',\n      new _ui_helfiLanguageSelectorCommand__WEBPACK_IMPORTED_MODULE_3__[\"default\"](editor),\n    );\n\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/helfiLanguageSelectorEditing.js?")},"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/helfiLanguageSelectorUi.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HelfiLanguageSelectorUi)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var _icons_helfiLanguageSelector_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../icons/helfiLanguageSelector.svg */ \"./assets/icons/helfiLanguageSelector.svg\");\n/* harmony import */ var _ui_languageSelectListView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui/languageSelectListView */ \"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/ui/languageSelectListView.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/utils */ \"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/utils/utils.js\");\n/* harmony import */ var _utils_translationWarmer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/translationWarmer */ \"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/utils/translationWarmer.js\");\n/**\n * @file registers the helfiLanguageSelectorUi plugin and binds functionality to it.\n */\n\n\n\n\n\n\n\n\n/**\n * Helper function for getting the current active language code.\n *\n * @param {string} languageAttribute The language attribute.\n * @return {*} Returns the language code if found.\n */\nfunction getCommandValue(languageAttribute) {\n  if (!languageAttribute) { return; }\n  const { languageCode } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.parseLanguageAttribute)(languageAttribute);\n  if (languageCode) {\n    return languageCode;\n  }\n}\n\nclass HelfiLanguageSelectorUi extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n  constructor(editor) {\n    super(editor);\n    this.editor = editor;\n    this.advancedChildren = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.Collection();\n    this.helfiLanguageSelectorConfig = this.editor.config.get('helfiLanguageSelector');\n    this.languageList = this.helfiLanguageSelectorConfig?.language_list;\n    this.updateSelection = false;\n    (0,_utils_translationWarmer__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(editor.locale);\n  }\n\n  init() {\n    const { editor } = this;\n    const { t } = editor.locale;\n    const removeTitle = t('Remove language from text');\n    const defaultTitle = t('Select language');\n\n    // Register the helfiLanguageSelector toolbar button.\n    editor.ui.componentFactory.add('helfiLanguageSelector', (locale) => {\n\n      // Create the dropdown view.\n      const dropdownView = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale);\n\n      // Create the toolbar button.\n      dropdownView.buttonView.set({\n        label: defaultTitle,\n        icon: _icons_helfiLanguageSelector_svg__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        tooltip: true,\n      });\n\n      // Add class for the dropdown view.\n      dropdownView.extendTemplate({\n        attributes: {\n          class: [ 'helfi-language-selector']\n        }\n      });\n\n      // Add custom classes for the dropdown panel view.\n      dropdownView.panelView.extendTemplate({\n        attributes: {\n          class: [\n            'helfi-language-selector__dropdown-panel',\n            'ck-reset_all-excluded',\n          ]\n        }\n      });\n\n      let selectListView;\n      let tomSelect;\n      const languageCommand = this.editor.commands.get('helfiLanguageSelectorCommand');\n\n      dropdownView.on('change:isOpen', () => {\n\n        if (tomSelect?.options) {\n          // Set current language as the selected language in tomSelect.\n          if (\n            languageCommand.value &&\n            !tomSelect.items.includes(getCommandValue(languageCommand.value))\n          ) {\n            tomSelect.setValue([ getCommandValue(languageCommand.value) ], true);\n          }\n          // Clear the selections in case there is no current language.\n          else if (!languageCommand.value && tomSelect.items.length > 0) {\n            tomSelect.clear();\n          }\n        }\n\n        // No need to reinitialize the select list view.\n        if (selectListView) {\n          return;\n        }\n\n        // Create the select list view and add it to the dropdown panel view.\n        selectListView = new _ui_languageSelectListView__WEBPACK_IMPORTED_MODULE_4__[\"default\"](locale, this.editor);\n        dropdownView.panelView.children.add(selectListView);\n        dropdownView.panelPosition = 'sw';\n\n        // Delegate the execute command from selectListView to dropdownView.\n        selectListView.delegate('execute').to(dropdownView);\n\n        // The template for the Tom Select options and selected items.\n        const renderTemplate = (item, escape) => `\n          <span style=\"align-items: center; display: flex; height: 100%;\">\n            <span class=\"hel-icon--name\" style=\"margin-left: 8px;\">${escape(item.title)}</span>\n          </span>\n        `;\n\n        // Settings for the Tom Select.\n        const settings = {\n          plugins: {\n            remove_button: {\n              title: removeTitle,\n            }\n          },\n          valueField: 'languageCode',\n          labelField: 'title',\n          searchField: 'title',\n          sortField: 'title',\n          maxOptions: null,\n          items: [ getCommandValue(languageCommand.value) ],\n          options: [\n            this.languageList.map((language) => ({ ...language, title: t(language.title) })),\n          ],\n          create: false,\n          // Custom rendering functions for options and items\n          render: {\n            option: (item, escape) => renderTemplate(item, escape),\n            item: (item, escape) => renderTemplate(item, escape),\n          },\n          // If the language selection has changed, execute the language command.\n          onItemAdd: (languageCode) => {\n            if (languageCommand.value !== languageCode) {\n              languageCommand.execute({\n                languageCode,\n                textDirection: this.languageList.find(\n                  (language) => language.languageCode === languageCode\n                ).textDirection,\n              });\n              editor.editing.view.focus();\n            }\n          },\n          // If the language selection has been removed,\n          // execute the language command.\n          onItemRemove: () =>  {\n            if (languageCommand.value) {\n              languageCommand.execute({\n                languageCode: false,\n              });\n              editor.editing.view.focus();\n            }\n          },\n        };\n\n        /* global TomSelect */\n        tomSelect = new TomSelect(selectListView.element, settings);\n      });\n\n      return dropdownView;\n    });\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/helfiLanguageSelectorUi.js?")},"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helfiLanguageSelector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helfiLanguageSelector */ "./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/helfiLanguageSelector.js");\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  HelfiLanguageSelector: _helfiLanguageSelector__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/index.js?')},"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/ui/helfiLanguageSelectorCommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HelfiLanguageSelectorCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils */ \"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/utils/utils.js\");\n/**\n * @file defines HelfiLanguageSelectorCommand, which is executed when the\n * language selector toolbar button is pressed.\n */\n\n\n\nclass HelfiLanguageSelectorCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n\n  /**\n   * Executes the command. Applies the attribute to the selection or removes it from the selection.\n   *\n   * If `languageCode` is set to `false`, it will remove attributes.\n   * Otherwise, the attribute will be added.\n   *\n   * @param {string} languageCode The language code to be applied to the model.\n   * @param {string} textDirection The language text direction.\n   */\n  execute({ languageCode, textDirection }) {\n    const { model } = this.editor;\n    const doc = model.document;\n    const { selection } = doc;\n    const value = languageCode ? (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.stringifyLanguageAttribute)(languageCode, textDirection) : false;\n\n    model.change(writer => {\n      const firstPosition = selection.getFirstPosition();\n      const node = firstPosition.textNode || firstPosition.nodeBefore;\n\n      // If only the cursor is selected.\n      if (selection.isCollapsed) {\n        if (value) {\n          // Write the value to selection.\n          writer.setSelectionAttribute('helfiLanguageSelector', value);\n        } else if (node) {\n          // If there is no value, we should remove the helfiLanguageSelector\n          // attributes. If there is node found, remove the attributes from the\n          // whole node surrounding the selection.\n          writer.removeAttribute('helfiLanguageSelector', writer.createRangeOn(node));\n        } else {\n          // Remove the helfiLanguageSelector attributes from current selection.\n          writer.removeSelectionAttribute('helfiLanguageSelector');\n        }\n      // When there is a selection range selected.\n      } else {\n        const ranges = model.schema.getValidRanges(selection.getRanges(), 'helfiLanguageSelector');\n        let range = ranges.next();\n\n        while (!range.done) {\n          const currentRange = range.value;\n\n          if (value) {\n            // Write the value to selection.\n            writer.setAttribute('helfiLanguageSelector', value, currentRange);\n          } else {\n            // Remove the helfiLanguageSelector attributes from the current selection range.\n            writer.removeAttribute('helfiLanguageSelector', currentRange);\n          }\n          // Move to the next value.\n          range = ranges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    this.value = this._getValueFromFirstAllowedNode();\n    this.isEnabled = model.schema.checkAttributeInSelection(selection, 'helfiLanguageSelector');\n  }\n\n  /**\n   * Returns the attribute value of the first node in the selection that allows the attribute.\n   * For a collapsed selection it returns the selection attribute.\n   *\n   * @return {string|false} The attribute value or false.\n   */\n  _getValueFromFirstAllowedNode() {\n    const { model } = this.editor;\n    const { schema } = model;\n    const { selection } = model.document;\n\n    if (selection.isCollapsed) {\n      return selection.getAttribute('helfiLanguageSelector') || false;\n    }\n\n    const ranges = selection.getRanges();\n    let range = ranges.next();\n\n    while (!range.done) {\n      const currentRange = range.value;\n      const items = currentRange.getItems();\n      let currentItem = items.next();\n\n      while (!currentItem.done) {\n        const item = currentItem.value;\n        if (schema.checkAttribute(item, 'helfiLanguageSelector')) {\n          return item.getAttribute('helfiLanguageSelector') || false;\n        }\n        currentItem = items.next();\n      }\n      range = ranges.next();\n    }\n    return false;\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/ui/helfiLanguageSelectorCommand.js?")},"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/ui/languageSelectListView.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LanguageSelectListView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n\n\n\n/**\n * The LanguageSelectListView class.\n */\nclass LanguageSelectListView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(locale, editor) {\n    super(locale, editor);\n    const bind = this.bindTemplate;\n    const { t } = locale;\n\n    this.editor = editor;\n\n    this.set('isOpen', false);\n    this.set('label');\n    this.set('id', null);\n\n    this.setTemplate({\n      tag: 'select',\n      attributes: {\n        id: bind.to('id'),\n        class: [\n          'ck-helfi-select-list',\n          bind.if('isOpen', 'ck-is-open', isOpen => isOpen)\n        ],\n        open: bind.if('isOpen'),\n        placeholder: t('Select language'),\n      },\n      on: {\n        keydown: bind.to(evt => {\n          // Need to check target. Otherwise, we would handle space press on\n          // input[type=text] and it would change checked property\n          // twice due to default browser handling kicking in too.\n          if (evt.target === this.element && evt.keyCode === (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.getCode)('space')) {\n            this.isOpen = !this.isOpen;\n          }\n        }),\n      },\n    });\n  }\n\n  /**\n   * Focuses the {@link #element} of the details.\n   */\n  focus() {\n    this.element.focus();\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/ui/languageSelectListView.js?")},"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/utils/translationWarmer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ translationWarmer)\n/* harmony export */ });\n/**\n * @file defines translationWarmer function.\n * The translationWarmer function is workaround for creating translations for\n * languages.\n *\n * As the ckeditor5-dev-translations will pick up only translations which\n * are called via t() function, none of the languages would get translated\n * without running this function.\n *\n * If you have an idea how to fix this, please do.\n *\n * @param {Object} locale The localization services instance.\n */\nfunction translationWarmer(locale) {\n  const { t } = locale;\n  // Run all the languages through t() to trigger the ckeditor5-dev-utils\n  // during build.\n  t('Afrikaans');\n  t('Albanian');\n  t('Amharic');\n  t('Arabic');\n  t('Armenian');\n  t('Asturian');\n  t('Azerbaijani');\n  t('Bahasa Malaysia');\n  t('Basque');\n  t('Belarusian');\n  t('Bengali');\n  t('Bosnian');\n  t('Bulgarian');\n  t('Burmese');\n  t('Catalan');\n  t('Chichewa');\n  t('Chinese');\n  t('Chinese, Simplified');\n  t('Chinese, Traditional');\n  t('Corsican');\n  t('Croatian');\n  t('Czech');\n  t('Danish');\n  t('Dutch');\n  t('Dzongkha');\n  t('English');\n  t('Esperanto');\n  t('Estonian');\n  t('Faeroese');\n  t('Filipino');\n  t('Finnish');\n  t('French');\n  t('Frisian');\n  t('Frisian, Western');\n  t('Gaelic');\n  t('Galician');\n  t('Georgian');\n  t('German');\n  t('Greek');\n  t('Gujarati');\n  t('Haitian Creole');\n  t('Hausa');\n  t('Hebrew');\n  t('Hindi');\n  t('Hungarian');\n  t('Icelandic');\n  t('Igbo');\n  t('Indonesian');\n  t('Irish');\n  t('Italian');\n  t('Japanese');\n  t('Javanese');\n  t('Kannada');\n  t('Kazakh');\n  t('Khmer');\n  t('Kinyarwanda');\n  t('Korean');\n  t('Kurdish (Kurmanji)');\n  t('Kurdish');\n  t('Kyrgyz');\n  t('Lao');\n  t('Latin');\n  t('Latvian');\n  t('Lithuanian');\n  t('Luxembourgish');\n  t('Macedonian');\n  t('Malagasy');\n  t('Malay');\n  t('Malayalam');\n  t('Maltese');\n  t('Maori');\n  t('Marathi');\n  t('Mongolian');\n  t('Myanmar (Burmese)');\n  t('Nepali');\n  t('Norwegian');\n  t('Odia (Oriya)');\n  t('Pashto');\n  t('Persian');\n  t('Polish');\n  t('Portuguese');\n  t('Punjabi');\n  t('Romanian');\n  t('Russian');\n  t('Sami');\n  t('Samoan');\n  t('Serbian');\n  t('Sesotho');\n  t('Shona');\n  t('Sindhi');\n  t('Sinhala');\n  t('Slovak');\n  t('Slovenian');\n  t('Somali');\n  t('Spanish');\n  t('Sundanese');\n  t('Swahili');\n  t('Swedish');\n  t('Swiss German');\n  t('Tajik');\n  t('Tamil');\n  t('Tamil, Sri Lanka');\n  t('Tatar');\n  t('Telugu');\n  t('Thai');\n  t('Tibetan');\n  t('Turkish');\n  t('Turkmen');\n  t('Tuvan');\n  t('Ukrainian');\n  t('Urdu');\n  t('Uyghur');\n  t('Uzbek');\n  t('Vietnamese');\n  t('Welsh');\n  t('Xhosa');\n  t('Yiddish');\n  t('Yoruba');\n  t('Zulu');\n  t('Norwegian Bokmål');\n  t('Norwegian Nynorsk');\n  t('Occitan');\n  t('Persian, Farsi');\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/utils/translationWarmer.js?")},"./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/utils/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseLanguageAttribute: () => (/* binding */ parseLanguageAttribute),\n/* harmony export */   stringifyLanguageAttribute: () => (/* binding */ stringifyLanguageAttribute)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/**\n * @file defines stringifyLanguageAttribute and parseLanguageAttribute functions.\n * These functions are based on CKEditor5/language plugin.\n */\n\n\n/**\n * Returns the language attribute value in a human-readable text format.\n *\n * @param {string} languageCode The language code.\n * @param {string} textDirection The language text direction.\n * @return {string} Returns the human-readable text of lang and dir.\n */\nfunction stringifyLanguageAttribute(languageCode, textDirection) {\n  textDirection = textDirection || (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.getLanguageDirection)(languageCode);\n  return `${ languageCode }:${ textDirection }`;\n}\n\n/**\n * Retrieves language properties converted to attribute value by\n * the stringifyLanguageAttribute function.\n *\n * @param {string} str The attribute value.\n * @return {{textDirection: *, languageCode: *}} The object with properties:\n * * languageCode - The language code in the ISO 639 format.\n * * textDirection - The language text direction.\n */\nfunction parseLanguageAttribute(str) {\n  const [ languageCode, textDirection ] = str.split(':');\n  return { languageCode, textDirection };\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/utils/utils.js?")},"./assets/icons/helfiLanguageSelector.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<svg version=\\"1.1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\" viewBox=\\"0 0 20 20\\" style=\\"enable-background:new 0 0 20 20;\\" xml:space=\\"preserve\\">\\n<path d=\\"M-17.3,0.9\\"/>\\n\\t<rect x=\\"1.3\\" y=\\"1.3\\" width=\\"7.9\\" height=\\"1.3\\"/>\\n\\t<rect x=\\"1.3\\" y=\\"6.8\\" width=\\"7.9\\" height=\\"1.3\\"/>\\n\\t<rect x=\\"1.3\\" y=\\"9.5\\" width=\\"7.9\\" height=\\"1.3\\"/>\\n\\t<rect y=\\"4\\" width=\\"10.6\\" height=\\"1.3\\"/>\\n\\t<path d=\\"M15.9,3.6c1.6-0.2,2.9-0.5,4.1-1l-0.5-1.2c-1.2,0.5-2.6,0.8-4.2,1c-2,0.2-3.7,0-3.7,0l-0.2,1.3c0,0,0.9,0.1,2.1,0.1 c0.3,0,0.7,0,1,0v3.1h-3.6v1.3h3.6v4h-3.7v6.5h1.3v-1.3h6.5V18H20v-5.9h-4.1v-4H20V6.8h-4.1V3.6z M18.6,16.1h-6.5v-2.6h6.5V16.1z\\" />\\n\\t<path d=\\"M1.3,18.7h1.3v-1.3h5.3V18h1.3v-5.9h-8V18.7z M7.9,13.5v2.6H2.6v-2.6H7.9z\\"/>\\n</svg>\\n");\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/./assets/icons/helfiLanguageSelector.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/utils.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/utils.js");\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/delegated_./utils.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.helfiLanguageSelector/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./assets/js/ckeditor5_plugins/helfiLanguageSelector/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));