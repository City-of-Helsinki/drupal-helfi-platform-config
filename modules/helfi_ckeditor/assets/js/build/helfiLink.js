!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.CKEditor5=n():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.helfiLink=n())}(self,(()=>(()=>{var __webpack_modules__={"./assets/js/ckeditor5_plugins/helfiLink/src/formElements.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst formElements = {\n  linkIcon: {\n    label: Drupal.t('Icon', {}, { context: 'CKEditor5 Helfi Link plugin' }),\n    machineName: 'icon',\n    selectListOptions: {},\n    type: 'select',\n    group: 'advanced',\n    isVisible: false,\n    viewAttribute: 'data-icon-start',\n  },\n  linkVariant: {\n    label: Drupal.t('Design'),\n    machineName: 'variant',\n    selectListOptions: {\n      link: Drupal.t('Normal link', {}, { context: 'CKEditor5 Helfi Link plugin' }),\n      primary: Drupal.t('Button primary'),\n      secondary: Drupal.t('Button secondary'),\n      supplementary: Drupal.t('Button supplementary'),\n    },\n    type: 'select',\n    group: 'advanced',\n    isVisible: true,\n    viewAttribute: 'data-variant',\n  },\n  linkProtocol: {\n    label: Drupal.t('Protocol', {}, { context: 'CKEditor5 Helfi Link plugin' }),\n    machineName: 'protocol',\n    selectListOptions: {\n      https: 'https://',\n      tel: 'tel:',\n      mailto: 'mailto:',\n    },\n    type: 'select',\n    group: 'helper',\n    viewAttribute: 'data-protocol',\n    isVisible: true,\n  },\n  linkNewWindowConfirm: {\n    label: Drupal.t('The link meets the accessibility requirements', {}, { context: 'CKEditor5 Helfi Link plugin' }),\n    description: Drupal.t('I have made sure that the description of this link clearly states that it will open in a new tab. <a href=\"@wcag-techniques\" target=\"_blank\">See WCAG 3.2.5 accessibility requirement (the link opens in a new tab).</a>', {\n      '@wcag-techniques': 'https://www.w3.org/WAI/WCAG21/Techniques/general/G200.html',\n    }, { context: 'CKEditor5 Helfi Link plugin' }),\n    machineName: 'link-new-window-confirm',\n    viewAttribute: {\n      'target': '_blank',\n    },\n    type: 'checkbox',\n    group: 'advanced',\n    isVisible: false,\n  },\n  linkNewWindow: {\n    label: Drupal.t('Open in new window/tab', {}, { context: 'CKEditor5 Helfi Link plugin' }),\n    machineName: 'link-new-window',\n    type: 'checkbox',\n    group: 'advanced',\n    isVisible: true,\n  },\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formElements);\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/formElements.js?")},"./assets/js/ckeditor5_plugins/helfiLink/src/helfiLink.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ HelfiLink)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _helfiLinkEditing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helfiLinkEditing */ "./assets/js/ckeditor5_plugins/helfiLink/src/helfiLinkEditing.js");\n/* harmony import */ var _helfiLinkUi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helfiLinkUi */ "./assets/js/ckeditor5_plugins/helfiLink/src/helfiLinkUi.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n// cSpell:ignore HelfiLinkEditing HelfiLinkUi\n\n// The contents of HelfiLinkUI and HelfiLink editing could be included in this\n// file, but it is recommended to separate these concerns in different files.\n\n\n\n\nclass HelfiLink extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  // Note that HelfiLinkEditing and HelfiLinkUI also extend `Plugin`, but these\n  // are not seen as individual plugins by CKEditor 5. CKEditor 5 will only\n  // discover the plugins explicitly exported in index.js.\n  static get requires() {\n    return [_helfiLinkEditing__WEBPACK_IMPORTED_MODULE_1__["default"], _helfiLinkUi__WEBPACK_IMPORTED_MODULE_2__["default"]];\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/helfiLink.js?')},"./assets/js/ckeditor5_plugins/helfiLink/src/helfiLinkEditing.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HelfiLinkEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var ckeditor5_src_typing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/typing */ \"ckeditor5/src/typing.js\");\n/* harmony import */ var _formElements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formElements */ \"./assets/js/ckeditor5_plugins/helfiLink/src/formElements.js\");\n/**\n * @file A view to model and model to view converters for HelfiLink.\n */\n\n\n\n\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * This file has the logic for defining the HelfiLink model, and for how it is\n * converted to standard DOM markup.\n */\nclass HelfiLinkEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  /**\n   * @inheritdoc\n   */\n  static get pluginName() {\n    return 'HelfiLinkEditing';\n  }\n\n  init() {\n    Object.keys(_formElements__WEBPACK_IMPORTED_MODULE_3__[\"default\"]).forEach(modelName => {\n      if (!_formElements__WEBPACK_IMPORTED_MODULE_3__[\"default\"][modelName].machineName) { return; }\n\n      // Create conversions for model <-> view.\n      this._convertAttribute(modelName, _formElements__WEBPACK_IMPORTED_MODULE_3__[\"default\"][modelName].viewAttribute);\n\n      // Remove attributes when unlink button is clicked.\n      this._removeAttributeOnUnlinkCommandExecute(modelName);\n\n      // Refresh attribute values.\n      this._refreshAttributeValue(modelName);\n    });\n\n    // Define conversions from old link button markup to new button markup.\n    this._defineHelfiButtonConverters();\n\n    // Add attributes to linkCommand during its execution.\n    this._addAttributeOnLinkCommandExecute(Object.keys(_formElements__WEBPACK_IMPORTED_MODULE_3__[\"default\"]));\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   *\n   * <blockquote class=\"quote\">\n   *   <p class=\"quote__text\"></p>\n   *   <footer class=\"quote__author\"><cite></cite></footer>\n   * </blockquote>\n   */\n  _defineHelfiButtonConverters() {\n    const { editor } = this;\n\n    // Allow link attributes in table cells.\n    editor.model.schema.extend('tableCell', { allowContentOf: '$block' });\n\n    // Remove obsolete <span> element from the link if it exists.\n    editor.conversion.for('upcast').elementToElement({\n      view: { name: 'a' },\n      model: (viewElement) => {\n        const helfiButtonLabel = Array.from(viewElement.getChildren()).find(\n          child =>\n            child.name === 'span' &&\n            child.hasClass('hds-button__label')\n        );\n\n        // Before returning, check if there are obsolete <span> elements\n        // inside the anchor and clear them as well.\n        if (!helfiButtonLabel) {\n          const orphanedSpan = Array.from(viewElement.getChildren()).find(\n            element => {\n              // Check only an existence of span elements.\n              if (element.name && element.name === 'span') {\n\n                // Let only language attributes pass,\n                // otherwise return the element.\n                if (\n                  element.getAttribute('dir') ||\n                  element.getAttribute('lang')\n                ) {\n                  return false;\n                }\n                return element;\n              }\n              return false;\n            }\n          );\n\n          // Remove the orphaned <span> and insert its children to the <a>.\n          if (orphanedSpan) {\n            viewElement._removeChildren(orphanedSpan.index, 1);\n            Array.from(orphanedSpan.getChildren()).forEach(child => {\n              viewElement._appendChild(child);\n            });\n          }\n          return;\n        }\n\n        const numOfChildren = Array.from(viewElement.getChildren()).length;\n        if (numOfChildren > 0) {\n          viewElement._removeChildren(0, numOfChildren);\n        }\n\n        Array.from(helfiButtonLabel.getChildren()).forEach(child => {\n          viewElement._appendChild(child);\n        });\n      },\n      converterPriority: 'highest',\n    });\n\n    // A helper object to map old link button data-attributes and new\n    // link button data-attributes.\n    const mapDataAttributes = {\n      'data-design': 'data-variant',\n      'data-protocol': 'data-protocol',\n      'data-selected-icon': 'data-icon-start',\n      'data-is-external': 'data-is-external'\n    };\n\n    /**\n     * Convert the variant from button classes to a usable string.\n     *\n     * @param {string} classes Button classes as a string\n     * @return {string|null} Return the variant as a string or null.\n     */\n    const convertVariants = (classes) => {\n      const parts = classes.split(' '); // Split the string by spaces\n      const variantFound = parts.find(part => part.startsWith('hds-button--'));\n      const hdsButtonFound = parts.find(part => part.endsWith('hds-button'));\n\n      if (variantFound) {\n        return variantFound.replace('hds-button--', '');\n      }\n\n      if (hdsButtonFound) {\n        return 'primary';\n      }\n\n      return null;\n    };\n\n    // Go through each attribute and convert the attribute to a simplified\n    // anchor element.\n    Object.keys(mapDataAttributes).forEach(cke4Attr => {\n      const { conversion, model } = this.editor;\n\n      const cke5Attr = mapDataAttributes[cke4Attr];\n\n      model.schema.extend('$text', { allowAttributes: cke4Attr });\n      model.schema.extend('$text', { allowAttributes: cke5Attr });\n\n      // Convert old data-attribute anchor attribute to matching model.\n      editor.conversion.for('upcast').attributeToAttribute({\n        view: {\n          name: 'a',\n          key: cke4Attr\n        },\n        model: {\n          key: cke5Attr,\n          value: (viewElement) => {\n            let match;\n\n            if (viewElement.getAttribute(cke4Attr)) {\n              match = viewElement.getAttribute(cke4Attr);\n            }\n            if (viewElement.getAttribute(cke5Attr)) {\n              match = viewElement.getAttribute(cke5Attr);\n            }\n            if (cke4Attr === 'data-design') {\n              match = convertVariants(match);\n            }\n            // We don't need this data-attribute here as it will be generated\n            // by the helfi_link_converter filter plugin.\n            if (cke4Attr === 'data-is-external') {\n              return;\n            }\n            return match;\n          }\n        }\n      });\n\n\n      // TODO: Voiko titlen poistaa, mutta säilöö sen markupissa?\n      // TODO: <span visually-hidden> pois\n      // TODO: data-is-external pois\n      //\n\n\n      // Convert new data-attribute anchor attribute to matching model.\n      editor.conversion.for('upcast').attributeToAttribute({\n        view: {\n          name: 'a',\n          key: cke5Attr\n        },\n        model: {\n          key: cke5Attr,\n          value: (viewElement) => {\n            let match;\n            if (viewElement.getAttribute(cke5Attr)) {\n              match = viewElement.getAttribute(cke5Attr);\n            }\n            return match;\n          }\n        }\n      });\n\n      // Convert old data-attribute model to an anchor \"attribute\" element\n      // in dataDowncast.\n      conversion.for('dataDowncast').attributeToElement({\n        model: cke4Attr,\n        view: (attributeValue, { writer }) => {\n          if (!attributeValue) {\n            return undefined;\n          }\n          return writer.createAttributeElement('a', { [cke5Attr]: attributeValue }, { priority: 5 });\n        },\n      });\n\n      // Convert new data-attribute model to an anchor \"attribute\" element\n      // in data downcast.\n      conversion.for('dataDowncast').attributeToElement({\n        model: cke5Attr,\n        view: (attributeValue, { writer }) => {\n          if (!attributeValue) {\n            return undefined;\n          }\n          return writer.createAttributeElement('a', { [cke5Attr]: attributeValue }, { priority: 5 });\n        },\n      });\n\n      /**\n       * Helper function for the data-attribute conversion.\n       *\n       * @param {string} attributeKey New data-attribute name.\n       * @param {string} attributeValue New data-attribute value.\n       * @param {writer} writer The downcast writer.\n       * @return {editableElement} Returns an editableElement.\n       */\n      const editingDowncast = (attributeKey, attributeValue, writer) => {\n        if (!attributeValue) {\n          return undefined;\n        }\n        const attributeElement = writer.createAttributeElement('a', { [attributeKey]: attributeValue }, { priority: 5 });\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(attributeElement, writer, { label: Drupal.t('Edit link') });\n      };\n\n      // Convert old data-attribute model to an anchor \"attribute\" element\n      // in editing downcast.\n      conversion.for('editingDowncast').attributeToElement({\n        model: cke4Attr,\n        view: (attributeValue, { writer }) => editingDowncast(cke5Attr, attributeValue, writer),\n      });\n\n      // Convert new data-attribute model to an anchor \"attribute\" element\n      // in editing downcast.\n      conversion.for('editingDowncast').attributeToElement({\n        model: cke5Attr,\n        view: (attributeValue, { writer }) => editingDowncast(cke5Attr, attributeValue, writer),\n      });\n    });\n  }\n\n  /**\n   * Convert models and attributes between model <-> view.\n   *\n   * @param {string} modelName The model name.\n   * @param {string|object} viewAttribute The view attribute name.\n   */\n  _convertAttribute(modelName, viewAttribute) {\n    const { editor } = this;\n\n    // Nothing to be done if there are no viewAttribute.\n    if (!viewAttribute) { return; }\n\n    // Add current model as an allowed attribute for '$text' nodes.\n    editor.model.schema.extend('$text', { allowAttributes: modelName });\n\n    // Convert attributes for downcast.\n    // Model --\x3e View (DOM / Data).\n    editor.conversion.for('downcast').attributeToElement({\n      model: modelName,\n      view: (modelAttributeValue, { writer }) => {\n        const attributeValues = {};\n\n        // Create attribute values based on the type of view attributes types.\n        if (modelAttributeValue && typeof viewAttribute === 'object') {\n          attributeValues[Object.keys(viewAttribute)] = viewAttribute[Object.keys(viewAttribute)];\n        } else {\n          attributeValues[viewAttribute] = modelAttributeValue;\n        }\n\n        // Create the anchor element with the current attributes.\n        const linkViewElement = writer.createAttributeElement('a', attributeValues, { priority: 5 });\n\n        // Without it the isLinkElement() will not recognize the link\n        // and the UI will not show up when the user clicks a link.\n        writer.setCustomProperty('link', true, linkViewElement);\n\n        return linkViewElement;\n      },\n    });\n\n    // Handle upcast separately for attributes with object as their definitions.\n    if (typeof viewAttribute === 'object') {\n      const viewAttributeKey = Object.keys(viewAttribute)[0];\n      const viewAttributeValue = viewAttribute[Object.keys(viewAttribute)];\n\n      // Convert attributes for upcast.\n      // View (DOM / Data) --\x3e Model.\n      this.editor.conversion.for('upcast').attributeToAttribute({\n        view: {\n          name: 'a',\n          key: viewAttributeKey,\n          value: viewAttributeValue,\n        },\n        model: {\n          key: modelName,\n          value: (viewElement) => !!(viewElement.hasAttribute(viewAttributeKey) &&\n            viewElement.getAttribute(viewAttributeKey) === viewAttributeValue)\n        },\n      });\n    }\n    else {\n      // View (DOM / Data) --\x3e Model.\n      editor.conversion.for('upcast').elementToAttribute({\n        view: {\n          name: 'a',\n          attributes: {\n            [ viewAttribute ]: true\n          }\n        },\n        model: {\n          key: modelName,\n          value: viewElement => viewElement.getAttribute(viewAttribute)\n        }\n      });\n    }\n  }\n\n  /**\n   * Add attributes to linkCommand during its execution.\n   *\n   * @param {object} modelNames All model names.\n   */\n  _addAttributeOnLinkCommandExecute(modelNames) {\n    const { editor } = this;\n    const linkCommand = editor.commands.get('link');\n    let linkCommandExecuting = false;\n\n    linkCommand.on('execute', (evt, args) => {\n      // Custom handling is only required if an attribute was passed\n      // into editor.execute('link', ...).\n      if (args.length < 3) {\n        return;\n      }\n      if (linkCommandExecuting) {\n        linkCommandExecuting = false;\n        return;\n      }\n\n      // If the additional attribute was passed, we stop the default execution\n      // of the LinkCommand. We're going to create Model#change() block for undo\n      // and execute the LinkCommand together with setting the attribute.\n      evt.stop();\n\n      // Prevent infinite recursion by keeping records of when link command\n      // is being executed by this function.\n      linkCommandExecuting = true;\n      const attributeValues = args[args.length - 1];\n      const { model } = editor;\n      const { selection } = model.document;\n\n      // Wrapping the original command execution in a model.change() to make\n      // sure there's a single undo step when the attribute is added.\n      model.change(writer => {\n        editor.execute('link', ...args);\n\n        // Determine the selection range and add/remove the attributes to the\n        // node or range.\n        modelNames.forEach(modelName => {\n          if (selection.isCollapsed) {\n            // Get the current selection textNode or the nodeBefore the selection.\n            // If neither are available, create a range from root position.\n            const writtenRange = (position) => {\n              const node = position.textNode || position.nodeBefore;\n              if (!node) {\n                const range = writer.createRange(position);\n                writer.setSelection(range);\n                return range;\n              }\n              return writer.createRangeOn(node);\n            };\n\n            // Set or remove attributes.\n            if (attributeValues[modelName]) {\n              writer.setAttribute(modelName, attributeValues[modelName], writtenRange(selection.getFirstPosition()));\n            } else {\n              writer.removeAttribute(modelName, writtenRange(selection.getFirstPosition()));\n            }\n            writer.removeSelectionAttribute(modelName);\n          } else {\n            const ranges = model.schema.getValidRanges(selection.getRanges(), modelName);\n            let range = ranges.next();\n\n            while (!range.done) {\n              const currentRange = range.value;\n\n              if (attributeValues[modelName]) {\n                writer.setAttribute(modelName, attributeValues[modelName], currentRange);\n              } else {\n                writer.removeAttribute(modelName, currentRange);\n              }\n              range = ranges.next();\n            }\n          }\n        });\n      });\n    }, { priority: 'high' });\n  }\n\n  /**\n   * Remove attributes on unlink command execution.\n   *\n   * @param {string} modelName The model name.\n   */\n  _removeAttributeOnUnlinkCommandExecute(modelName) {\n    const { editor } = this;\n    const { model } = this.editor;\n    const { selection } = model.document;\n    const unlinkCommand = editor.commands.get('unlink');\n\n    let isUnlinkingInProgress = false;\n\n    // Make sure all changes are in a single undo step.\n    // Cancel the original unlink first in the high priority.\n    unlinkCommand.on('execute', evt => {\n      if (isUnlinkingInProgress) {\n        return;\n      }\n\n      evt.stop();\n\n      // This single block wraps all changes that should be in a single undo step.\n      model.change(() => {\n        // Now, in this single \"undo block\" let the unlink command flow naturally.\n        isUnlinkingInProgress = true;\n\n        // Do the unlinking within a single undo step.\n        editor.execute('unlink');\n\n        // Let's make sure the next unlinking will also be handled.\n        isUnlinkingInProgress = false;\n\n        // The actual integration that removes the attribute.\n        model.change(writer => {\n          let ranges;\n\n          // Get ranges from collapsed selection.\n          if (selection.isCollapsed) {\n            ranges = [ (0,ckeditor5_src_typing__WEBPACK_IMPORTED_MODULE_2__.findAttributeRange)(\n              selection.getFirstPosition(),\n              modelName,\n              selection.getAttribute(modelName),\n              model\n            ) ];\n          }\n          // Get ranges from selected elements.\n          else {\n            ranges = model.schema.getValidRanges(selection.getRanges(), modelName);\n          }\n\n          // Remove the attribute from specified ranges.\n          if (Array.isArray(ranges)) {\n            ranges.forEach(range => writer.removeAttribute(modelName, range));\n          }\n        });\n      });\n    }, { priority: 'high' });\n  }\n\n  /**\n   * Keep the attributes updated whenever editor model changes.\n   *\n   * @param {string} modelName The model name.\n   */\n  _refreshAttributeValue(modelName) {\n    const { editor } = this;\n    const { model } = this.editor;\n    const { selection } = model.document;\n    const linkCommand = editor.commands.get('link');\n\n    linkCommand.set(modelName, null);\n\n    model.document.on('change', () => {\n      linkCommand[modelName] = selection.getAttribute(modelName);\n    });\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/helfiLinkEditing.js?")},"./assets/js/ckeditor5_plugins/helfiLink/src/helfiLinkUi.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HelfiLinkUi)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var _ui_helfiCheckBoxView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/helfiCheckBoxView */ \"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiCheckBoxView.js\");\n/* harmony import */ var _ui_helfiLinkProtocolView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui/helfiLinkProtocolView */ \"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkProtocolView.js\");\n/* harmony import */ var _formElements__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formElements */ \"./assets/js/ckeditor5_plugins/helfiLink/src/formElements.js\");\n/* harmony import */ var _ui_helfiDetailsView__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/helfiDetailsView */ \"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiDetailsView.js\");\n/* harmony import */ var _ui_helfiLinkVariantView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/helfiLinkVariantView */ \"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkVariantView.js\");\n/* harmony import */ var _ui_helfiLinkIconView__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui/helfiLinkIconView */ \"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkIconView.js\");\n/**\n * @file registers the HelfiLinkUi plugin and binds functionality to it.\n */\n\n\n\n\n\n\n\n\n\n\n\n\nclass HelfiLinkUi extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n  constructor(editor) {\n    super(editor);\n    this.editor = editor;\n    this.advancedChildren = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_2__.Collection();\n    this.formElements = _formElements__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\n  }\n\n  init() {\n    // Add a wrapper classes for the link form view.\n    this._addContextualBalloonClass();\n\n    // Add custom fields from formElements.\n    const models = Object.keys(this.formElements).reverse();\n\n    // Iterate through formElements and create fields accordingly.\n    models.forEach(modelName => {\n      // Skip form elements without machine names.\n      if (!this.formElements[modelName].machineName) { return; }\n\n      // Create form fields.\n      const formField = this._createFormField(modelName);\n\n      // Load existing data into form field.\n      this._handleDataLoadingIntoFormField(modelName);\n\n      // If form field is marked as part of advanced settings,\n      // add it to advancedChildren object.\n      if (\n        this.formElements[modelName].group &&\n        this.formElements[modelName].group === 'advanced'\n      ) {\n        this.advancedChildren.add(formField);\n      }\n    });\n\n    // Move chosen fields under advanced settings.\n    this._createAndHandleAdvancedSettings();\n\n    // Add a descriptive text to URL input field.\n    this._manipulateUrlInputField();\n\n    // Add logic to checkboxes.\n    this._handleCheckboxes();\n\n    // Handle form field submit.\n    this._handleFormFieldSubmit(models);\n  }\n\n  /**\n   * Add a wrapper class to the contextual balloon panel when the LinkUI button\n   * has been clicked.\n   *\n   * Note! This hacky way of removing and re-adding the link form view was the\n   * only way to add class to its surrounding contextual balloon at the time\n   * this plugin customization was being developed.\n   */\n  _addContextualBalloonClass() {\n    const { editor } = this;\n    const linkFormView = editor.plugins.get('LinkUI').formView;\n    const contextualBalloon = editor.plugins.get(ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon);\n\n    // Act on when contextualBalloon (popup) and linkFormView is added.\n    contextualBalloon._rotatorView.content.on('add', (evt, view) => {\n      if (\n        view !== linkFormView ||\n        !contextualBalloon.hasView(linkFormView) ||\n        contextualBalloon.view.element.classList.contains('helfi-contextual-balloon')\n      ) {\n        return;\n      }\n\n      contextualBalloon.remove(view);\n      contextualBalloon.add({\n        view: linkFormView,\n        position: contextualBalloon._getBalloonPosition(),\n        balloonClassName: 'helfi-contextual-balloon',\n        withArrow: false,\n      });\n    });\n\n    // Add custom classes for the LinkUI from view.\n    linkFormView.extendTemplate({\n      attributes: {\n        class: [ 'helfi-link-form', 'ck-reset_all-excluded' ]\n      }\n    });\n  }\n\n  /**\n   * Add a descriptive help text to URL input field.\n   */\n  _manipulateUrlInputField() {\n    const { editor } = this;\n    const linkFormView = editor.plugins.get('LinkUI').formView;\n    const urlDescription = document.createElement('span');\n    urlDescription.textContent = Drupal.t('Start typing to find content.', {}, { context: 'CKEditor5 Helfi Link plugin' });\n    urlDescription.classList.add('helfi-link-form__field_description');\n    linkFormView.urlInputView.element.appendChild(urlDescription);\n  }\n\n  /**\n   * Create select list for protocol selection field.\n   *\n   * @param {string} modelName The model name.\n   * @param {object} options The select list options.\n   * @return {HelfiLinkProtocolView} Return the protocol view.\n   */\n  _createSelectList(modelName, options) {\n    const { editor } = this;\n    const linkFormView = editor.plugins.get('LinkUI').formView;\n    let selectListView = {};\n\n    switch (modelName) {\n      case 'linkProtocol':\n        selectListView = new _ui_helfiLinkProtocolView__WEBPACK_IMPORTED_MODULE_4__[\"default\"](editor, options);\n\n        // Hide the Protocol field view by setting isVisible to false\n        linkFormView.urlInputView.on('change:isEmpty', (evt, name, value) => {\n          selectListView.updateVisibility(value);\n        });\n        break;\n\n      case 'linkVariant':\n        selectListView = new _ui_helfiLinkVariantView__WEBPACK_IMPORTED_MODULE_7__[\"default\"](editor, options);\n        break;\n\n      case 'linkIcon':\n        selectListView = new _ui_helfiLinkIconView__WEBPACK_IMPORTED_MODULE_8__[\"default\"](editor, options);\n\n        // Hide the linkIcon if the design field is empty.\n        linkFormView.linkVariant.on('change:isEmpty', (evt, name, value) => {\n          selectListView.updateVisibility(value);\n        });\n        break;\n      default:\n        break;\n    }\n\n    // Apply configurations for the select list view.\n    selectListView.set({\n      isVisible: options.isVisible,\n      id: options.machineName,\n      label: options.label,\n    });\n\n    return selectListView;\n  }\n\n  /**\n   * Create advanced settings (details/summary) view and handle the initial\n   * state for it.\n   *\n   * @return {HelfiDetailsView} Returns the details view.\n   */\n  _createAndHandleAdvancedSettings() {\n    const { editor } = this;\n    const linkFormView = editor.plugins.get('LinkUI').formView;\n    const advancedSettings = new _ui_helfiDetailsView__WEBPACK_IMPORTED_MODULE_6__[\"default\"](editor.locale, this.advancedChildren);\n\n    advancedSettings.set({\n      label: Drupal.t('Advanced settings', {}, { context: 'CKEditor5 Helfi Link plugin' }),\n      id: 'advanced-settings',\n      isOpen: false,\n    });\n\n    // Add advanced settings (details summary) to linkFormView\n    // after the linkHref field; 2.\n    linkFormView.children.add(advancedSettings, 2);\n\n    // Handle the advanced settings open/close per contextualBalloon.\n    editor.plugins.get('ContextualBalloon')._rotatorView.content.on('add', (evt, view) => {\n      if (view !== linkFormView) {\n        return;\n      }\n\n      // The advanced settings (details summary element) is not bound to\n      // any element. It is needed to close manually initially.\n      if (linkFormView.advancedSettings) {\n        linkFormView.advancedSettings.element.open = false;\n        linkFormView.advancedSettings.detailsSummary.element.ariaExpanded = false;\n        linkFormView.advancedSettings.detailsSummary.element.ariaPressed = false;\n      }\n\n      // Remove the error text if user has managed to make an error on last go.\n      if (linkFormView.urlInputView.errorText) {\n        linkFormView.urlInputView.errorText = '';\n      }\n    });\n\n    linkFormView.advancedSettings = advancedSettings;\n    return linkFormView.advancedSettings;\n  }\n\n  /**\n   * Create checkboxes.\n   *\n   * @param {string} modelName The model name.\n   * @return {HelfiCheckBoxView} Returns the checkbox view.\n   */\n  _createCheckbox(modelName) {\n    const checkboxView = new _ui_helfiCheckBoxView__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.editor.locale);\n    const options = this.formElements[modelName];\n\n    // Define the dropdown items\n    checkboxView.set({\n      isVisible: options.isVisible,\n      tooltip: true,\n      class: 'ck-find-checkboxes__box',\n      id: options.machineName,\n      label: options.label,\n    });\n\n    return checkboxView;\n  }\n\n  /**\n   * Create form fields based on form elements.\n   *\n   * @param {string} modelName The model name.\n   * @return {*} Returns current field view.\n   */\n  _createFormField(modelName) {\n    const { editor } = this;\n    const linkFormView = editor.plugins.get('LinkUI').formView;\n    const options = this.formElements[modelName];\n    let fieldView = {};\n\n    // Create fields based on their types.\n    switch (options.type) {\n      case 'select':\n        fieldView = this._createSelectList(modelName, options);\n        break;\n      case 'checkbox':\n        fieldView = this._createCheckbox(modelName);\n        break;\n      case 'static':\n        // Do nothing for static group.\n        fieldView = false;\n        break;\n      default:\n        fieldView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.LabeledFieldView(editor.locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createLabeledInputText);\n        break;\n    }\n\n    if (!fieldView) {\n      return;\n    }\n\n    // Add basic information for the field.\n    fieldView.machineName = modelName;\n    fieldView.class = `helfi-link--${  options.machineName}`;\n    fieldView.label = options.label;\n\n    // Add help texts for the field.\n    if (options.description) {\n      fieldView.infoText = options.description;\n    }\n\n    // Handle advanced settings separately.\n    if (!options.group || options.group !== 'advanced') {\n      linkFormView.children.add(fieldView, options.type === 'select' ? 0 : 1);\n    }\n\n    // Track the focus of the field elements.\n    linkFormView.on('render', () => {\n      linkFormView._focusables.add(fieldView, 1);\n      linkFormView.focusTracker.add(fieldView.element);\n    });\n\n    linkFormView[modelName] = fieldView;\n    return linkFormView[modelName];\n  }\n\n  /**\n   * Handle form field submit.\n   *\n   * @param {object} models The models.\n   */\n  _handleFormFieldSubmit(models) {\n    const { editor } = this;\n    const { selection } = editor.model.document;\n    const linkFormView = editor.plugins.get('LinkUI').formView;\n    const linkCommand = editor.commands.get('link');\n\n    // Listen to linkFormView submit and inject form field values to\n    // linkCommand arguments.\n    this.listenTo(linkFormView, 'submit', (evt) => {\n      // Check for Link URL existence.\n      if (!linkFormView.urlInputView?.fieldView?.element?.value) {\n        linkFormView.urlInputView.errorText = Drupal.t(\n          'The link URL field cannot be empty.',\n          {},\n          { context: 'CKEditor5 Helfi Link plugin' }\n        );\n        evt.stop();\n      }\n\n      const values = models.reduce((state, model) => {\n        switch (model) {\n          case 'linkVariant': {\n            const selectedValue = linkFormView?.[model]?.tomSelect.getValue();\n            if (selectedValue && selectedValue !== 'link') {\n              state[model] = selectedValue;\n            }\n            break;\n          }\n\n          case 'linkIcon':\n            state[model] = linkFormView?.[model]?.tomSelect.getValue();\n            break;\n\n          default:\n            state[model] = linkFormView?.[model]?.fieldView?.element?.value ?? '';\n        }\n\n        if (this.formElements[model].type === 'checkbox') {\n          state[model] = linkFormView?.[model]?.checkboxInputView?.element?.checked;\n        }\n\n        return state;\n      }, {});\n\n      // Explain the link logic to user if they are trying to add link id to\n      // a collapsed selection.\n      if (\n        selection.isCollapsed &&\n        !linkFormView.urlInputView?.fieldView?.element?.value &&\n        values.linkId\n      ) {\n        linkFormView.urlInputView.errorText = Drupal.t(\n          'When there is no selection, the link URL must be provided. To add a link without a URL, first select text in the editor and then proceed with adding the link.',\n          {},\n          { context: 'CKEditor5 Helfi Link plugin' }\n        );\n        evt.stop();\n      }\n\n      // Double-check if either of the checkbox values is not checked and\n      // set both to false accordingly.\n      if (!values.linkNewWindowConfirm || !values.linkNewWindow) {\n        values.linkNewWindowConfirm = false;\n        values.linkNewWindow = false;\n\n        // Trigger the change event by clicking the element.\n        if (linkFormView.linkNewWindowConfirm.checkboxInputView.element.checked) {\n          linkFormView.linkNewWindowConfirm.checkboxInputView.element.click();\n        }\n        // Trigger the change event by clicking the element.\n        if (linkFormView.linkNewWindow.checkboxInputView.element.checked) {\n          linkFormView.linkNewWindow.checkboxInputView.element.click();\n        }\n      }\n\n      // Stop the execution of the link command caused by closing the form.\n      // Inject the attribute values.\n      linkCommand.once('execute', (execEvt, args) => {\n        if (args.length < 3) {\n          args.push(values);\n        } else if (args.length === 3) {\n          Object.assign(args[2], values);\n        } else {\n          throw Error('The link command has more than 3 arguments.');\n        }\n      }, { priority: 'highest' });\n    }, { priority: 'high' });\n  }\n\n  /**\n   * Handle data loading into form field.\n   *\n   * @param {string} modelName The model name.\n   */\n  _handleDataLoadingIntoFormField(modelName) {\n    const { editor } = this;\n    const linkCommand = editor.commands.get('link');\n    const linkFormView = editor.plugins.get('LinkUI').formView;\n    const options = this.formElements[modelName];\n\n    switch (options.type) {\n      // We don't need to handle data loading for static types.\n      case 'static':\n        return;\n\n      // Bind isChecked values of checkboxInputViews to the linkCommand.\n      case 'checkbox':\n        linkFormView[modelName].checkboxInputView.bind('isChecked').to(linkCommand, modelName);\n        break;\n\n      // Bind field values of LabeledFieldViews to the linkCommand.\n      case 'input':\n        linkFormView[modelName].fieldView.bind('value').to(linkCommand, modelName);\n        break;\n\n      default:\n        break;\n    }\n\n    // This is a hack. This could be potentially improved by detecting when the\n    // form is added by checking the collection of the ContextualBalloon plugin.\n    editor.plugins.get('ContextualBalloon')._rotatorView.content.on('add', (evt, view) => {\n      if (view !== linkFormView) {\n        return;\n      }\n\n      switch (options.type) {\n        // Handle select lists.\n        case 'select':\n          // Initialize TomSelect for current select list.\n          linkFormView[modelName].renderTomSelect(\n            linkFormView[modelName].element,\n            options?.selectListOptions\n          );\n\n          // Clear the selected values from the select list.\n          linkFormView[modelName].tomSelect.clear();\n\n          // Mark the default value as selected item.\n          if (linkCommand[modelName]) {\n            linkFormView[modelName].tomSelect.addItem(linkCommand[modelName], true);\n          }\n\n          // Add the protocol as URL input, if protocol has been selected.\n          if (modelName === 'linkProtocol') {\n            linkFormView[modelName].tomSelect.on('item_add', (selection) => {\n              if (linkFormView.urlInputView.isEmpty) {\n                linkFormView.urlInputView.fieldView.value = options.selectListOptions[selection];\n                linkFormView.urlInputView.focus();\n                linkFormView[modelName].tomSelect.clear();\n              }\n            });\n          }\n\n          // Add the default value for link variant.\n          if (modelName === 'linkVariant') {\n            linkFormView[modelName].tomSelect.on('item_add', (selection) => {\n              linkFormView?.linkIcon.updateVisibility(selection !== 'link');\n\n              if (selection === 'link') {\n                linkFormView?.linkIcon.tomSelect.clear();\n              }\n            });\n          }\n\n          // Add the default value for link icon.\n          if (modelName === 'linkIcon') {\n            linkFormView[modelName].tomSelect.on('init', () => {\n              linkFormView[modelName].updateVisibility(false);\n            });\n          }\n          break;\n\n        // Handle \"link new window\" checkboxes.\n        case 'checkbox': {\n          // Set the link new window checkbox initial value and the link new\n          // window confirmation checkbox values based on the value\n          // of the element's linkNewWindowConfirm model. The link new window\n          // confirmation gets its value from <a target=_blank> attribute.\n          const isChecked = !!(linkCommand.linkNewWindowConfirm);\n\n          // Set initial value of current \"link new window\" and\n          // \"link new window confirmation\" based on isChecked value.\n          linkFormView[modelName].updateChecked(isChecked);\n          linkFormView.linkNewWindowConfirm.updateVisibility(isChecked);\n          break;\n        }\n\n        default:\n          // Note: Copy & pasted from LinkUI.\n          // https://github.com/ckeditor/ckeditor5/blob/f0a093339631b774b2d3422e2a579e27be79bbeb/packages/ckeditor5-link/src/linkui.js#L333-L333\n          linkFormView[modelName].fieldView.element.value = linkCommand[modelName] || '';\n      }\n    });\n  }\n\n  /**\n   * Handle link new window and link new window confirmation checkboxes\n   * when user is checking/unchecking them.\n   */\n  _handleCheckboxes() {\n    if (!this.formElements.linkNewWindowConfirm || !this.formElements.linkNewWindow) { return; }\n\n    const { editor } = this;\n    const linkFormView = editor.plugins.get('LinkUI').formView;\n\n    // Handle linkNewWindowConfirm checkbox description.\n    if (!linkFormView.linkNewWindowConfirm.element.description) {\n      const description = document.createElement('div');\n      description.innerHTML = this.formElements.linkNewWindowConfirm.description;\n      description.classList.add('helfi-link-form__field_description');\n      linkFormView.linkNewWindowConfirm.element.appendChild(description);\n    }\n\n    // Handle link new window and link new window confirmation checkbox linkages.\n    linkFormView.linkNewWindow.on('change:isChecked', (evt, name, value) => {\n      // Whenever the link new window checkbox is clicked, we want to ask\n      // confirmation from the user. Uncheck the confirmation checkbox.\n      linkFormView.linkNewWindowConfirm.updateChecked(false);\n\n      // Update the \"link new window confirmation\" visibility based on the\n      // value of \"link new window\" checkbox.\n      linkFormView.linkNewWindowConfirm.updateVisibility(value);\n    });\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/helfiLinkUi.js?")},"./assets/js/ckeditor5_plugins/helfiLink/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helfiLink__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helfiLink */ "./assets/js/ckeditor5_plugins/helfiLink/src/helfiLink.js");\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  HelfiLink: _helfiLink__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/index.js?')},"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiCheckBoxView.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HelfiCheckBoxView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n\n\n\n/**\n * The HelfiLink checkbox view class.\n */\nclass HelfiCheckBoxView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n\n    /**\n     * (Optional) The additional CSS class set on the button.\n     *\n     * @observable\n     * @member {String} #class\n     */\n    this.set('class');\n\n    /**\n     * Controls whether the checkbox view is visible. Visible by default, the checkboxes are hidden\n     * using a CSS class.\n     *\n     * @observable\n     * @default true\n     * @member {Boolean} #isVisible\n     */\n    this.set('isVisible', true);\n\n    /**\n     * Indicates whether a related checkbox is checked.\n     *\n     * @observable\n     * @default false\n     * @member {Boolean} #isChecked\n     */\n    this.set('isChecked', false);\n\n    /**\n     * The text of the label associated with the checkbox view.\n     *\n     * @observable\n     * @member {String} #label\n     */\n    this.set('label');\n\n    /**\n     * The text of the label associated with the checkbox view.\n     *\n     * @observable\n     * @member {String} #label\n     */\n    this.set('description');\n\n    /**\n     * The HTML `id` attribute to be assigned to the checkbox.\n     *\n     * @observable\n     * @default null\n     * @member {String|null} #id\n     */\n    this.set('id', null);\n\n    /**\n     * (Optional) Controls the `tabindex` HTML attribute of the checkbox. By default, the checkbox is focusable\n     * but is not included in the <kbd>Tab</kbd> order.\n     *\n     * @observable\n     * @default -1\n     * @member {String} #tabindex\n     */\n    this.set('tabindex', -1);\n\n    /**\n     * The collection of the child views inside of the checkbox {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.children = this.createCollection();\n\n    /**\n     * The label of the checkbox view. It is configurable using the {@link #label label attribute}.\n     *\n     * @readonly\n     * @member {module:ui/view~View} #labelView\n     */\n    this.labelView = this._createLabelView();\n\n    /**\n     * The input of the checkbox view.\n     *\n     * @readonly\n     * @member {module:ui/view~View} #checkboxInputView\n     */\n    this.checkboxInputView = this._createCheckboxInputView();\n\n    this.checkboxSpanToggle = this._createCheckboxSpanToggleView();\n\n    // Bind isVisible to updateVisibility method.\n    this.bind('isVisible').to(this, 'updateVisibility');\n\n    // Bind isChecked to updateChecked method.\n    this.bind('isChecked').to(this, 'updateChecked');\n\n    this.setTemplate({\n      tag: 'div',\n\n      attributes: {\n        class: [\n          'form-type--checkbox',\n          'helfi-link-checkbox',\n          bind.if('isVisible', 'is-hidden', value => !value),\n          bind.to('class'),\n        ],\n      },\n\n      on: {\n        keydown: bind.to(evt => {\n          // Need to check target. Otherwise, we would handle space press on\n          // input[type=text] and it would change checked property twice due\n          // to default browser handling kicking in too.\n          if (evt.target === this.element && evt.keyCode === (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.getCode)('space')) {\n            this.isChecked = !this.isChecked;\n          }\n        }),\n      },\n      children: this.children\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  render() {\n    super.render();\n\n    this.children.add(this.checkboxInputView);\n    this.children.add(this.checkboxSpanToggle);\n    this.children.add(this.labelView);\n  }\n\n  /**\n   * Focuses the {@link #element} of the checkbox.\n   */\n  focus() {\n    this.element.focus();\n  }\n\n  /**\n   * Creates a checkbox input view instance and binds it with checkbox attributes.\n   *\n   * @return {module:ui/view~View} Returns checkbox input view.\n   */\n  _createCheckboxInputView() {\n    const checkboxInputView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View();\n    const bind = this.bindTemplate;\n\n    checkboxInputView.setTemplate({\n      tag: 'input',\n      attributes: {\n        type: 'checkbox',\n        id: bind.to('id'),\n        'checked': bind.if('isChecked'),\n      },\n      on: {\n        change: bind.to(evt => {\n          this.isChecked = evt.target.checked;\n        })\n      }\n    });\n\n    return checkboxInputView;\n  }\n\n  /**\n   * Creates a checkbox toggle span.\n   *\n   * @return {module:ui/view~View} Returns checkbox span toggle view.\n   */\n  _createCheckboxSpanToggleView() {\n    const checkboxSpanToggleView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View();\n    const bind = this.bindTemplate;\n\n    /**\n     * Markup:\n     * <span class=\"checkbox-toggle\">\n     *   <span class=\"checkbox-toggle__inner\"></span>\n     * </span>\n     */\n    checkboxSpanToggleView.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: [\n          'checkbox-toggle',\n        ],\n        id: bind.to('id'),\n      },\n      children: [\n        {\n          tag: 'span',\n          attributes: {\n            class: [\n              'checkbox-toggle__inner'\n            ],\n          },\n        },\n      ],\n    });\n\n    return checkboxSpanToggleView;\n  }\n\n  /**\n   * Creates a label view instance and binds it with checkbox attributes.\n   *\n   * @return {module:ui/view~View} Returns checkbox label view.\n   */\n  _createLabelView() {\n    const labelView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View();\n\n    labelView.setTemplate({\n      tag: 'label',\n\n      attributes: {\n        for: this.bindTemplate.to('id')\n      },\n\n      children: [\n        {\n          text: this.bindTemplate.to('label')\n        }\n      ]\n    });\n\n    return labelView;\n  }\n\n  /**\n   * Update the visibility of the view based on the isVisible property\n   *\n   * @param {boolean} value The boolean value to be set to isVisible property.\n   */\n  updateVisibility(value) {\n    if (value) {\n      this.element.classList.remove('is-hidden');\n    } else {\n      this.element.classList.add('is-hidden');\n    }\n  }\n\n  /**\n   * Update the visibility of the view based on the isVisible property\n   *\n   * @param {boolean} value The boolean value to be set to isVisible property.\n   */\n  updateChecked(value) {\n    if (value !== this.isChecked) {\n      this.checkboxInputView?.element.click();\n    }\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiCheckBoxView.js?")},"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiDetailsView.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HelfiDetailsView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n\n\n\n/**\n * The HelfiLink details view class.\n */\nclass HelfiDetailsView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale, children) {\n    super(locale);\n    this.advancedChildren = children;\n    const bind = this.bindTemplate;\n\n    /**\n     * Controls whether the details view is enabled, i.e. it can be clicked and can execute an action.\n     *\n     * @observable\n     * @default true\n     * @member {Boolean} #isEnabled\n     */\n    this.set('isOpen', false);\n\n    /**\n     * The text of the label associated with the details view.\n     *\n     * @observable\n     * @member {String} #label\n     */\n    this.set('label');\n\n    /**\n     * The HTML `id` attribute to be assigned to the details.\n     *\n     * @observable\n     * @default null\n     * @member {String|null} #id\n     */\n    this.set('id', null);\n\n    /**\n     * The collection of the child views inside of the details {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.children = this.createCollection();\n\n    /**\n     * The input of the details view.\n     *\n     * @readonly\n     * @member {module:ui/view~View} #detailsInputView\n     */\n    this.detailsSummary = this._createDetailsSummary();\n\n    this.setTemplate({\n      tag: 'details',\n\n      attributes: {\n        id: bind.to('id'),\n        class: [\n          'ck-helfi-link-details',\n          bind.if('isOpen', 'ck-is-open', isOpen => isOpen)\n        ],\n        open: bind.if('isOpen'),\n      },\n\n      on: {\n        keydown: bind.to(evt => {\n          // Need to check target. Otherwise, we would handle space press on\n          // input[type=text] and it would change checked property\n          // twice due to default browser handling kicking in too.\n          if (evt.target === this.element && evt.keyCode === (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.getCode)('space')) {\n            this.isOpen = !this.isOpen;\n          }\n        }),\n      },\n      children: this.children,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  render() {\n    super.render();\n\n    this.children.add(this.detailsSummary);\n    this.children.addMany(this.advancedChildren);\n  }\n\n  /**\n   * Focuses the {@link #element} of the details.\n   */\n  focus() {\n    this.element.focus();\n  }\n\n  _createDetailsSummary() {\n    const detailsSummaryView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View();\n\n    detailsSummaryView.setTemplate({\n      tag: 'summary',\n      attributes: {\n        role: 'button',\n        class: [\n          'ck-helfi-link-details__summary',\n        ],\n        'tabindex': 0,\n      },\n      children: [\n        {\n          text: this.bindTemplate.to('label')\n        }\n      ],\n    });\n    return detailsSummaryView;\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiDetailsView.js?")},"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkBaseView.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HelfiLinkBaseView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n\n\n\n/**\n * The HelfiLink base view class.\n */\nclass HelfiLinkBaseView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(editor, options) {\n    super(editor.locale);\n\n    this.options = options;\n    this.tomSelect = false;\n\n    this.linkCommandConfig = editor.config.get('link');\n    this.loadedIcons = this.linkCommandConfig?.loadedIcons;\n\n    // Initialize the isVisible property\n    this.set('isVisible', false);\n\n    // Add a CSS class to the view when isVisible is false\n    this.bind('isVisible').to(this, 'updateVisibility');\n\n    const bind = this.bindTemplate;\n\n    /**\n     * Controls whether the details view is enabled, i.e. it can be clicked and can execute an action.\n     *\n     * @observable\n     * @default true\n     * @member {Boolean} #isEnabled\n     */\n    this.set('isOpen', false);\n\n    /**\n     * The text of the label associated with the details view.\n     *\n     * @observable\n     * @member {String} #label\n     */\n    this.set('label');\n\n    /**\n     * The HTML `id` attribute to be assigned to the details.\n     *\n     * @observable\n     * @default null\n     * @member {String|null} #id\n     */\n    this.set('id', null);\n\n    /**\n     * The collection of the child views inside the details {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n    this.setTemplate({\n      tag: 'select',\n\n      attributes: {\n        id: bind.to('id'),\n        class: [\n          'ck-helfi-link-select-list',\n        ],\n        'data-placeholder': this.options.label,\n        autocomplete: 'off',\n      },\n      on: {\n        keydown: bind.to(evt => {\n          // Need to check target. Otherwise, we would handle space press on\n          // input[type=text] and it would change checked property\n          // twice due to default browser handling kicking in too.\n          if (evt.target === this.element && evt.keyCode === (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.getCode)('space')) {\n            this.isOpen = !this.isOpen;\n          }\n        }),\n      },\n    });\n\n  }\n\n  /**\n   * Update the visibility of the view based on isVisible property.\n   *\n   * @param {boolean} value Truthy value of visibility.\n   */\n  updateVisibility(value) {\n    if (value) {\n      this.tomSelect?.wrapper?.classList.remove('is-hidden');\n      this.element.classList.remove('is-hidden');\n    } else {\n      this.tomSelect?.wrapper?.classList.add('is-hidden');\n      this.element.classList.add('is-hidden');\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  render() {\n    super.render();\n  }\n\n  /**\n   * Focuses the {@link #element} of the details.\n   */\n  focus() {\n    this.element.focus();\n  }\n\n  /**\n   * Default options for the Tom Select.\n   *\n   * @return {object} Default options as an object.\n   */\n  selectListDefaultOptions() {\n    return {\n      valueField: 'option',\n      labelField: 'name',\n      searchField: 'title',\n      maxItems: 1,\n      placeholder: this.options.label,\n      create: false,\n    };\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkBaseView.js?")},"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkIconView.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ HelfiLinkIconView)\n/* harmony export */ });\n/* harmony import */ var _helfiLinkBaseView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helfiLinkBaseView */ "./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkBaseView.js");\n\n\n/**\n * The HelfiLink details view class.\n */\nclass HelfiLinkIconView extends _helfiLinkBaseView__WEBPACK_IMPORTED_MODULE_0__["default"] {\n\n  /**\n   * Render function for the Tom Select library.\n   *\n   * @param {string} element The <select> element to which attach the\n   * Tom Select functionality.\n   */\n  renderTomSelect(element) {\n    // Render the <select> element.\n    if (!this.tomSelect && element) {\n\n      const defaultConfig = super.selectListDefaultOptions();\n\n      // The template for the Tom Select options and selected items.\n      const renderTemplate = (item, escape) => `\n          <span style="align-items: center; display: flex; height: 100%;">\n            <span class="hel-icon hel-icon--${item.icon}" aria-hidden="true"></span>\n            <span class="hel-icon--name" style="margin-left: 8px;">${escape(item.name)}</span>\n          </span>\n        `;\n\n      // Settings for the Tom Select.\n      const settings = {\n        ...defaultConfig,\n        plugins: {\n          dropdown_input: {},\n          remove_button: {\n            title: \'Remove this item\',\n          }\n        },\n        valueField: \'icon\',\n        searchField: [\'name\'],\n        options: Object.keys(this.loadedIcons).map(icon => ({\n          icon,\n          name: this.loadedIcons[icon]\n        })),\n        // Custom rendering functions for options and items\n        render: {\n          option: (item, escape) => renderTemplate(item, escape),\n          item: (item, escape) => renderTemplate(item, escape),\n        },\n      };\n\n      /* global TomSelect */\n      this.tomSelect = new TomSelect(this.element, settings);\n    }\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkIconView.js?')},"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkProtocolView.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ HelfiLinkProtocolView)\n/* harmony export */ });\n/* harmony import */ var _helfiLinkBaseView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helfiLinkBaseView */ "./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkBaseView.js");\n\n\n/**\n * The HelfiLink details view class.\n */\nclass HelfiLinkProtocolView extends _helfiLinkBaseView__WEBPACK_IMPORTED_MODULE_0__["default"] {\n\n\n\n  /**\n   * Render function for the Tom Select library.\n   *\n   * @param {string} element The <select> element to which attach the\n   * Tom Select functionality.\n   * @param {object} options The selectListOptions from Form elements config.\n   */\n  renderTomSelect(element, options) {\n    // Render the <select> element.\n    if (!this.tomSelect && element) {\n\n      const defaultConfig = super.selectListDefaultOptions();\n\n      // The template for the Tom Select options and selected items.\n      const renderTemplate = (item, escape) => `\n          <span style="align-items: center; display: flex; height: 100%;">\n            <span class="hel-icon--name" style="margin-left: 8px;">${escape(item.title)}</span>\n          </span>\n        `;\n\n      // Settings for the Tom Select.\n      const settings = {\n        ...defaultConfig,\n        options: Object.keys(options).map(option => ({\n          option,\n          title: options[option]\n        })),\n        // Custom rendering functions for options and items\n        render: {\n          option: (item, escape) => renderTemplate(item, escape),\n          item: (item, escape) => renderTemplate(item, escape),\n        },\n      };\n      /* global TomSelect */\n      this.tomSelect = new TomSelect(this.element, settings);\n    }\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkProtocolView.js?')},"./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkVariantView.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ HelfiLinkVariantView)\n/* harmony export */ });\n/* harmony import */ var _helfiLinkBaseView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helfiLinkBaseView */ "./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkBaseView.js");\n\n\n/**\n * The HelfiLink details view class.\n */\nclass HelfiLinkVariantView extends _helfiLinkBaseView__WEBPACK_IMPORTED_MODULE_0__["default"] {\n\n  /**\n   * Render function for the Tom Select library.\n   *\n   * @param {string} element The <select> element to which attach the\n   * Tom Select functionality.\n   * @param {object} options The selectListOptions from Form elements config.\n   */\n  renderTomSelect(element, options) {\n    // Render the <select> element.\n    if (!this.tomSelect && element) {\n      const defaultConfig = super.selectListDefaultOptions();\n\n      // The template for the Tom Select options and selected items.\n      const renderTemplate = (item, escape) => `\n          <span style="align-items: center; display: flex; height: 100%;">\n            <span class="hel-icon--name" style="margin-left: 8px;">${escape(item.title)}</span>\n          </span>\n        `;\n      // Settings for the Tom Select.\n      const settings = {\n        ...defaultConfig,\n        plugins: {\n          dropdown_input: {},\n          remove_button: {\n            title: \'Remove this item\',\n          }\n        },\n        options: Object.keys(options).map(option => ({\n          option,\n          title: options[option]\n        })),\n        // Custom rendering functions for options and items\n        render: {\n          option: (item, escape) => renderTemplate(item, escape),\n          item: (item, escape) => renderTemplate(item, escape),\n        },\n      };\n\n      /* global TomSelect */\n      this.tomSelect = new TomSelect(this.element, settings);\n    }\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.helfiLink/./assets/js/ckeditor5_plugins/helfiLink/src/ui/helfiLinkVariantView.js?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.helfiLink/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/typing.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/typing.js");\n\n//# sourceURL=webpack://CKEditor5.helfiLink/delegated_./typing.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.helfiLink/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/utils.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/utils.js");\n\n//# sourceURL=webpack://CKEditor5.helfiLink/delegated_./utils.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.helfiLink/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./assets/js/ckeditor5_plugins/helfiLink/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));