<?php

/**
 * @file
 * Contains installation tasks for helfi_base_content module.
 */

declare(strict_types=1);

use Drupal\language\Entity\ConfigurableLanguage;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function helfi_base_content_install($is_syncing) : void {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if ($is_syncing) {
    return;
  }

  foreach (['fi', 'sv'] as $langcode) {
    if (ConfigurableLanguage::load($langcode)) {
      continue;
    }
    ConfigurableLanguage::createFromLangcode($langcode)
      ->save();
  }

  $prefixes = [];
  foreach (Drupal::languageManager()->getLanguages() as $language) {
    $prefixes[$language->getId()] = $language->getId();
  }

  Drupal::configFactory()->getEditable('language.negotiation')
    ->set('selected_langcode', 'site_default')
    ->set('url.prefixes', $prefixes)
    ->save();

  // Add unit and service to pathauto settings.
  if (Drupal::moduleHandler()->moduleExists('content_lock')) {
    $types = [
      'node' => ['*' => '*'],
      'paragraphs_library_item' => ['*' => '*'],
      'taxonomy_term' => ['*' => '*'],
    ];

    $config_factory = \Drupal::configFactory();
    $content_lock_settings = $config_factory->getEditable('content_lock.settings');
    $content_lock_config = $content_lock_settings->get('types');
    $content_lock_config = array_merge($content_lock_config, $types);
    $content_lock_settings->set('types', $content_lock_config)->save();
  }
}

/**
 * UHF-8135 update fallback language to site_default.
 */
function helfi_base_content_update_9003() : void {
  Drupal::configFactory()->getEditable('language.negotiation')
    ->set('selected_langcode', 'site_default')
    ->save();
}

/**
 * Implements hook_install().
 */
function helfi_base_content_update_9004() : void {
  $config_factory = Drupal::configFactory();

  // Remove the branding navigation and blocks related to it.
  $config_factory->getEditable('system.menu.branding-navigation')->delete();
  $config_factory->getEditable('block.block.brandingnavigation')->delete();
  $config_factory->getEditable('block.block.hdbt_subtheme_brandingnavigation')->delete();
}

/**
 * UHF-8955 simple_sitemap - do not process menu_link_content entities.
 */
function helfi_base_content_update_9005() : void {
  $config_factory = Drupal::configFactory();

  // Remove menu_link_content from enabled entity types:
  $config = $config_factory->getEditable('simple_sitemap.settings');
  if (!$config->isNew()) {
    $enabled_entity_types = $config->get('enabled_entity_types');
    $enabled_entity_types = array_values(array_filter($enabled_entity_types, static fn ($item) => $item !== 'menu_link_content'));
    $config->set('enabled_entity_types', $enabled_entity_types);
    $config->save();
  }

  // Remove remaining menu_link_content related settings.
  $config_factory->getEditable('simple_sitemap.bundle_settings.default.menu_link_content.main')->delete();
  $config_factory->getEditable('simple_sitemap.bundle_settings.default.menu_link_content.branding-navigation')->delete();
  $config_factory->getEditable('simple_sitemap.bundle_settings.default.menu_link_content.account')->delete();
}

/**
 * UHF-8333 Change the LinkedIn API url to correct.
 */
function helfi_base_content_update_9007() : void {
  Drupal::configFactory()->getEditable('social_media.settings')
    ->set('social_media.linkedin.api_url', 'https://www.linkedin.com/sharing/share-offsite/?url=[current-page:url]')
    ->save();

  /** @var \Drupal\language\ConfigurableLanguageManagerInterface $language_manager */
  $language_manager = \Drupal::languageManager();

  foreach (['fi', 'sv'] as $langcode) {
    $config_translation = $language_manager->getLanguageConfigOverride($langcode, 'social_media.settings');

    if (!$config_translation->isNew()) {
      $config_translation
        ->set('social_media.linkedin.api_url', 'https://www.linkedin.com/sharing/share-offsite/?url=[current-page:url]')
        ->save();
    }
  }
}

/**
 * UHF-9471 revoke the admin user's permission for adding admin role to users.
 */
function helfi_base_content_update_9011(): void {
  if (!$role = Role::load('admin')) {
    return;
  }
  $role->revokePermission('assign admin role');
  $role->save();
}

/**
 * UHF-11363: Updated pager labels in views.
 */
function helfi_base_content_update_9019(): void {
  // This is now automated.
}
